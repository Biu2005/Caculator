
casio_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006738  080000c0  080000c0  000010c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000230  080067f8  080067f8  000077f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a28  08006a28  0000805c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08006a28  08006a28  0000805c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08006a28  08006a28  0000805c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a28  08006a28  00007a28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006a2c  08006a2c  00007a2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08006a30  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009a0  2000005c  08006a8c  0000805c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009fc  08006a8c  000089fc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000805c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d2d4  00000000  00000000  00008084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a49  00000000  00000000  00015358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f70  00000000  00000000  00017da8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bdd  00000000  00000000  00018d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000140f3  00000000  00000000  000198f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000145bd  00000000  00000000  0002d9e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00071e22  00000000  00000000  00041fa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b3dc7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003958  00000000  00000000  000b3e0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000b7764  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080067e0 	.word	0x080067e0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	080067e0 	.word	0x080067e0

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	@ 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			@ (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	@ 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	@ 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			@ (mov r8, r8)

08000404 <__aeabi_cdrcmple>:
 8000404:	4684      	mov	ip, r0
 8000406:	0010      	movs	r0, r2
 8000408:	4662      	mov	r2, ip
 800040a:	468c      	mov	ip, r1
 800040c:	0019      	movs	r1, r3
 800040e:	4663      	mov	r3, ip
 8000410:	e000      	b.n	8000414 <__aeabi_cdcmpeq>
 8000412:	46c0      	nop			@ (mov r8, r8)

08000414 <__aeabi_cdcmpeq>:
 8000414:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000416:	f001 f90f 	bl	8001638 <__ledf2>
 800041a:	2800      	cmp	r0, #0
 800041c:	d401      	bmi.n	8000422 <__aeabi_cdcmpeq+0xe>
 800041e:	2100      	movs	r1, #0
 8000420:	42c8      	cmn	r0, r1
 8000422:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000424 <__aeabi_dcmpeq>:
 8000424:	b510      	push	{r4, lr}
 8000426:	f001 f853 	bl	80014d0 <__eqdf2>
 800042a:	4240      	negs	r0, r0
 800042c:	3001      	adds	r0, #1
 800042e:	bd10      	pop	{r4, pc}

08000430 <__aeabi_dcmplt>:
 8000430:	b510      	push	{r4, lr}
 8000432:	f001 f901 	bl	8001638 <__ledf2>
 8000436:	2800      	cmp	r0, #0
 8000438:	db01      	blt.n	800043e <__aeabi_dcmplt+0xe>
 800043a:	2000      	movs	r0, #0
 800043c:	bd10      	pop	{r4, pc}
 800043e:	2001      	movs	r0, #1
 8000440:	bd10      	pop	{r4, pc}
 8000442:	46c0      	nop			@ (mov r8, r8)

08000444 <__aeabi_dcmple>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f001 f8f7 	bl	8001638 <__ledf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	dd01      	ble.n	8000452 <__aeabi_dcmple+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
 8000452:	2001      	movs	r0, #1
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			@ (mov r8, r8)

08000458 <__aeabi_dcmpgt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 f87d 	bl	8001558 <__gedf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	dc01      	bgt.n	8000466 <__aeabi_dcmpgt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_dcmpge>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 f873 	bl	8001558 <__gedf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	da01      	bge.n	800047a <__aeabi_dcmpge+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_cfrcmple>:
 8000480:	4684      	mov	ip, r0
 8000482:	0008      	movs	r0, r1
 8000484:	4661      	mov	r1, ip
 8000486:	e7ff      	b.n	8000488 <__aeabi_cfcmpeq>

08000488 <__aeabi_cfcmpeq>:
 8000488:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800048a:	f000 fbab 	bl	8000be4 <__lesf2>
 800048e:	2800      	cmp	r0, #0
 8000490:	d401      	bmi.n	8000496 <__aeabi_cfcmpeq+0xe>
 8000492:	2100      	movs	r1, #0
 8000494:	42c8      	cmn	r0, r1
 8000496:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000498 <__aeabi_fcmpeq>:
 8000498:	b510      	push	{r4, lr}
 800049a:	f000 fb33 	bl	8000b04 <__eqsf2>
 800049e:	4240      	negs	r0, r0
 80004a0:	3001      	adds	r0, #1
 80004a2:	bd10      	pop	{r4, pc}

080004a4 <__aeabi_fcmplt>:
 80004a4:	b510      	push	{r4, lr}
 80004a6:	f000 fb9d 	bl	8000be4 <__lesf2>
 80004aa:	2800      	cmp	r0, #0
 80004ac:	db01      	blt.n	80004b2 <__aeabi_fcmplt+0xe>
 80004ae:	2000      	movs	r0, #0
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	2001      	movs	r0, #1
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	46c0      	nop			@ (mov r8, r8)

080004b8 <__aeabi_fcmple>:
 80004b8:	b510      	push	{r4, lr}
 80004ba:	f000 fb93 	bl	8000be4 <__lesf2>
 80004be:	2800      	cmp	r0, #0
 80004c0:	dd01      	ble.n	80004c6 <__aeabi_fcmple+0xe>
 80004c2:	2000      	movs	r0, #0
 80004c4:	bd10      	pop	{r4, pc}
 80004c6:	2001      	movs	r0, #1
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	46c0      	nop			@ (mov r8, r8)

080004cc <__aeabi_fcmpgt>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fb41 	bl	8000b54 <__gesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	dc01      	bgt.n	80004da <__aeabi_fcmpgt+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			@ (mov r8, r8)

080004e0 <__aeabi_fcmpge>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fb37 	bl	8000b54 <__gesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	da01      	bge.n	80004ee <__aeabi_fcmpge+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			@ (mov r8, r8)

080004f4 <__aeabi_fadd>:
 80004f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004f6:	024b      	lsls	r3, r1, #9
 80004f8:	0a5a      	lsrs	r2, r3, #9
 80004fa:	4694      	mov	ip, r2
 80004fc:	004a      	lsls	r2, r1, #1
 80004fe:	0fc9      	lsrs	r1, r1, #31
 8000500:	46ce      	mov	lr, r9
 8000502:	4647      	mov	r7, r8
 8000504:	4689      	mov	r9, r1
 8000506:	0045      	lsls	r5, r0, #1
 8000508:	0246      	lsls	r6, r0, #9
 800050a:	0e2d      	lsrs	r5, r5, #24
 800050c:	0e12      	lsrs	r2, r2, #24
 800050e:	b580      	push	{r7, lr}
 8000510:	0999      	lsrs	r1, r3, #6
 8000512:	0a77      	lsrs	r7, r6, #9
 8000514:	0fc4      	lsrs	r4, r0, #31
 8000516:	09b6      	lsrs	r6, r6, #6
 8000518:	1aab      	subs	r3, r5, r2
 800051a:	454c      	cmp	r4, r9
 800051c:	d020      	beq.n	8000560 <__aeabi_fadd+0x6c>
 800051e:	2b00      	cmp	r3, #0
 8000520:	dd0c      	ble.n	800053c <__aeabi_fadd+0x48>
 8000522:	2a00      	cmp	r2, #0
 8000524:	d134      	bne.n	8000590 <__aeabi_fadd+0x9c>
 8000526:	2900      	cmp	r1, #0
 8000528:	d02a      	beq.n	8000580 <__aeabi_fadd+0x8c>
 800052a:	1e5a      	subs	r2, r3, #1
 800052c:	2b01      	cmp	r3, #1
 800052e:	d100      	bne.n	8000532 <__aeabi_fadd+0x3e>
 8000530:	e08f      	b.n	8000652 <__aeabi_fadd+0x15e>
 8000532:	2bff      	cmp	r3, #255	@ 0xff
 8000534:	d100      	bne.n	8000538 <__aeabi_fadd+0x44>
 8000536:	e0cd      	b.n	80006d4 <__aeabi_fadd+0x1e0>
 8000538:	0013      	movs	r3, r2
 800053a:	e02f      	b.n	800059c <__aeabi_fadd+0xa8>
 800053c:	2b00      	cmp	r3, #0
 800053e:	d060      	beq.n	8000602 <__aeabi_fadd+0x10e>
 8000540:	1b53      	subs	r3, r2, r5
 8000542:	2d00      	cmp	r5, #0
 8000544:	d000      	beq.n	8000548 <__aeabi_fadd+0x54>
 8000546:	e0ee      	b.n	8000726 <__aeabi_fadd+0x232>
 8000548:	2e00      	cmp	r6, #0
 800054a:	d100      	bne.n	800054e <__aeabi_fadd+0x5a>
 800054c:	e13e      	b.n	80007cc <__aeabi_fadd+0x2d8>
 800054e:	1e5c      	subs	r4, r3, #1
 8000550:	2b01      	cmp	r3, #1
 8000552:	d100      	bne.n	8000556 <__aeabi_fadd+0x62>
 8000554:	e16b      	b.n	800082e <__aeabi_fadd+0x33a>
 8000556:	2bff      	cmp	r3, #255	@ 0xff
 8000558:	d100      	bne.n	800055c <__aeabi_fadd+0x68>
 800055a:	e0b9      	b.n	80006d0 <__aeabi_fadd+0x1dc>
 800055c:	0023      	movs	r3, r4
 800055e:	e0e7      	b.n	8000730 <__aeabi_fadd+0x23c>
 8000560:	2b00      	cmp	r3, #0
 8000562:	dc00      	bgt.n	8000566 <__aeabi_fadd+0x72>
 8000564:	e0a4      	b.n	80006b0 <__aeabi_fadd+0x1bc>
 8000566:	2a00      	cmp	r2, #0
 8000568:	d069      	beq.n	800063e <__aeabi_fadd+0x14a>
 800056a:	2dff      	cmp	r5, #255	@ 0xff
 800056c:	d100      	bne.n	8000570 <__aeabi_fadd+0x7c>
 800056e:	e0b1      	b.n	80006d4 <__aeabi_fadd+0x1e0>
 8000570:	2280      	movs	r2, #128	@ 0x80
 8000572:	04d2      	lsls	r2, r2, #19
 8000574:	4311      	orrs	r1, r2
 8000576:	2b1b      	cmp	r3, #27
 8000578:	dc00      	bgt.n	800057c <__aeabi_fadd+0x88>
 800057a:	e0e9      	b.n	8000750 <__aeabi_fadd+0x25c>
 800057c:	002b      	movs	r3, r5
 800057e:	3605      	adds	r6, #5
 8000580:	08f7      	lsrs	r7, r6, #3
 8000582:	2bff      	cmp	r3, #255	@ 0xff
 8000584:	d100      	bne.n	8000588 <__aeabi_fadd+0x94>
 8000586:	e0a5      	b.n	80006d4 <__aeabi_fadd+0x1e0>
 8000588:	027a      	lsls	r2, r7, #9
 800058a:	0a52      	lsrs	r2, r2, #9
 800058c:	b2d8      	uxtb	r0, r3
 800058e:	e030      	b.n	80005f2 <__aeabi_fadd+0xfe>
 8000590:	2dff      	cmp	r5, #255	@ 0xff
 8000592:	d100      	bne.n	8000596 <__aeabi_fadd+0xa2>
 8000594:	e09e      	b.n	80006d4 <__aeabi_fadd+0x1e0>
 8000596:	2280      	movs	r2, #128	@ 0x80
 8000598:	04d2      	lsls	r2, r2, #19
 800059a:	4311      	orrs	r1, r2
 800059c:	2001      	movs	r0, #1
 800059e:	2b1b      	cmp	r3, #27
 80005a0:	dc08      	bgt.n	80005b4 <__aeabi_fadd+0xc0>
 80005a2:	0008      	movs	r0, r1
 80005a4:	2220      	movs	r2, #32
 80005a6:	40d8      	lsrs	r0, r3
 80005a8:	1ad3      	subs	r3, r2, r3
 80005aa:	4099      	lsls	r1, r3
 80005ac:	000b      	movs	r3, r1
 80005ae:	1e5a      	subs	r2, r3, #1
 80005b0:	4193      	sbcs	r3, r2
 80005b2:	4318      	orrs	r0, r3
 80005b4:	1a36      	subs	r6, r6, r0
 80005b6:	0173      	lsls	r3, r6, #5
 80005b8:	d400      	bmi.n	80005bc <__aeabi_fadd+0xc8>
 80005ba:	e071      	b.n	80006a0 <__aeabi_fadd+0x1ac>
 80005bc:	01b6      	lsls	r6, r6, #6
 80005be:	09b7      	lsrs	r7, r6, #6
 80005c0:	0038      	movs	r0, r7
 80005c2:	f001 fc57 	bl	8001e74 <__clzsi2>
 80005c6:	003b      	movs	r3, r7
 80005c8:	3805      	subs	r0, #5
 80005ca:	4083      	lsls	r3, r0
 80005cc:	4285      	cmp	r5, r0
 80005ce:	dd4d      	ble.n	800066c <__aeabi_fadd+0x178>
 80005d0:	4eb4      	ldr	r6, [pc, #720]	@ (80008a4 <__aeabi_fadd+0x3b0>)
 80005d2:	1a2d      	subs	r5, r5, r0
 80005d4:	401e      	ands	r6, r3
 80005d6:	075a      	lsls	r2, r3, #29
 80005d8:	d068      	beq.n	80006ac <__aeabi_fadd+0x1b8>
 80005da:	220f      	movs	r2, #15
 80005dc:	4013      	ands	r3, r2
 80005de:	2b04      	cmp	r3, #4
 80005e0:	d064      	beq.n	80006ac <__aeabi_fadd+0x1b8>
 80005e2:	3604      	adds	r6, #4
 80005e4:	0173      	lsls	r3, r6, #5
 80005e6:	d561      	bpl.n	80006ac <__aeabi_fadd+0x1b8>
 80005e8:	1c68      	adds	r0, r5, #1
 80005ea:	2dfe      	cmp	r5, #254	@ 0xfe
 80005ec:	d154      	bne.n	8000698 <__aeabi_fadd+0x1a4>
 80005ee:	20ff      	movs	r0, #255	@ 0xff
 80005f0:	2200      	movs	r2, #0
 80005f2:	05c0      	lsls	r0, r0, #23
 80005f4:	4310      	orrs	r0, r2
 80005f6:	07e4      	lsls	r4, r4, #31
 80005f8:	4320      	orrs	r0, r4
 80005fa:	bcc0      	pop	{r6, r7}
 80005fc:	46b9      	mov	r9, r7
 80005fe:	46b0      	mov	r8, r6
 8000600:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000602:	22fe      	movs	r2, #254	@ 0xfe
 8000604:	4690      	mov	r8, r2
 8000606:	1c68      	adds	r0, r5, #1
 8000608:	0002      	movs	r2, r0
 800060a:	4640      	mov	r0, r8
 800060c:	4210      	tst	r0, r2
 800060e:	d16b      	bne.n	80006e8 <__aeabi_fadd+0x1f4>
 8000610:	2d00      	cmp	r5, #0
 8000612:	d000      	beq.n	8000616 <__aeabi_fadd+0x122>
 8000614:	e0dd      	b.n	80007d2 <__aeabi_fadd+0x2de>
 8000616:	2e00      	cmp	r6, #0
 8000618:	d100      	bne.n	800061c <__aeabi_fadd+0x128>
 800061a:	e102      	b.n	8000822 <__aeabi_fadd+0x32e>
 800061c:	2900      	cmp	r1, #0
 800061e:	d0b3      	beq.n	8000588 <__aeabi_fadd+0x94>
 8000620:	2280      	movs	r2, #128	@ 0x80
 8000622:	1a77      	subs	r7, r6, r1
 8000624:	04d2      	lsls	r2, r2, #19
 8000626:	4217      	tst	r7, r2
 8000628:	d100      	bne.n	800062c <__aeabi_fadd+0x138>
 800062a:	e136      	b.n	800089a <__aeabi_fadd+0x3a6>
 800062c:	464c      	mov	r4, r9
 800062e:	1b8e      	subs	r6, r1, r6
 8000630:	d061      	beq.n	80006f6 <__aeabi_fadd+0x202>
 8000632:	2001      	movs	r0, #1
 8000634:	4216      	tst	r6, r2
 8000636:	d130      	bne.n	800069a <__aeabi_fadd+0x1a6>
 8000638:	2300      	movs	r3, #0
 800063a:	08f7      	lsrs	r7, r6, #3
 800063c:	e7a4      	b.n	8000588 <__aeabi_fadd+0x94>
 800063e:	2900      	cmp	r1, #0
 8000640:	d09e      	beq.n	8000580 <__aeabi_fadd+0x8c>
 8000642:	1e5a      	subs	r2, r3, #1
 8000644:	2b01      	cmp	r3, #1
 8000646:	d100      	bne.n	800064a <__aeabi_fadd+0x156>
 8000648:	e0ca      	b.n	80007e0 <__aeabi_fadd+0x2ec>
 800064a:	2bff      	cmp	r3, #255	@ 0xff
 800064c:	d042      	beq.n	80006d4 <__aeabi_fadd+0x1e0>
 800064e:	0013      	movs	r3, r2
 8000650:	e791      	b.n	8000576 <__aeabi_fadd+0x82>
 8000652:	1a71      	subs	r1, r6, r1
 8000654:	014b      	lsls	r3, r1, #5
 8000656:	d400      	bmi.n	800065a <__aeabi_fadd+0x166>
 8000658:	e0d1      	b.n	80007fe <__aeabi_fadd+0x30a>
 800065a:	018f      	lsls	r7, r1, #6
 800065c:	09bf      	lsrs	r7, r7, #6
 800065e:	0038      	movs	r0, r7
 8000660:	f001 fc08 	bl	8001e74 <__clzsi2>
 8000664:	003b      	movs	r3, r7
 8000666:	3805      	subs	r0, #5
 8000668:	4083      	lsls	r3, r0
 800066a:	2501      	movs	r5, #1
 800066c:	2220      	movs	r2, #32
 800066e:	1b40      	subs	r0, r0, r5
 8000670:	3001      	adds	r0, #1
 8000672:	1a12      	subs	r2, r2, r0
 8000674:	001e      	movs	r6, r3
 8000676:	4093      	lsls	r3, r2
 8000678:	40c6      	lsrs	r6, r0
 800067a:	1e5a      	subs	r2, r3, #1
 800067c:	4193      	sbcs	r3, r2
 800067e:	431e      	orrs	r6, r3
 8000680:	d039      	beq.n	80006f6 <__aeabi_fadd+0x202>
 8000682:	0773      	lsls	r3, r6, #29
 8000684:	d100      	bne.n	8000688 <__aeabi_fadd+0x194>
 8000686:	e11b      	b.n	80008c0 <__aeabi_fadd+0x3cc>
 8000688:	230f      	movs	r3, #15
 800068a:	2500      	movs	r5, #0
 800068c:	4033      	ands	r3, r6
 800068e:	2b04      	cmp	r3, #4
 8000690:	d1a7      	bne.n	80005e2 <__aeabi_fadd+0xee>
 8000692:	2001      	movs	r0, #1
 8000694:	0172      	lsls	r2, r6, #5
 8000696:	d57c      	bpl.n	8000792 <__aeabi_fadd+0x29e>
 8000698:	b2c0      	uxtb	r0, r0
 800069a:	01b2      	lsls	r2, r6, #6
 800069c:	0a52      	lsrs	r2, r2, #9
 800069e:	e7a8      	b.n	80005f2 <__aeabi_fadd+0xfe>
 80006a0:	0773      	lsls	r3, r6, #29
 80006a2:	d003      	beq.n	80006ac <__aeabi_fadd+0x1b8>
 80006a4:	230f      	movs	r3, #15
 80006a6:	4033      	ands	r3, r6
 80006a8:	2b04      	cmp	r3, #4
 80006aa:	d19a      	bne.n	80005e2 <__aeabi_fadd+0xee>
 80006ac:	002b      	movs	r3, r5
 80006ae:	e767      	b.n	8000580 <__aeabi_fadd+0x8c>
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d023      	beq.n	80006fc <__aeabi_fadd+0x208>
 80006b4:	1b53      	subs	r3, r2, r5
 80006b6:	2d00      	cmp	r5, #0
 80006b8:	d17b      	bne.n	80007b2 <__aeabi_fadd+0x2be>
 80006ba:	2e00      	cmp	r6, #0
 80006bc:	d100      	bne.n	80006c0 <__aeabi_fadd+0x1cc>
 80006be:	e086      	b.n	80007ce <__aeabi_fadd+0x2da>
 80006c0:	1e5d      	subs	r5, r3, #1
 80006c2:	2b01      	cmp	r3, #1
 80006c4:	d100      	bne.n	80006c8 <__aeabi_fadd+0x1d4>
 80006c6:	e08b      	b.n	80007e0 <__aeabi_fadd+0x2ec>
 80006c8:	2bff      	cmp	r3, #255	@ 0xff
 80006ca:	d002      	beq.n	80006d2 <__aeabi_fadd+0x1de>
 80006cc:	002b      	movs	r3, r5
 80006ce:	e075      	b.n	80007bc <__aeabi_fadd+0x2c8>
 80006d0:	464c      	mov	r4, r9
 80006d2:	4667      	mov	r7, ip
 80006d4:	2f00      	cmp	r7, #0
 80006d6:	d100      	bne.n	80006da <__aeabi_fadd+0x1e6>
 80006d8:	e789      	b.n	80005ee <__aeabi_fadd+0xfa>
 80006da:	2280      	movs	r2, #128	@ 0x80
 80006dc:	03d2      	lsls	r2, r2, #15
 80006de:	433a      	orrs	r2, r7
 80006e0:	0252      	lsls	r2, r2, #9
 80006e2:	20ff      	movs	r0, #255	@ 0xff
 80006e4:	0a52      	lsrs	r2, r2, #9
 80006e6:	e784      	b.n	80005f2 <__aeabi_fadd+0xfe>
 80006e8:	1a77      	subs	r7, r6, r1
 80006ea:	017b      	lsls	r3, r7, #5
 80006ec:	d46b      	bmi.n	80007c6 <__aeabi_fadd+0x2d2>
 80006ee:	2f00      	cmp	r7, #0
 80006f0:	d000      	beq.n	80006f4 <__aeabi_fadd+0x200>
 80006f2:	e765      	b.n	80005c0 <__aeabi_fadd+0xcc>
 80006f4:	2400      	movs	r4, #0
 80006f6:	2000      	movs	r0, #0
 80006f8:	2200      	movs	r2, #0
 80006fa:	e77a      	b.n	80005f2 <__aeabi_fadd+0xfe>
 80006fc:	22fe      	movs	r2, #254	@ 0xfe
 80006fe:	1c6b      	adds	r3, r5, #1
 8000700:	421a      	tst	r2, r3
 8000702:	d149      	bne.n	8000798 <__aeabi_fadd+0x2a4>
 8000704:	2d00      	cmp	r5, #0
 8000706:	d000      	beq.n	800070a <__aeabi_fadd+0x216>
 8000708:	e09f      	b.n	800084a <__aeabi_fadd+0x356>
 800070a:	2e00      	cmp	r6, #0
 800070c:	d100      	bne.n	8000710 <__aeabi_fadd+0x21c>
 800070e:	e0ba      	b.n	8000886 <__aeabi_fadd+0x392>
 8000710:	2900      	cmp	r1, #0
 8000712:	d100      	bne.n	8000716 <__aeabi_fadd+0x222>
 8000714:	e0cf      	b.n	80008b6 <__aeabi_fadd+0x3c2>
 8000716:	1872      	adds	r2, r6, r1
 8000718:	0153      	lsls	r3, r2, #5
 800071a:	d400      	bmi.n	800071e <__aeabi_fadd+0x22a>
 800071c:	e0cd      	b.n	80008ba <__aeabi_fadd+0x3c6>
 800071e:	0192      	lsls	r2, r2, #6
 8000720:	2001      	movs	r0, #1
 8000722:	0a52      	lsrs	r2, r2, #9
 8000724:	e765      	b.n	80005f2 <__aeabi_fadd+0xfe>
 8000726:	2aff      	cmp	r2, #255	@ 0xff
 8000728:	d0d2      	beq.n	80006d0 <__aeabi_fadd+0x1dc>
 800072a:	2080      	movs	r0, #128	@ 0x80
 800072c:	04c0      	lsls	r0, r0, #19
 800072e:	4306      	orrs	r6, r0
 8000730:	2001      	movs	r0, #1
 8000732:	2b1b      	cmp	r3, #27
 8000734:	dc08      	bgt.n	8000748 <__aeabi_fadd+0x254>
 8000736:	0030      	movs	r0, r6
 8000738:	2420      	movs	r4, #32
 800073a:	40d8      	lsrs	r0, r3
 800073c:	1ae3      	subs	r3, r4, r3
 800073e:	409e      	lsls	r6, r3
 8000740:	0033      	movs	r3, r6
 8000742:	1e5c      	subs	r4, r3, #1
 8000744:	41a3      	sbcs	r3, r4
 8000746:	4318      	orrs	r0, r3
 8000748:	464c      	mov	r4, r9
 800074a:	0015      	movs	r5, r2
 800074c:	1a0e      	subs	r6, r1, r0
 800074e:	e732      	b.n	80005b6 <__aeabi_fadd+0xc2>
 8000750:	0008      	movs	r0, r1
 8000752:	2220      	movs	r2, #32
 8000754:	40d8      	lsrs	r0, r3
 8000756:	1ad3      	subs	r3, r2, r3
 8000758:	4099      	lsls	r1, r3
 800075a:	000b      	movs	r3, r1
 800075c:	1e5a      	subs	r2, r3, #1
 800075e:	4193      	sbcs	r3, r2
 8000760:	4303      	orrs	r3, r0
 8000762:	18f6      	adds	r6, r6, r3
 8000764:	0173      	lsls	r3, r6, #5
 8000766:	d59b      	bpl.n	80006a0 <__aeabi_fadd+0x1ac>
 8000768:	3501      	adds	r5, #1
 800076a:	2dff      	cmp	r5, #255	@ 0xff
 800076c:	d100      	bne.n	8000770 <__aeabi_fadd+0x27c>
 800076e:	e73e      	b.n	80005ee <__aeabi_fadd+0xfa>
 8000770:	2301      	movs	r3, #1
 8000772:	494d      	ldr	r1, [pc, #308]	@ (80008a8 <__aeabi_fadd+0x3b4>)
 8000774:	0872      	lsrs	r2, r6, #1
 8000776:	4033      	ands	r3, r6
 8000778:	400a      	ands	r2, r1
 800077a:	431a      	orrs	r2, r3
 800077c:	0016      	movs	r6, r2
 800077e:	0753      	lsls	r3, r2, #29
 8000780:	d004      	beq.n	800078c <__aeabi_fadd+0x298>
 8000782:	230f      	movs	r3, #15
 8000784:	4013      	ands	r3, r2
 8000786:	2b04      	cmp	r3, #4
 8000788:	d000      	beq.n	800078c <__aeabi_fadd+0x298>
 800078a:	e72a      	b.n	80005e2 <__aeabi_fadd+0xee>
 800078c:	0173      	lsls	r3, r6, #5
 800078e:	d500      	bpl.n	8000792 <__aeabi_fadd+0x29e>
 8000790:	e72a      	b.n	80005e8 <__aeabi_fadd+0xf4>
 8000792:	002b      	movs	r3, r5
 8000794:	08f7      	lsrs	r7, r6, #3
 8000796:	e6f7      	b.n	8000588 <__aeabi_fadd+0x94>
 8000798:	2bff      	cmp	r3, #255	@ 0xff
 800079a:	d100      	bne.n	800079e <__aeabi_fadd+0x2aa>
 800079c:	e727      	b.n	80005ee <__aeabi_fadd+0xfa>
 800079e:	1871      	adds	r1, r6, r1
 80007a0:	0849      	lsrs	r1, r1, #1
 80007a2:	074a      	lsls	r2, r1, #29
 80007a4:	d02f      	beq.n	8000806 <__aeabi_fadd+0x312>
 80007a6:	220f      	movs	r2, #15
 80007a8:	400a      	ands	r2, r1
 80007aa:	2a04      	cmp	r2, #4
 80007ac:	d02b      	beq.n	8000806 <__aeabi_fadd+0x312>
 80007ae:	1d0e      	adds	r6, r1, #4
 80007b0:	e6e6      	b.n	8000580 <__aeabi_fadd+0x8c>
 80007b2:	2aff      	cmp	r2, #255	@ 0xff
 80007b4:	d08d      	beq.n	80006d2 <__aeabi_fadd+0x1de>
 80007b6:	2080      	movs	r0, #128	@ 0x80
 80007b8:	04c0      	lsls	r0, r0, #19
 80007ba:	4306      	orrs	r6, r0
 80007bc:	2b1b      	cmp	r3, #27
 80007be:	dd24      	ble.n	800080a <__aeabi_fadd+0x316>
 80007c0:	0013      	movs	r3, r2
 80007c2:	1d4e      	adds	r6, r1, #5
 80007c4:	e6dc      	b.n	8000580 <__aeabi_fadd+0x8c>
 80007c6:	464c      	mov	r4, r9
 80007c8:	1b8f      	subs	r7, r1, r6
 80007ca:	e6f9      	b.n	80005c0 <__aeabi_fadd+0xcc>
 80007cc:	464c      	mov	r4, r9
 80007ce:	000e      	movs	r6, r1
 80007d0:	e6d6      	b.n	8000580 <__aeabi_fadd+0x8c>
 80007d2:	2e00      	cmp	r6, #0
 80007d4:	d149      	bne.n	800086a <__aeabi_fadd+0x376>
 80007d6:	2900      	cmp	r1, #0
 80007d8:	d068      	beq.n	80008ac <__aeabi_fadd+0x3b8>
 80007da:	4667      	mov	r7, ip
 80007dc:	464c      	mov	r4, r9
 80007de:	e77c      	b.n	80006da <__aeabi_fadd+0x1e6>
 80007e0:	1870      	adds	r0, r6, r1
 80007e2:	0143      	lsls	r3, r0, #5
 80007e4:	d574      	bpl.n	80008d0 <__aeabi_fadd+0x3dc>
 80007e6:	4930      	ldr	r1, [pc, #192]	@ (80008a8 <__aeabi_fadd+0x3b4>)
 80007e8:	0840      	lsrs	r0, r0, #1
 80007ea:	4001      	ands	r1, r0
 80007ec:	0743      	lsls	r3, r0, #29
 80007ee:	d009      	beq.n	8000804 <__aeabi_fadd+0x310>
 80007f0:	230f      	movs	r3, #15
 80007f2:	4003      	ands	r3, r0
 80007f4:	2b04      	cmp	r3, #4
 80007f6:	d005      	beq.n	8000804 <__aeabi_fadd+0x310>
 80007f8:	2302      	movs	r3, #2
 80007fa:	1d0e      	adds	r6, r1, #4
 80007fc:	e6c0      	b.n	8000580 <__aeabi_fadd+0x8c>
 80007fe:	2301      	movs	r3, #1
 8000800:	08cf      	lsrs	r7, r1, #3
 8000802:	e6c1      	b.n	8000588 <__aeabi_fadd+0x94>
 8000804:	2302      	movs	r3, #2
 8000806:	08cf      	lsrs	r7, r1, #3
 8000808:	e6be      	b.n	8000588 <__aeabi_fadd+0x94>
 800080a:	2520      	movs	r5, #32
 800080c:	0030      	movs	r0, r6
 800080e:	40d8      	lsrs	r0, r3
 8000810:	1aeb      	subs	r3, r5, r3
 8000812:	409e      	lsls	r6, r3
 8000814:	0033      	movs	r3, r6
 8000816:	1e5d      	subs	r5, r3, #1
 8000818:	41ab      	sbcs	r3, r5
 800081a:	4303      	orrs	r3, r0
 800081c:	0015      	movs	r5, r2
 800081e:	185e      	adds	r6, r3, r1
 8000820:	e7a0      	b.n	8000764 <__aeabi_fadd+0x270>
 8000822:	2900      	cmp	r1, #0
 8000824:	d100      	bne.n	8000828 <__aeabi_fadd+0x334>
 8000826:	e765      	b.n	80006f4 <__aeabi_fadd+0x200>
 8000828:	464c      	mov	r4, r9
 800082a:	4667      	mov	r7, ip
 800082c:	e6ac      	b.n	8000588 <__aeabi_fadd+0x94>
 800082e:	1b8f      	subs	r7, r1, r6
 8000830:	017b      	lsls	r3, r7, #5
 8000832:	d52e      	bpl.n	8000892 <__aeabi_fadd+0x39e>
 8000834:	01bf      	lsls	r7, r7, #6
 8000836:	09bf      	lsrs	r7, r7, #6
 8000838:	0038      	movs	r0, r7
 800083a:	f001 fb1b 	bl	8001e74 <__clzsi2>
 800083e:	003b      	movs	r3, r7
 8000840:	3805      	subs	r0, #5
 8000842:	4083      	lsls	r3, r0
 8000844:	464c      	mov	r4, r9
 8000846:	3501      	adds	r5, #1
 8000848:	e710      	b.n	800066c <__aeabi_fadd+0x178>
 800084a:	2e00      	cmp	r6, #0
 800084c:	d100      	bne.n	8000850 <__aeabi_fadd+0x35c>
 800084e:	e740      	b.n	80006d2 <__aeabi_fadd+0x1de>
 8000850:	2900      	cmp	r1, #0
 8000852:	d100      	bne.n	8000856 <__aeabi_fadd+0x362>
 8000854:	e741      	b.n	80006da <__aeabi_fadd+0x1e6>
 8000856:	2380      	movs	r3, #128	@ 0x80
 8000858:	03db      	lsls	r3, r3, #15
 800085a:	429f      	cmp	r7, r3
 800085c:	d200      	bcs.n	8000860 <__aeabi_fadd+0x36c>
 800085e:	e73c      	b.n	80006da <__aeabi_fadd+0x1e6>
 8000860:	459c      	cmp	ip, r3
 8000862:	d300      	bcc.n	8000866 <__aeabi_fadd+0x372>
 8000864:	e739      	b.n	80006da <__aeabi_fadd+0x1e6>
 8000866:	4667      	mov	r7, ip
 8000868:	e737      	b.n	80006da <__aeabi_fadd+0x1e6>
 800086a:	2900      	cmp	r1, #0
 800086c:	d100      	bne.n	8000870 <__aeabi_fadd+0x37c>
 800086e:	e734      	b.n	80006da <__aeabi_fadd+0x1e6>
 8000870:	2380      	movs	r3, #128	@ 0x80
 8000872:	03db      	lsls	r3, r3, #15
 8000874:	429f      	cmp	r7, r3
 8000876:	d200      	bcs.n	800087a <__aeabi_fadd+0x386>
 8000878:	e72f      	b.n	80006da <__aeabi_fadd+0x1e6>
 800087a:	459c      	cmp	ip, r3
 800087c:	d300      	bcc.n	8000880 <__aeabi_fadd+0x38c>
 800087e:	e72c      	b.n	80006da <__aeabi_fadd+0x1e6>
 8000880:	464c      	mov	r4, r9
 8000882:	4667      	mov	r7, ip
 8000884:	e729      	b.n	80006da <__aeabi_fadd+0x1e6>
 8000886:	2900      	cmp	r1, #0
 8000888:	d100      	bne.n	800088c <__aeabi_fadd+0x398>
 800088a:	e734      	b.n	80006f6 <__aeabi_fadd+0x202>
 800088c:	2300      	movs	r3, #0
 800088e:	08cf      	lsrs	r7, r1, #3
 8000890:	e67a      	b.n	8000588 <__aeabi_fadd+0x94>
 8000892:	464c      	mov	r4, r9
 8000894:	2301      	movs	r3, #1
 8000896:	08ff      	lsrs	r7, r7, #3
 8000898:	e676      	b.n	8000588 <__aeabi_fadd+0x94>
 800089a:	2f00      	cmp	r7, #0
 800089c:	d100      	bne.n	80008a0 <__aeabi_fadd+0x3ac>
 800089e:	e729      	b.n	80006f4 <__aeabi_fadd+0x200>
 80008a0:	08ff      	lsrs	r7, r7, #3
 80008a2:	e671      	b.n	8000588 <__aeabi_fadd+0x94>
 80008a4:	fbffffff 	.word	0xfbffffff
 80008a8:	7dffffff 	.word	0x7dffffff
 80008ac:	2280      	movs	r2, #128	@ 0x80
 80008ae:	2400      	movs	r4, #0
 80008b0:	20ff      	movs	r0, #255	@ 0xff
 80008b2:	03d2      	lsls	r2, r2, #15
 80008b4:	e69d      	b.n	80005f2 <__aeabi_fadd+0xfe>
 80008b6:	2300      	movs	r3, #0
 80008b8:	e666      	b.n	8000588 <__aeabi_fadd+0x94>
 80008ba:	2300      	movs	r3, #0
 80008bc:	08d7      	lsrs	r7, r2, #3
 80008be:	e663      	b.n	8000588 <__aeabi_fadd+0x94>
 80008c0:	2001      	movs	r0, #1
 80008c2:	0172      	lsls	r2, r6, #5
 80008c4:	d500      	bpl.n	80008c8 <__aeabi_fadd+0x3d4>
 80008c6:	e6e7      	b.n	8000698 <__aeabi_fadd+0x1a4>
 80008c8:	0031      	movs	r1, r6
 80008ca:	2300      	movs	r3, #0
 80008cc:	08cf      	lsrs	r7, r1, #3
 80008ce:	e65b      	b.n	8000588 <__aeabi_fadd+0x94>
 80008d0:	2301      	movs	r3, #1
 80008d2:	08c7      	lsrs	r7, r0, #3
 80008d4:	e658      	b.n	8000588 <__aeabi_fadd+0x94>
 80008d6:	46c0      	nop			@ (mov r8, r8)

080008d8 <__aeabi_fdiv>:
 80008d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008da:	4646      	mov	r6, r8
 80008dc:	464f      	mov	r7, r9
 80008de:	46d6      	mov	lr, sl
 80008e0:	0245      	lsls	r5, r0, #9
 80008e2:	b5c0      	push	{r6, r7, lr}
 80008e4:	0fc3      	lsrs	r3, r0, #31
 80008e6:	0047      	lsls	r7, r0, #1
 80008e8:	4698      	mov	r8, r3
 80008ea:	1c0e      	adds	r6, r1, #0
 80008ec:	0a6d      	lsrs	r5, r5, #9
 80008ee:	0e3f      	lsrs	r7, r7, #24
 80008f0:	d05b      	beq.n	80009aa <__aeabi_fdiv+0xd2>
 80008f2:	2fff      	cmp	r7, #255	@ 0xff
 80008f4:	d021      	beq.n	800093a <__aeabi_fdiv+0x62>
 80008f6:	2380      	movs	r3, #128	@ 0x80
 80008f8:	00ed      	lsls	r5, r5, #3
 80008fa:	04db      	lsls	r3, r3, #19
 80008fc:	431d      	orrs	r5, r3
 80008fe:	2300      	movs	r3, #0
 8000900:	4699      	mov	r9, r3
 8000902:	469a      	mov	sl, r3
 8000904:	3f7f      	subs	r7, #127	@ 0x7f
 8000906:	0274      	lsls	r4, r6, #9
 8000908:	0073      	lsls	r3, r6, #1
 800090a:	0a64      	lsrs	r4, r4, #9
 800090c:	0e1b      	lsrs	r3, r3, #24
 800090e:	0ff6      	lsrs	r6, r6, #31
 8000910:	2b00      	cmp	r3, #0
 8000912:	d020      	beq.n	8000956 <__aeabi_fdiv+0x7e>
 8000914:	2bff      	cmp	r3, #255	@ 0xff
 8000916:	d043      	beq.n	80009a0 <__aeabi_fdiv+0xc8>
 8000918:	2280      	movs	r2, #128	@ 0x80
 800091a:	2000      	movs	r0, #0
 800091c:	00e4      	lsls	r4, r4, #3
 800091e:	04d2      	lsls	r2, r2, #19
 8000920:	4314      	orrs	r4, r2
 8000922:	3b7f      	subs	r3, #127	@ 0x7f
 8000924:	4642      	mov	r2, r8
 8000926:	1aff      	subs	r7, r7, r3
 8000928:	464b      	mov	r3, r9
 800092a:	4072      	eors	r2, r6
 800092c:	2b0f      	cmp	r3, #15
 800092e:	d900      	bls.n	8000932 <__aeabi_fdiv+0x5a>
 8000930:	e09d      	b.n	8000a6e <__aeabi_fdiv+0x196>
 8000932:	4971      	ldr	r1, [pc, #452]	@ (8000af8 <__aeabi_fdiv+0x220>)
 8000934:	009b      	lsls	r3, r3, #2
 8000936:	58cb      	ldr	r3, [r1, r3]
 8000938:	469f      	mov	pc, r3
 800093a:	2d00      	cmp	r5, #0
 800093c:	d15a      	bne.n	80009f4 <__aeabi_fdiv+0x11c>
 800093e:	2308      	movs	r3, #8
 8000940:	4699      	mov	r9, r3
 8000942:	3b06      	subs	r3, #6
 8000944:	0274      	lsls	r4, r6, #9
 8000946:	469a      	mov	sl, r3
 8000948:	0073      	lsls	r3, r6, #1
 800094a:	27ff      	movs	r7, #255	@ 0xff
 800094c:	0a64      	lsrs	r4, r4, #9
 800094e:	0e1b      	lsrs	r3, r3, #24
 8000950:	0ff6      	lsrs	r6, r6, #31
 8000952:	2b00      	cmp	r3, #0
 8000954:	d1de      	bne.n	8000914 <__aeabi_fdiv+0x3c>
 8000956:	2c00      	cmp	r4, #0
 8000958:	d13b      	bne.n	80009d2 <__aeabi_fdiv+0xfa>
 800095a:	2301      	movs	r3, #1
 800095c:	4642      	mov	r2, r8
 800095e:	4649      	mov	r1, r9
 8000960:	4072      	eors	r2, r6
 8000962:	4319      	orrs	r1, r3
 8000964:	290e      	cmp	r1, #14
 8000966:	d818      	bhi.n	800099a <__aeabi_fdiv+0xc2>
 8000968:	4864      	ldr	r0, [pc, #400]	@ (8000afc <__aeabi_fdiv+0x224>)
 800096a:	0089      	lsls	r1, r1, #2
 800096c:	5841      	ldr	r1, [r0, r1]
 800096e:	468f      	mov	pc, r1
 8000970:	4653      	mov	r3, sl
 8000972:	2b02      	cmp	r3, #2
 8000974:	d100      	bne.n	8000978 <__aeabi_fdiv+0xa0>
 8000976:	e0b8      	b.n	8000aea <__aeabi_fdiv+0x212>
 8000978:	2b03      	cmp	r3, #3
 800097a:	d06e      	beq.n	8000a5a <__aeabi_fdiv+0x182>
 800097c:	4642      	mov	r2, r8
 800097e:	002c      	movs	r4, r5
 8000980:	2b01      	cmp	r3, #1
 8000982:	d140      	bne.n	8000a06 <__aeabi_fdiv+0x12e>
 8000984:	2000      	movs	r0, #0
 8000986:	2400      	movs	r4, #0
 8000988:	05c0      	lsls	r0, r0, #23
 800098a:	4320      	orrs	r0, r4
 800098c:	07d2      	lsls	r2, r2, #31
 800098e:	4310      	orrs	r0, r2
 8000990:	bce0      	pop	{r5, r6, r7}
 8000992:	46ba      	mov	sl, r7
 8000994:	46b1      	mov	r9, r6
 8000996:	46a8      	mov	r8, r5
 8000998:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800099a:	20ff      	movs	r0, #255	@ 0xff
 800099c:	2400      	movs	r4, #0
 800099e:	e7f3      	b.n	8000988 <__aeabi_fdiv+0xb0>
 80009a0:	2c00      	cmp	r4, #0
 80009a2:	d120      	bne.n	80009e6 <__aeabi_fdiv+0x10e>
 80009a4:	2302      	movs	r3, #2
 80009a6:	3fff      	subs	r7, #255	@ 0xff
 80009a8:	e7d8      	b.n	800095c <__aeabi_fdiv+0x84>
 80009aa:	2d00      	cmp	r5, #0
 80009ac:	d105      	bne.n	80009ba <__aeabi_fdiv+0xe2>
 80009ae:	2304      	movs	r3, #4
 80009b0:	4699      	mov	r9, r3
 80009b2:	3b03      	subs	r3, #3
 80009b4:	2700      	movs	r7, #0
 80009b6:	469a      	mov	sl, r3
 80009b8:	e7a5      	b.n	8000906 <__aeabi_fdiv+0x2e>
 80009ba:	0028      	movs	r0, r5
 80009bc:	f001 fa5a 	bl	8001e74 <__clzsi2>
 80009c0:	2776      	movs	r7, #118	@ 0x76
 80009c2:	1f43      	subs	r3, r0, #5
 80009c4:	409d      	lsls	r5, r3
 80009c6:	2300      	movs	r3, #0
 80009c8:	427f      	negs	r7, r7
 80009ca:	4699      	mov	r9, r3
 80009cc:	469a      	mov	sl, r3
 80009ce:	1a3f      	subs	r7, r7, r0
 80009d0:	e799      	b.n	8000906 <__aeabi_fdiv+0x2e>
 80009d2:	0020      	movs	r0, r4
 80009d4:	f001 fa4e 	bl	8001e74 <__clzsi2>
 80009d8:	1f43      	subs	r3, r0, #5
 80009da:	409c      	lsls	r4, r3
 80009dc:	2376      	movs	r3, #118	@ 0x76
 80009de:	425b      	negs	r3, r3
 80009e0:	1a1b      	subs	r3, r3, r0
 80009e2:	2000      	movs	r0, #0
 80009e4:	e79e      	b.n	8000924 <__aeabi_fdiv+0x4c>
 80009e6:	2303      	movs	r3, #3
 80009e8:	464a      	mov	r2, r9
 80009ea:	431a      	orrs	r2, r3
 80009ec:	4691      	mov	r9, r2
 80009ee:	2003      	movs	r0, #3
 80009f0:	33fc      	adds	r3, #252	@ 0xfc
 80009f2:	e797      	b.n	8000924 <__aeabi_fdiv+0x4c>
 80009f4:	230c      	movs	r3, #12
 80009f6:	4699      	mov	r9, r3
 80009f8:	3b09      	subs	r3, #9
 80009fa:	27ff      	movs	r7, #255	@ 0xff
 80009fc:	469a      	mov	sl, r3
 80009fe:	e782      	b.n	8000906 <__aeabi_fdiv+0x2e>
 8000a00:	2803      	cmp	r0, #3
 8000a02:	d02c      	beq.n	8000a5e <__aeabi_fdiv+0x186>
 8000a04:	0032      	movs	r2, r6
 8000a06:	0038      	movs	r0, r7
 8000a08:	307f      	adds	r0, #127	@ 0x7f
 8000a0a:	2800      	cmp	r0, #0
 8000a0c:	dd47      	ble.n	8000a9e <__aeabi_fdiv+0x1c6>
 8000a0e:	0763      	lsls	r3, r4, #29
 8000a10:	d004      	beq.n	8000a1c <__aeabi_fdiv+0x144>
 8000a12:	230f      	movs	r3, #15
 8000a14:	4023      	ands	r3, r4
 8000a16:	2b04      	cmp	r3, #4
 8000a18:	d000      	beq.n	8000a1c <__aeabi_fdiv+0x144>
 8000a1a:	3404      	adds	r4, #4
 8000a1c:	0123      	lsls	r3, r4, #4
 8000a1e:	d503      	bpl.n	8000a28 <__aeabi_fdiv+0x150>
 8000a20:	0038      	movs	r0, r7
 8000a22:	4b37      	ldr	r3, [pc, #220]	@ (8000b00 <__aeabi_fdiv+0x228>)
 8000a24:	3080      	adds	r0, #128	@ 0x80
 8000a26:	401c      	ands	r4, r3
 8000a28:	28fe      	cmp	r0, #254	@ 0xfe
 8000a2a:	dcb6      	bgt.n	800099a <__aeabi_fdiv+0xc2>
 8000a2c:	01a4      	lsls	r4, r4, #6
 8000a2e:	0a64      	lsrs	r4, r4, #9
 8000a30:	b2c0      	uxtb	r0, r0
 8000a32:	e7a9      	b.n	8000988 <__aeabi_fdiv+0xb0>
 8000a34:	2480      	movs	r4, #128	@ 0x80
 8000a36:	2200      	movs	r2, #0
 8000a38:	20ff      	movs	r0, #255	@ 0xff
 8000a3a:	03e4      	lsls	r4, r4, #15
 8000a3c:	e7a4      	b.n	8000988 <__aeabi_fdiv+0xb0>
 8000a3e:	2380      	movs	r3, #128	@ 0x80
 8000a40:	03db      	lsls	r3, r3, #15
 8000a42:	421d      	tst	r5, r3
 8000a44:	d001      	beq.n	8000a4a <__aeabi_fdiv+0x172>
 8000a46:	421c      	tst	r4, r3
 8000a48:	d00b      	beq.n	8000a62 <__aeabi_fdiv+0x18a>
 8000a4a:	2480      	movs	r4, #128	@ 0x80
 8000a4c:	03e4      	lsls	r4, r4, #15
 8000a4e:	432c      	orrs	r4, r5
 8000a50:	0264      	lsls	r4, r4, #9
 8000a52:	4642      	mov	r2, r8
 8000a54:	20ff      	movs	r0, #255	@ 0xff
 8000a56:	0a64      	lsrs	r4, r4, #9
 8000a58:	e796      	b.n	8000988 <__aeabi_fdiv+0xb0>
 8000a5a:	4646      	mov	r6, r8
 8000a5c:	002c      	movs	r4, r5
 8000a5e:	2380      	movs	r3, #128	@ 0x80
 8000a60:	03db      	lsls	r3, r3, #15
 8000a62:	431c      	orrs	r4, r3
 8000a64:	0264      	lsls	r4, r4, #9
 8000a66:	0032      	movs	r2, r6
 8000a68:	20ff      	movs	r0, #255	@ 0xff
 8000a6a:	0a64      	lsrs	r4, r4, #9
 8000a6c:	e78c      	b.n	8000988 <__aeabi_fdiv+0xb0>
 8000a6e:	016d      	lsls	r5, r5, #5
 8000a70:	0160      	lsls	r0, r4, #5
 8000a72:	4285      	cmp	r5, r0
 8000a74:	d22d      	bcs.n	8000ad2 <__aeabi_fdiv+0x1fa>
 8000a76:	231b      	movs	r3, #27
 8000a78:	2400      	movs	r4, #0
 8000a7a:	3f01      	subs	r7, #1
 8000a7c:	2601      	movs	r6, #1
 8000a7e:	0029      	movs	r1, r5
 8000a80:	0064      	lsls	r4, r4, #1
 8000a82:	006d      	lsls	r5, r5, #1
 8000a84:	2900      	cmp	r1, #0
 8000a86:	db01      	blt.n	8000a8c <__aeabi_fdiv+0x1b4>
 8000a88:	4285      	cmp	r5, r0
 8000a8a:	d301      	bcc.n	8000a90 <__aeabi_fdiv+0x1b8>
 8000a8c:	1a2d      	subs	r5, r5, r0
 8000a8e:	4334      	orrs	r4, r6
 8000a90:	3b01      	subs	r3, #1
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d1f3      	bne.n	8000a7e <__aeabi_fdiv+0x1a6>
 8000a96:	1e6b      	subs	r3, r5, #1
 8000a98:	419d      	sbcs	r5, r3
 8000a9a:	432c      	orrs	r4, r5
 8000a9c:	e7b3      	b.n	8000a06 <__aeabi_fdiv+0x12e>
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	1a1b      	subs	r3, r3, r0
 8000aa2:	2b1b      	cmp	r3, #27
 8000aa4:	dd00      	ble.n	8000aa8 <__aeabi_fdiv+0x1d0>
 8000aa6:	e76d      	b.n	8000984 <__aeabi_fdiv+0xac>
 8000aa8:	0021      	movs	r1, r4
 8000aaa:	379e      	adds	r7, #158	@ 0x9e
 8000aac:	40d9      	lsrs	r1, r3
 8000aae:	40bc      	lsls	r4, r7
 8000ab0:	000b      	movs	r3, r1
 8000ab2:	1e61      	subs	r1, r4, #1
 8000ab4:	418c      	sbcs	r4, r1
 8000ab6:	4323      	orrs	r3, r4
 8000ab8:	0759      	lsls	r1, r3, #29
 8000aba:	d004      	beq.n	8000ac6 <__aeabi_fdiv+0x1ee>
 8000abc:	210f      	movs	r1, #15
 8000abe:	4019      	ands	r1, r3
 8000ac0:	2904      	cmp	r1, #4
 8000ac2:	d000      	beq.n	8000ac6 <__aeabi_fdiv+0x1ee>
 8000ac4:	3304      	adds	r3, #4
 8000ac6:	0159      	lsls	r1, r3, #5
 8000ac8:	d413      	bmi.n	8000af2 <__aeabi_fdiv+0x21a>
 8000aca:	019b      	lsls	r3, r3, #6
 8000acc:	2000      	movs	r0, #0
 8000ace:	0a5c      	lsrs	r4, r3, #9
 8000ad0:	e75a      	b.n	8000988 <__aeabi_fdiv+0xb0>
 8000ad2:	231a      	movs	r3, #26
 8000ad4:	2401      	movs	r4, #1
 8000ad6:	1a2d      	subs	r5, r5, r0
 8000ad8:	e7d0      	b.n	8000a7c <__aeabi_fdiv+0x1a4>
 8000ada:	1e98      	subs	r0, r3, #2
 8000adc:	4243      	negs	r3, r0
 8000ade:	4158      	adcs	r0, r3
 8000ae0:	4240      	negs	r0, r0
 8000ae2:	0032      	movs	r2, r6
 8000ae4:	2400      	movs	r4, #0
 8000ae6:	b2c0      	uxtb	r0, r0
 8000ae8:	e74e      	b.n	8000988 <__aeabi_fdiv+0xb0>
 8000aea:	4642      	mov	r2, r8
 8000aec:	20ff      	movs	r0, #255	@ 0xff
 8000aee:	2400      	movs	r4, #0
 8000af0:	e74a      	b.n	8000988 <__aeabi_fdiv+0xb0>
 8000af2:	2001      	movs	r0, #1
 8000af4:	2400      	movs	r4, #0
 8000af6:	e747      	b.n	8000988 <__aeabi_fdiv+0xb0>
 8000af8:	08006844 	.word	0x08006844
 8000afc:	08006884 	.word	0x08006884
 8000b00:	f7ffffff 	.word	0xf7ffffff

08000b04 <__eqsf2>:
 8000b04:	b570      	push	{r4, r5, r6, lr}
 8000b06:	0042      	lsls	r2, r0, #1
 8000b08:	024e      	lsls	r6, r1, #9
 8000b0a:	004c      	lsls	r4, r1, #1
 8000b0c:	0245      	lsls	r5, r0, #9
 8000b0e:	0a6d      	lsrs	r5, r5, #9
 8000b10:	0e12      	lsrs	r2, r2, #24
 8000b12:	0fc3      	lsrs	r3, r0, #31
 8000b14:	0a76      	lsrs	r6, r6, #9
 8000b16:	0e24      	lsrs	r4, r4, #24
 8000b18:	0fc9      	lsrs	r1, r1, #31
 8000b1a:	2aff      	cmp	r2, #255	@ 0xff
 8000b1c:	d010      	beq.n	8000b40 <__eqsf2+0x3c>
 8000b1e:	2cff      	cmp	r4, #255	@ 0xff
 8000b20:	d00c      	beq.n	8000b3c <__eqsf2+0x38>
 8000b22:	2001      	movs	r0, #1
 8000b24:	42a2      	cmp	r2, r4
 8000b26:	d10a      	bne.n	8000b3e <__eqsf2+0x3a>
 8000b28:	42b5      	cmp	r5, r6
 8000b2a:	d108      	bne.n	8000b3e <__eqsf2+0x3a>
 8000b2c:	428b      	cmp	r3, r1
 8000b2e:	d00f      	beq.n	8000b50 <__eqsf2+0x4c>
 8000b30:	2a00      	cmp	r2, #0
 8000b32:	d104      	bne.n	8000b3e <__eqsf2+0x3a>
 8000b34:	0028      	movs	r0, r5
 8000b36:	1e43      	subs	r3, r0, #1
 8000b38:	4198      	sbcs	r0, r3
 8000b3a:	e000      	b.n	8000b3e <__eqsf2+0x3a>
 8000b3c:	2001      	movs	r0, #1
 8000b3e:	bd70      	pop	{r4, r5, r6, pc}
 8000b40:	2001      	movs	r0, #1
 8000b42:	2cff      	cmp	r4, #255	@ 0xff
 8000b44:	d1fb      	bne.n	8000b3e <__eqsf2+0x3a>
 8000b46:	4335      	orrs	r5, r6
 8000b48:	d1f9      	bne.n	8000b3e <__eqsf2+0x3a>
 8000b4a:	404b      	eors	r3, r1
 8000b4c:	0018      	movs	r0, r3
 8000b4e:	e7f6      	b.n	8000b3e <__eqsf2+0x3a>
 8000b50:	2000      	movs	r0, #0
 8000b52:	e7f4      	b.n	8000b3e <__eqsf2+0x3a>

08000b54 <__gesf2>:
 8000b54:	b530      	push	{r4, r5, lr}
 8000b56:	0042      	lsls	r2, r0, #1
 8000b58:	0244      	lsls	r4, r0, #9
 8000b5a:	024d      	lsls	r5, r1, #9
 8000b5c:	0fc3      	lsrs	r3, r0, #31
 8000b5e:	0048      	lsls	r0, r1, #1
 8000b60:	0a64      	lsrs	r4, r4, #9
 8000b62:	0e12      	lsrs	r2, r2, #24
 8000b64:	0a6d      	lsrs	r5, r5, #9
 8000b66:	0e00      	lsrs	r0, r0, #24
 8000b68:	0fc9      	lsrs	r1, r1, #31
 8000b6a:	2aff      	cmp	r2, #255	@ 0xff
 8000b6c:	d018      	beq.n	8000ba0 <__gesf2+0x4c>
 8000b6e:	28ff      	cmp	r0, #255	@ 0xff
 8000b70:	d00a      	beq.n	8000b88 <__gesf2+0x34>
 8000b72:	2a00      	cmp	r2, #0
 8000b74:	d11e      	bne.n	8000bb4 <__gesf2+0x60>
 8000b76:	2800      	cmp	r0, #0
 8000b78:	d10a      	bne.n	8000b90 <__gesf2+0x3c>
 8000b7a:	2d00      	cmp	r5, #0
 8000b7c:	d029      	beq.n	8000bd2 <__gesf2+0x7e>
 8000b7e:	2c00      	cmp	r4, #0
 8000b80:	d12d      	bne.n	8000bde <__gesf2+0x8a>
 8000b82:	0048      	lsls	r0, r1, #1
 8000b84:	3801      	subs	r0, #1
 8000b86:	bd30      	pop	{r4, r5, pc}
 8000b88:	2d00      	cmp	r5, #0
 8000b8a:	d125      	bne.n	8000bd8 <__gesf2+0x84>
 8000b8c:	2a00      	cmp	r2, #0
 8000b8e:	d101      	bne.n	8000b94 <__gesf2+0x40>
 8000b90:	2c00      	cmp	r4, #0
 8000b92:	d0f6      	beq.n	8000b82 <__gesf2+0x2e>
 8000b94:	428b      	cmp	r3, r1
 8000b96:	d019      	beq.n	8000bcc <__gesf2+0x78>
 8000b98:	2001      	movs	r0, #1
 8000b9a:	425b      	negs	r3, r3
 8000b9c:	4318      	orrs	r0, r3
 8000b9e:	e7f2      	b.n	8000b86 <__gesf2+0x32>
 8000ba0:	2c00      	cmp	r4, #0
 8000ba2:	d119      	bne.n	8000bd8 <__gesf2+0x84>
 8000ba4:	28ff      	cmp	r0, #255	@ 0xff
 8000ba6:	d1f7      	bne.n	8000b98 <__gesf2+0x44>
 8000ba8:	2d00      	cmp	r5, #0
 8000baa:	d115      	bne.n	8000bd8 <__gesf2+0x84>
 8000bac:	2000      	movs	r0, #0
 8000bae:	428b      	cmp	r3, r1
 8000bb0:	d1f2      	bne.n	8000b98 <__gesf2+0x44>
 8000bb2:	e7e8      	b.n	8000b86 <__gesf2+0x32>
 8000bb4:	2800      	cmp	r0, #0
 8000bb6:	d0ef      	beq.n	8000b98 <__gesf2+0x44>
 8000bb8:	428b      	cmp	r3, r1
 8000bba:	d1ed      	bne.n	8000b98 <__gesf2+0x44>
 8000bbc:	4282      	cmp	r2, r0
 8000bbe:	dceb      	bgt.n	8000b98 <__gesf2+0x44>
 8000bc0:	db04      	blt.n	8000bcc <__gesf2+0x78>
 8000bc2:	42ac      	cmp	r4, r5
 8000bc4:	d8e8      	bhi.n	8000b98 <__gesf2+0x44>
 8000bc6:	2000      	movs	r0, #0
 8000bc8:	42ac      	cmp	r4, r5
 8000bca:	d2dc      	bcs.n	8000b86 <__gesf2+0x32>
 8000bcc:	0058      	lsls	r0, r3, #1
 8000bce:	3801      	subs	r0, #1
 8000bd0:	e7d9      	b.n	8000b86 <__gesf2+0x32>
 8000bd2:	2c00      	cmp	r4, #0
 8000bd4:	d0d7      	beq.n	8000b86 <__gesf2+0x32>
 8000bd6:	e7df      	b.n	8000b98 <__gesf2+0x44>
 8000bd8:	2002      	movs	r0, #2
 8000bda:	4240      	negs	r0, r0
 8000bdc:	e7d3      	b.n	8000b86 <__gesf2+0x32>
 8000bde:	428b      	cmp	r3, r1
 8000be0:	d1da      	bne.n	8000b98 <__gesf2+0x44>
 8000be2:	e7ee      	b.n	8000bc2 <__gesf2+0x6e>

08000be4 <__lesf2>:
 8000be4:	b530      	push	{r4, r5, lr}
 8000be6:	0042      	lsls	r2, r0, #1
 8000be8:	0244      	lsls	r4, r0, #9
 8000bea:	024d      	lsls	r5, r1, #9
 8000bec:	0fc3      	lsrs	r3, r0, #31
 8000bee:	0048      	lsls	r0, r1, #1
 8000bf0:	0a64      	lsrs	r4, r4, #9
 8000bf2:	0e12      	lsrs	r2, r2, #24
 8000bf4:	0a6d      	lsrs	r5, r5, #9
 8000bf6:	0e00      	lsrs	r0, r0, #24
 8000bf8:	0fc9      	lsrs	r1, r1, #31
 8000bfa:	2aff      	cmp	r2, #255	@ 0xff
 8000bfc:	d017      	beq.n	8000c2e <__lesf2+0x4a>
 8000bfe:	28ff      	cmp	r0, #255	@ 0xff
 8000c00:	d00a      	beq.n	8000c18 <__lesf2+0x34>
 8000c02:	2a00      	cmp	r2, #0
 8000c04:	d11b      	bne.n	8000c3e <__lesf2+0x5a>
 8000c06:	2800      	cmp	r0, #0
 8000c08:	d10a      	bne.n	8000c20 <__lesf2+0x3c>
 8000c0a:	2d00      	cmp	r5, #0
 8000c0c:	d01d      	beq.n	8000c4a <__lesf2+0x66>
 8000c0e:	2c00      	cmp	r4, #0
 8000c10:	d12d      	bne.n	8000c6e <__lesf2+0x8a>
 8000c12:	0048      	lsls	r0, r1, #1
 8000c14:	3801      	subs	r0, #1
 8000c16:	e011      	b.n	8000c3c <__lesf2+0x58>
 8000c18:	2d00      	cmp	r5, #0
 8000c1a:	d10e      	bne.n	8000c3a <__lesf2+0x56>
 8000c1c:	2a00      	cmp	r2, #0
 8000c1e:	d101      	bne.n	8000c24 <__lesf2+0x40>
 8000c20:	2c00      	cmp	r4, #0
 8000c22:	d0f6      	beq.n	8000c12 <__lesf2+0x2e>
 8000c24:	428b      	cmp	r3, r1
 8000c26:	d10c      	bne.n	8000c42 <__lesf2+0x5e>
 8000c28:	0058      	lsls	r0, r3, #1
 8000c2a:	3801      	subs	r0, #1
 8000c2c:	e006      	b.n	8000c3c <__lesf2+0x58>
 8000c2e:	2c00      	cmp	r4, #0
 8000c30:	d103      	bne.n	8000c3a <__lesf2+0x56>
 8000c32:	28ff      	cmp	r0, #255	@ 0xff
 8000c34:	d105      	bne.n	8000c42 <__lesf2+0x5e>
 8000c36:	2d00      	cmp	r5, #0
 8000c38:	d015      	beq.n	8000c66 <__lesf2+0x82>
 8000c3a:	2002      	movs	r0, #2
 8000c3c:	bd30      	pop	{r4, r5, pc}
 8000c3e:	2800      	cmp	r0, #0
 8000c40:	d106      	bne.n	8000c50 <__lesf2+0x6c>
 8000c42:	2001      	movs	r0, #1
 8000c44:	425b      	negs	r3, r3
 8000c46:	4318      	orrs	r0, r3
 8000c48:	e7f8      	b.n	8000c3c <__lesf2+0x58>
 8000c4a:	2c00      	cmp	r4, #0
 8000c4c:	d0f6      	beq.n	8000c3c <__lesf2+0x58>
 8000c4e:	e7f8      	b.n	8000c42 <__lesf2+0x5e>
 8000c50:	428b      	cmp	r3, r1
 8000c52:	d1f6      	bne.n	8000c42 <__lesf2+0x5e>
 8000c54:	4282      	cmp	r2, r0
 8000c56:	dcf4      	bgt.n	8000c42 <__lesf2+0x5e>
 8000c58:	dbe6      	blt.n	8000c28 <__lesf2+0x44>
 8000c5a:	42ac      	cmp	r4, r5
 8000c5c:	d8f1      	bhi.n	8000c42 <__lesf2+0x5e>
 8000c5e:	2000      	movs	r0, #0
 8000c60:	42ac      	cmp	r4, r5
 8000c62:	d2eb      	bcs.n	8000c3c <__lesf2+0x58>
 8000c64:	e7e0      	b.n	8000c28 <__lesf2+0x44>
 8000c66:	2000      	movs	r0, #0
 8000c68:	428b      	cmp	r3, r1
 8000c6a:	d1ea      	bne.n	8000c42 <__lesf2+0x5e>
 8000c6c:	e7e6      	b.n	8000c3c <__lesf2+0x58>
 8000c6e:	428b      	cmp	r3, r1
 8000c70:	d1e7      	bne.n	8000c42 <__lesf2+0x5e>
 8000c72:	e7f2      	b.n	8000c5a <__lesf2+0x76>

08000c74 <__aeabi_fmul>:
 8000c74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c76:	464f      	mov	r7, r9
 8000c78:	4646      	mov	r6, r8
 8000c7a:	46d6      	mov	lr, sl
 8000c7c:	0044      	lsls	r4, r0, #1
 8000c7e:	b5c0      	push	{r6, r7, lr}
 8000c80:	0246      	lsls	r6, r0, #9
 8000c82:	1c0f      	adds	r7, r1, #0
 8000c84:	0a76      	lsrs	r6, r6, #9
 8000c86:	0e24      	lsrs	r4, r4, #24
 8000c88:	0fc5      	lsrs	r5, r0, #31
 8000c8a:	2c00      	cmp	r4, #0
 8000c8c:	d100      	bne.n	8000c90 <__aeabi_fmul+0x1c>
 8000c8e:	e0da      	b.n	8000e46 <__aeabi_fmul+0x1d2>
 8000c90:	2cff      	cmp	r4, #255	@ 0xff
 8000c92:	d074      	beq.n	8000d7e <__aeabi_fmul+0x10a>
 8000c94:	2380      	movs	r3, #128	@ 0x80
 8000c96:	00f6      	lsls	r6, r6, #3
 8000c98:	04db      	lsls	r3, r3, #19
 8000c9a:	431e      	orrs	r6, r3
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	4699      	mov	r9, r3
 8000ca0:	469a      	mov	sl, r3
 8000ca2:	3c7f      	subs	r4, #127	@ 0x7f
 8000ca4:	027b      	lsls	r3, r7, #9
 8000ca6:	0a5b      	lsrs	r3, r3, #9
 8000ca8:	4698      	mov	r8, r3
 8000caa:	007b      	lsls	r3, r7, #1
 8000cac:	0e1b      	lsrs	r3, r3, #24
 8000cae:	0fff      	lsrs	r7, r7, #31
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d074      	beq.n	8000d9e <__aeabi_fmul+0x12a>
 8000cb4:	2bff      	cmp	r3, #255	@ 0xff
 8000cb6:	d100      	bne.n	8000cba <__aeabi_fmul+0x46>
 8000cb8:	e08e      	b.n	8000dd8 <__aeabi_fmul+0x164>
 8000cba:	4642      	mov	r2, r8
 8000cbc:	2180      	movs	r1, #128	@ 0x80
 8000cbe:	00d2      	lsls	r2, r2, #3
 8000cc0:	04c9      	lsls	r1, r1, #19
 8000cc2:	4311      	orrs	r1, r2
 8000cc4:	3b7f      	subs	r3, #127	@ 0x7f
 8000cc6:	002a      	movs	r2, r5
 8000cc8:	18e4      	adds	r4, r4, r3
 8000cca:	464b      	mov	r3, r9
 8000ccc:	407a      	eors	r2, r7
 8000cce:	4688      	mov	r8, r1
 8000cd0:	b2d2      	uxtb	r2, r2
 8000cd2:	2b0a      	cmp	r3, #10
 8000cd4:	dc75      	bgt.n	8000dc2 <__aeabi_fmul+0x14e>
 8000cd6:	464b      	mov	r3, r9
 8000cd8:	2000      	movs	r0, #0
 8000cda:	2b02      	cmp	r3, #2
 8000cdc:	dd0f      	ble.n	8000cfe <__aeabi_fmul+0x8a>
 8000cde:	4649      	mov	r1, r9
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	408b      	lsls	r3, r1
 8000ce4:	21a6      	movs	r1, #166	@ 0xa6
 8000ce6:	00c9      	lsls	r1, r1, #3
 8000ce8:	420b      	tst	r3, r1
 8000cea:	d169      	bne.n	8000dc0 <__aeabi_fmul+0x14c>
 8000cec:	2190      	movs	r1, #144	@ 0x90
 8000cee:	0089      	lsls	r1, r1, #2
 8000cf0:	420b      	tst	r3, r1
 8000cf2:	d000      	beq.n	8000cf6 <__aeabi_fmul+0x82>
 8000cf4:	e100      	b.n	8000ef8 <__aeabi_fmul+0x284>
 8000cf6:	2188      	movs	r1, #136	@ 0x88
 8000cf8:	4219      	tst	r1, r3
 8000cfa:	d000      	beq.n	8000cfe <__aeabi_fmul+0x8a>
 8000cfc:	e0f5      	b.n	8000eea <__aeabi_fmul+0x276>
 8000cfe:	4641      	mov	r1, r8
 8000d00:	0409      	lsls	r1, r1, #16
 8000d02:	0c09      	lsrs	r1, r1, #16
 8000d04:	4643      	mov	r3, r8
 8000d06:	0008      	movs	r0, r1
 8000d08:	0c35      	lsrs	r5, r6, #16
 8000d0a:	0436      	lsls	r6, r6, #16
 8000d0c:	0c1b      	lsrs	r3, r3, #16
 8000d0e:	0c36      	lsrs	r6, r6, #16
 8000d10:	4370      	muls	r0, r6
 8000d12:	4369      	muls	r1, r5
 8000d14:	435e      	muls	r6, r3
 8000d16:	435d      	muls	r5, r3
 8000d18:	1876      	adds	r6, r6, r1
 8000d1a:	0c03      	lsrs	r3, r0, #16
 8000d1c:	199b      	adds	r3, r3, r6
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	d903      	bls.n	8000d2a <__aeabi_fmul+0xb6>
 8000d22:	2180      	movs	r1, #128	@ 0x80
 8000d24:	0249      	lsls	r1, r1, #9
 8000d26:	468c      	mov	ip, r1
 8000d28:	4465      	add	r5, ip
 8000d2a:	0400      	lsls	r0, r0, #16
 8000d2c:	0419      	lsls	r1, r3, #16
 8000d2e:	0c00      	lsrs	r0, r0, #16
 8000d30:	1809      	adds	r1, r1, r0
 8000d32:	018e      	lsls	r6, r1, #6
 8000d34:	1e70      	subs	r0, r6, #1
 8000d36:	4186      	sbcs	r6, r0
 8000d38:	0c1b      	lsrs	r3, r3, #16
 8000d3a:	0e89      	lsrs	r1, r1, #26
 8000d3c:	195b      	adds	r3, r3, r5
 8000d3e:	430e      	orrs	r6, r1
 8000d40:	019b      	lsls	r3, r3, #6
 8000d42:	431e      	orrs	r6, r3
 8000d44:	011b      	lsls	r3, r3, #4
 8000d46:	d46c      	bmi.n	8000e22 <__aeabi_fmul+0x1ae>
 8000d48:	0023      	movs	r3, r4
 8000d4a:	337f      	adds	r3, #127	@ 0x7f
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	dc00      	bgt.n	8000d52 <__aeabi_fmul+0xde>
 8000d50:	e0b1      	b.n	8000eb6 <__aeabi_fmul+0x242>
 8000d52:	0015      	movs	r5, r2
 8000d54:	0771      	lsls	r1, r6, #29
 8000d56:	d00b      	beq.n	8000d70 <__aeabi_fmul+0xfc>
 8000d58:	200f      	movs	r0, #15
 8000d5a:	0021      	movs	r1, r4
 8000d5c:	4030      	ands	r0, r6
 8000d5e:	2804      	cmp	r0, #4
 8000d60:	d006      	beq.n	8000d70 <__aeabi_fmul+0xfc>
 8000d62:	3604      	adds	r6, #4
 8000d64:	0132      	lsls	r2, r6, #4
 8000d66:	d503      	bpl.n	8000d70 <__aeabi_fmul+0xfc>
 8000d68:	4b6e      	ldr	r3, [pc, #440]	@ (8000f24 <__aeabi_fmul+0x2b0>)
 8000d6a:	401e      	ands	r6, r3
 8000d6c:	000b      	movs	r3, r1
 8000d6e:	3380      	adds	r3, #128	@ 0x80
 8000d70:	2bfe      	cmp	r3, #254	@ 0xfe
 8000d72:	dd00      	ble.n	8000d76 <__aeabi_fmul+0x102>
 8000d74:	e0bd      	b.n	8000ef2 <__aeabi_fmul+0x27e>
 8000d76:	01b2      	lsls	r2, r6, #6
 8000d78:	0a52      	lsrs	r2, r2, #9
 8000d7a:	b2db      	uxtb	r3, r3
 8000d7c:	e048      	b.n	8000e10 <__aeabi_fmul+0x19c>
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d000      	beq.n	8000d84 <__aeabi_fmul+0x110>
 8000d82:	e092      	b.n	8000eaa <__aeabi_fmul+0x236>
 8000d84:	2308      	movs	r3, #8
 8000d86:	4699      	mov	r9, r3
 8000d88:	3b06      	subs	r3, #6
 8000d8a:	469a      	mov	sl, r3
 8000d8c:	027b      	lsls	r3, r7, #9
 8000d8e:	0a5b      	lsrs	r3, r3, #9
 8000d90:	4698      	mov	r8, r3
 8000d92:	007b      	lsls	r3, r7, #1
 8000d94:	24ff      	movs	r4, #255	@ 0xff
 8000d96:	0e1b      	lsrs	r3, r3, #24
 8000d98:	0fff      	lsrs	r7, r7, #31
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d18a      	bne.n	8000cb4 <__aeabi_fmul+0x40>
 8000d9e:	4642      	mov	r2, r8
 8000da0:	2a00      	cmp	r2, #0
 8000da2:	d164      	bne.n	8000e6e <__aeabi_fmul+0x1fa>
 8000da4:	4649      	mov	r1, r9
 8000da6:	3201      	adds	r2, #1
 8000da8:	4311      	orrs	r1, r2
 8000daa:	4689      	mov	r9, r1
 8000dac:	290a      	cmp	r1, #10
 8000dae:	dc08      	bgt.n	8000dc2 <__aeabi_fmul+0x14e>
 8000db0:	407d      	eors	r5, r7
 8000db2:	2001      	movs	r0, #1
 8000db4:	b2ea      	uxtb	r2, r5
 8000db6:	2902      	cmp	r1, #2
 8000db8:	dc91      	bgt.n	8000cde <__aeabi_fmul+0x6a>
 8000dba:	0015      	movs	r5, r2
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	e027      	b.n	8000e10 <__aeabi_fmul+0x19c>
 8000dc0:	0015      	movs	r5, r2
 8000dc2:	4653      	mov	r3, sl
 8000dc4:	2b02      	cmp	r3, #2
 8000dc6:	d100      	bne.n	8000dca <__aeabi_fmul+0x156>
 8000dc8:	e093      	b.n	8000ef2 <__aeabi_fmul+0x27e>
 8000dca:	2b03      	cmp	r3, #3
 8000dcc:	d01a      	beq.n	8000e04 <__aeabi_fmul+0x190>
 8000dce:	2b01      	cmp	r3, #1
 8000dd0:	d12c      	bne.n	8000e2c <__aeabi_fmul+0x1b8>
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	e01b      	b.n	8000e10 <__aeabi_fmul+0x19c>
 8000dd8:	4643      	mov	r3, r8
 8000dda:	34ff      	adds	r4, #255	@ 0xff
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d055      	beq.n	8000e8c <__aeabi_fmul+0x218>
 8000de0:	2103      	movs	r1, #3
 8000de2:	464b      	mov	r3, r9
 8000de4:	430b      	orrs	r3, r1
 8000de6:	0019      	movs	r1, r3
 8000de8:	2b0a      	cmp	r3, #10
 8000dea:	dc00      	bgt.n	8000dee <__aeabi_fmul+0x17a>
 8000dec:	e092      	b.n	8000f14 <__aeabi_fmul+0x2a0>
 8000dee:	2b0f      	cmp	r3, #15
 8000df0:	d000      	beq.n	8000df4 <__aeabi_fmul+0x180>
 8000df2:	e08c      	b.n	8000f0e <__aeabi_fmul+0x29a>
 8000df4:	2280      	movs	r2, #128	@ 0x80
 8000df6:	03d2      	lsls	r2, r2, #15
 8000df8:	4216      	tst	r6, r2
 8000dfa:	d003      	beq.n	8000e04 <__aeabi_fmul+0x190>
 8000dfc:	4643      	mov	r3, r8
 8000dfe:	4213      	tst	r3, r2
 8000e00:	d100      	bne.n	8000e04 <__aeabi_fmul+0x190>
 8000e02:	e07d      	b.n	8000f00 <__aeabi_fmul+0x28c>
 8000e04:	2280      	movs	r2, #128	@ 0x80
 8000e06:	03d2      	lsls	r2, r2, #15
 8000e08:	4332      	orrs	r2, r6
 8000e0a:	0252      	lsls	r2, r2, #9
 8000e0c:	0a52      	lsrs	r2, r2, #9
 8000e0e:	23ff      	movs	r3, #255	@ 0xff
 8000e10:	05d8      	lsls	r0, r3, #23
 8000e12:	07ed      	lsls	r5, r5, #31
 8000e14:	4310      	orrs	r0, r2
 8000e16:	4328      	orrs	r0, r5
 8000e18:	bce0      	pop	{r5, r6, r7}
 8000e1a:	46ba      	mov	sl, r7
 8000e1c:	46b1      	mov	r9, r6
 8000e1e:	46a8      	mov	r8, r5
 8000e20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e22:	2301      	movs	r3, #1
 8000e24:	0015      	movs	r5, r2
 8000e26:	0871      	lsrs	r1, r6, #1
 8000e28:	401e      	ands	r6, r3
 8000e2a:	430e      	orrs	r6, r1
 8000e2c:	0023      	movs	r3, r4
 8000e2e:	3380      	adds	r3, #128	@ 0x80
 8000e30:	1c61      	adds	r1, r4, #1
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	dd41      	ble.n	8000eba <__aeabi_fmul+0x246>
 8000e36:	0772      	lsls	r2, r6, #29
 8000e38:	d094      	beq.n	8000d64 <__aeabi_fmul+0xf0>
 8000e3a:	220f      	movs	r2, #15
 8000e3c:	4032      	ands	r2, r6
 8000e3e:	2a04      	cmp	r2, #4
 8000e40:	d000      	beq.n	8000e44 <__aeabi_fmul+0x1d0>
 8000e42:	e78e      	b.n	8000d62 <__aeabi_fmul+0xee>
 8000e44:	e78e      	b.n	8000d64 <__aeabi_fmul+0xf0>
 8000e46:	2e00      	cmp	r6, #0
 8000e48:	d105      	bne.n	8000e56 <__aeabi_fmul+0x1e2>
 8000e4a:	2304      	movs	r3, #4
 8000e4c:	4699      	mov	r9, r3
 8000e4e:	3b03      	subs	r3, #3
 8000e50:	2400      	movs	r4, #0
 8000e52:	469a      	mov	sl, r3
 8000e54:	e726      	b.n	8000ca4 <__aeabi_fmul+0x30>
 8000e56:	0030      	movs	r0, r6
 8000e58:	f001 f80c 	bl	8001e74 <__clzsi2>
 8000e5c:	2476      	movs	r4, #118	@ 0x76
 8000e5e:	1f43      	subs	r3, r0, #5
 8000e60:	409e      	lsls	r6, r3
 8000e62:	2300      	movs	r3, #0
 8000e64:	4264      	negs	r4, r4
 8000e66:	4699      	mov	r9, r3
 8000e68:	469a      	mov	sl, r3
 8000e6a:	1a24      	subs	r4, r4, r0
 8000e6c:	e71a      	b.n	8000ca4 <__aeabi_fmul+0x30>
 8000e6e:	4640      	mov	r0, r8
 8000e70:	f001 f800 	bl	8001e74 <__clzsi2>
 8000e74:	464b      	mov	r3, r9
 8000e76:	1a24      	subs	r4, r4, r0
 8000e78:	3c76      	subs	r4, #118	@ 0x76
 8000e7a:	2b0a      	cmp	r3, #10
 8000e7c:	dca1      	bgt.n	8000dc2 <__aeabi_fmul+0x14e>
 8000e7e:	4643      	mov	r3, r8
 8000e80:	3805      	subs	r0, #5
 8000e82:	4083      	lsls	r3, r0
 8000e84:	407d      	eors	r5, r7
 8000e86:	4698      	mov	r8, r3
 8000e88:	b2ea      	uxtb	r2, r5
 8000e8a:	e724      	b.n	8000cd6 <__aeabi_fmul+0x62>
 8000e8c:	464a      	mov	r2, r9
 8000e8e:	3302      	adds	r3, #2
 8000e90:	4313      	orrs	r3, r2
 8000e92:	002a      	movs	r2, r5
 8000e94:	407a      	eors	r2, r7
 8000e96:	b2d2      	uxtb	r2, r2
 8000e98:	2b0a      	cmp	r3, #10
 8000e9a:	dc92      	bgt.n	8000dc2 <__aeabi_fmul+0x14e>
 8000e9c:	4649      	mov	r1, r9
 8000e9e:	0015      	movs	r5, r2
 8000ea0:	2900      	cmp	r1, #0
 8000ea2:	d026      	beq.n	8000ef2 <__aeabi_fmul+0x27e>
 8000ea4:	4699      	mov	r9, r3
 8000ea6:	2002      	movs	r0, #2
 8000ea8:	e719      	b.n	8000cde <__aeabi_fmul+0x6a>
 8000eaa:	230c      	movs	r3, #12
 8000eac:	4699      	mov	r9, r3
 8000eae:	3b09      	subs	r3, #9
 8000eb0:	24ff      	movs	r4, #255	@ 0xff
 8000eb2:	469a      	mov	sl, r3
 8000eb4:	e6f6      	b.n	8000ca4 <__aeabi_fmul+0x30>
 8000eb6:	0015      	movs	r5, r2
 8000eb8:	0021      	movs	r1, r4
 8000eba:	2201      	movs	r2, #1
 8000ebc:	1ad3      	subs	r3, r2, r3
 8000ebe:	2b1b      	cmp	r3, #27
 8000ec0:	dd00      	ble.n	8000ec4 <__aeabi_fmul+0x250>
 8000ec2:	e786      	b.n	8000dd2 <__aeabi_fmul+0x15e>
 8000ec4:	319e      	adds	r1, #158	@ 0x9e
 8000ec6:	0032      	movs	r2, r6
 8000ec8:	408e      	lsls	r6, r1
 8000eca:	40da      	lsrs	r2, r3
 8000ecc:	1e73      	subs	r3, r6, #1
 8000ece:	419e      	sbcs	r6, r3
 8000ed0:	4332      	orrs	r2, r6
 8000ed2:	0753      	lsls	r3, r2, #29
 8000ed4:	d004      	beq.n	8000ee0 <__aeabi_fmul+0x26c>
 8000ed6:	230f      	movs	r3, #15
 8000ed8:	4013      	ands	r3, r2
 8000eda:	2b04      	cmp	r3, #4
 8000edc:	d000      	beq.n	8000ee0 <__aeabi_fmul+0x26c>
 8000ede:	3204      	adds	r2, #4
 8000ee0:	0153      	lsls	r3, r2, #5
 8000ee2:	d510      	bpl.n	8000f06 <__aeabi_fmul+0x292>
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	e792      	b.n	8000e10 <__aeabi_fmul+0x19c>
 8000eea:	003d      	movs	r5, r7
 8000eec:	4646      	mov	r6, r8
 8000eee:	4682      	mov	sl, r0
 8000ef0:	e767      	b.n	8000dc2 <__aeabi_fmul+0x14e>
 8000ef2:	23ff      	movs	r3, #255	@ 0xff
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	e78b      	b.n	8000e10 <__aeabi_fmul+0x19c>
 8000ef8:	2280      	movs	r2, #128	@ 0x80
 8000efa:	2500      	movs	r5, #0
 8000efc:	03d2      	lsls	r2, r2, #15
 8000efe:	e786      	b.n	8000e0e <__aeabi_fmul+0x19a>
 8000f00:	003d      	movs	r5, r7
 8000f02:	431a      	orrs	r2, r3
 8000f04:	e783      	b.n	8000e0e <__aeabi_fmul+0x19a>
 8000f06:	0192      	lsls	r2, r2, #6
 8000f08:	2300      	movs	r3, #0
 8000f0a:	0a52      	lsrs	r2, r2, #9
 8000f0c:	e780      	b.n	8000e10 <__aeabi_fmul+0x19c>
 8000f0e:	003d      	movs	r5, r7
 8000f10:	4646      	mov	r6, r8
 8000f12:	e777      	b.n	8000e04 <__aeabi_fmul+0x190>
 8000f14:	002a      	movs	r2, r5
 8000f16:	2301      	movs	r3, #1
 8000f18:	407a      	eors	r2, r7
 8000f1a:	408b      	lsls	r3, r1
 8000f1c:	2003      	movs	r0, #3
 8000f1e:	b2d2      	uxtb	r2, r2
 8000f20:	e6e9      	b.n	8000cf6 <__aeabi_fmul+0x82>
 8000f22:	46c0      	nop			@ (mov r8, r8)
 8000f24:	f7ffffff 	.word	0xf7ffffff

08000f28 <__aeabi_fsub>:
 8000f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f2a:	4647      	mov	r7, r8
 8000f2c:	46ce      	mov	lr, r9
 8000f2e:	0243      	lsls	r3, r0, #9
 8000f30:	b580      	push	{r7, lr}
 8000f32:	0a5f      	lsrs	r7, r3, #9
 8000f34:	099b      	lsrs	r3, r3, #6
 8000f36:	0045      	lsls	r5, r0, #1
 8000f38:	004a      	lsls	r2, r1, #1
 8000f3a:	469c      	mov	ip, r3
 8000f3c:	024b      	lsls	r3, r1, #9
 8000f3e:	0fc4      	lsrs	r4, r0, #31
 8000f40:	0fce      	lsrs	r6, r1, #31
 8000f42:	0e2d      	lsrs	r5, r5, #24
 8000f44:	0a58      	lsrs	r0, r3, #9
 8000f46:	0e12      	lsrs	r2, r2, #24
 8000f48:	0999      	lsrs	r1, r3, #6
 8000f4a:	2aff      	cmp	r2, #255	@ 0xff
 8000f4c:	d06b      	beq.n	8001026 <__aeabi_fsub+0xfe>
 8000f4e:	2301      	movs	r3, #1
 8000f50:	405e      	eors	r6, r3
 8000f52:	1aab      	subs	r3, r5, r2
 8000f54:	42b4      	cmp	r4, r6
 8000f56:	d04b      	beq.n	8000ff0 <__aeabi_fsub+0xc8>
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	dc00      	bgt.n	8000f5e <__aeabi_fsub+0x36>
 8000f5c:	e0ff      	b.n	800115e <__aeabi_fsub+0x236>
 8000f5e:	2a00      	cmp	r2, #0
 8000f60:	d100      	bne.n	8000f64 <__aeabi_fsub+0x3c>
 8000f62:	e088      	b.n	8001076 <__aeabi_fsub+0x14e>
 8000f64:	2dff      	cmp	r5, #255	@ 0xff
 8000f66:	d100      	bne.n	8000f6a <__aeabi_fsub+0x42>
 8000f68:	e0ef      	b.n	800114a <__aeabi_fsub+0x222>
 8000f6a:	2280      	movs	r2, #128	@ 0x80
 8000f6c:	04d2      	lsls	r2, r2, #19
 8000f6e:	4311      	orrs	r1, r2
 8000f70:	2001      	movs	r0, #1
 8000f72:	2b1b      	cmp	r3, #27
 8000f74:	dc08      	bgt.n	8000f88 <__aeabi_fsub+0x60>
 8000f76:	0008      	movs	r0, r1
 8000f78:	2220      	movs	r2, #32
 8000f7a:	40d8      	lsrs	r0, r3
 8000f7c:	1ad3      	subs	r3, r2, r3
 8000f7e:	4099      	lsls	r1, r3
 8000f80:	000b      	movs	r3, r1
 8000f82:	1e5a      	subs	r2, r3, #1
 8000f84:	4193      	sbcs	r3, r2
 8000f86:	4318      	orrs	r0, r3
 8000f88:	4663      	mov	r3, ip
 8000f8a:	1a1b      	subs	r3, r3, r0
 8000f8c:	469c      	mov	ip, r3
 8000f8e:	4663      	mov	r3, ip
 8000f90:	015b      	lsls	r3, r3, #5
 8000f92:	d400      	bmi.n	8000f96 <__aeabi_fsub+0x6e>
 8000f94:	e0cd      	b.n	8001132 <__aeabi_fsub+0x20a>
 8000f96:	4663      	mov	r3, ip
 8000f98:	019f      	lsls	r7, r3, #6
 8000f9a:	09bf      	lsrs	r7, r7, #6
 8000f9c:	0038      	movs	r0, r7
 8000f9e:	f000 ff69 	bl	8001e74 <__clzsi2>
 8000fa2:	003b      	movs	r3, r7
 8000fa4:	3805      	subs	r0, #5
 8000fa6:	4083      	lsls	r3, r0
 8000fa8:	4285      	cmp	r5, r0
 8000faa:	dc00      	bgt.n	8000fae <__aeabi_fsub+0x86>
 8000fac:	e0a2      	b.n	80010f4 <__aeabi_fsub+0x1cc>
 8000fae:	4ab7      	ldr	r2, [pc, #732]	@ (800128c <__aeabi_fsub+0x364>)
 8000fb0:	1a2d      	subs	r5, r5, r0
 8000fb2:	401a      	ands	r2, r3
 8000fb4:	4694      	mov	ip, r2
 8000fb6:	075a      	lsls	r2, r3, #29
 8000fb8:	d100      	bne.n	8000fbc <__aeabi_fsub+0x94>
 8000fba:	e0c3      	b.n	8001144 <__aeabi_fsub+0x21c>
 8000fbc:	220f      	movs	r2, #15
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	2b04      	cmp	r3, #4
 8000fc2:	d100      	bne.n	8000fc6 <__aeabi_fsub+0x9e>
 8000fc4:	e0be      	b.n	8001144 <__aeabi_fsub+0x21c>
 8000fc6:	2304      	movs	r3, #4
 8000fc8:	4698      	mov	r8, r3
 8000fca:	44c4      	add	ip, r8
 8000fcc:	4663      	mov	r3, ip
 8000fce:	015b      	lsls	r3, r3, #5
 8000fd0:	d400      	bmi.n	8000fd4 <__aeabi_fsub+0xac>
 8000fd2:	e0b7      	b.n	8001144 <__aeabi_fsub+0x21c>
 8000fd4:	1c68      	adds	r0, r5, #1
 8000fd6:	2dfe      	cmp	r5, #254	@ 0xfe
 8000fd8:	d000      	beq.n	8000fdc <__aeabi_fsub+0xb4>
 8000fda:	e0a5      	b.n	8001128 <__aeabi_fsub+0x200>
 8000fdc:	20ff      	movs	r0, #255	@ 0xff
 8000fde:	2200      	movs	r2, #0
 8000fe0:	05c0      	lsls	r0, r0, #23
 8000fe2:	4310      	orrs	r0, r2
 8000fe4:	07e4      	lsls	r4, r4, #31
 8000fe6:	4320      	orrs	r0, r4
 8000fe8:	bcc0      	pop	{r6, r7}
 8000fea:	46b9      	mov	r9, r7
 8000fec:	46b0      	mov	r8, r6
 8000fee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	dc00      	bgt.n	8000ff6 <__aeabi_fsub+0xce>
 8000ff4:	e1eb      	b.n	80013ce <__aeabi_fsub+0x4a6>
 8000ff6:	2a00      	cmp	r2, #0
 8000ff8:	d046      	beq.n	8001088 <__aeabi_fsub+0x160>
 8000ffa:	2dff      	cmp	r5, #255	@ 0xff
 8000ffc:	d100      	bne.n	8001000 <__aeabi_fsub+0xd8>
 8000ffe:	e0a4      	b.n	800114a <__aeabi_fsub+0x222>
 8001000:	2280      	movs	r2, #128	@ 0x80
 8001002:	04d2      	lsls	r2, r2, #19
 8001004:	4311      	orrs	r1, r2
 8001006:	2b1b      	cmp	r3, #27
 8001008:	dc00      	bgt.n	800100c <__aeabi_fsub+0xe4>
 800100a:	e0fb      	b.n	8001204 <__aeabi_fsub+0x2dc>
 800100c:	2305      	movs	r3, #5
 800100e:	4698      	mov	r8, r3
 8001010:	002b      	movs	r3, r5
 8001012:	44c4      	add	ip, r8
 8001014:	4662      	mov	r2, ip
 8001016:	08d7      	lsrs	r7, r2, #3
 8001018:	2bff      	cmp	r3, #255	@ 0xff
 800101a:	d100      	bne.n	800101e <__aeabi_fsub+0xf6>
 800101c:	e095      	b.n	800114a <__aeabi_fsub+0x222>
 800101e:	027a      	lsls	r2, r7, #9
 8001020:	0a52      	lsrs	r2, r2, #9
 8001022:	b2d8      	uxtb	r0, r3
 8001024:	e7dc      	b.n	8000fe0 <__aeabi_fsub+0xb8>
 8001026:	002b      	movs	r3, r5
 8001028:	3bff      	subs	r3, #255	@ 0xff
 800102a:	4699      	mov	r9, r3
 800102c:	2900      	cmp	r1, #0
 800102e:	d118      	bne.n	8001062 <__aeabi_fsub+0x13a>
 8001030:	2301      	movs	r3, #1
 8001032:	405e      	eors	r6, r3
 8001034:	42b4      	cmp	r4, r6
 8001036:	d100      	bne.n	800103a <__aeabi_fsub+0x112>
 8001038:	e0ca      	b.n	80011d0 <__aeabi_fsub+0x2a8>
 800103a:	464b      	mov	r3, r9
 800103c:	2b00      	cmp	r3, #0
 800103e:	d02d      	beq.n	800109c <__aeabi_fsub+0x174>
 8001040:	2d00      	cmp	r5, #0
 8001042:	d000      	beq.n	8001046 <__aeabi_fsub+0x11e>
 8001044:	e13c      	b.n	80012c0 <__aeabi_fsub+0x398>
 8001046:	23ff      	movs	r3, #255	@ 0xff
 8001048:	4664      	mov	r4, ip
 800104a:	2c00      	cmp	r4, #0
 800104c:	d100      	bne.n	8001050 <__aeabi_fsub+0x128>
 800104e:	e15f      	b.n	8001310 <__aeabi_fsub+0x3e8>
 8001050:	1e5d      	subs	r5, r3, #1
 8001052:	2b01      	cmp	r3, #1
 8001054:	d100      	bne.n	8001058 <__aeabi_fsub+0x130>
 8001056:	e174      	b.n	8001342 <__aeabi_fsub+0x41a>
 8001058:	0034      	movs	r4, r6
 800105a:	2bff      	cmp	r3, #255	@ 0xff
 800105c:	d074      	beq.n	8001148 <__aeabi_fsub+0x220>
 800105e:	002b      	movs	r3, r5
 8001060:	e103      	b.n	800126a <__aeabi_fsub+0x342>
 8001062:	42b4      	cmp	r4, r6
 8001064:	d100      	bne.n	8001068 <__aeabi_fsub+0x140>
 8001066:	e09c      	b.n	80011a2 <__aeabi_fsub+0x27a>
 8001068:	2b00      	cmp	r3, #0
 800106a:	d017      	beq.n	800109c <__aeabi_fsub+0x174>
 800106c:	2d00      	cmp	r5, #0
 800106e:	d0ea      	beq.n	8001046 <__aeabi_fsub+0x11e>
 8001070:	0007      	movs	r7, r0
 8001072:	0034      	movs	r4, r6
 8001074:	e06c      	b.n	8001150 <__aeabi_fsub+0x228>
 8001076:	2900      	cmp	r1, #0
 8001078:	d0cc      	beq.n	8001014 <__aeabi_fsub+0xec>
 800107a:	1e5a      	subs	r2, r3, #1
 800107c:	2b01      	cmp	r3, #1
 800107e:	d02b      	beq.n	80010d8 <__aeabi_fsub+0x1b0>
 8001080:	2bff      	cmp	r3, #255	@ 0xff
 8001082:	d062      	beq.n	800114a <__aeabi_fsub+0x222>
 8001084:	0013      	movs	r3, r2
 8001086:	e773      	b.n	8000f70 <__aeabi_fsub+0x48>
 8001088:	2900      	cmp	r1, #0
 800108a:	d0c3      	beq.n	8001014 <__aeabi_fsub+0xec>
 800108c:	1e5a      	subs	r2, r3, #1
 800108e:	2b01      	cmp	r3, #1
 8001090:	d100      	bne.n	8001094 <__aeabi_fsub+0x16c>
 8001092:	e11e      	b.n	80012d2 <__aeabi_fsub+0x3aa>
 8001094:	2bff      	cmp	r3, #255	@ 0xff
 8001096:	d058      	beq.n	800114a <__aeabi_fsub+0x222>
 8001098:	0013      	movs	r3, r2
 800109a:	e7b4      	b.n	8001006 <__aeabi_fsub+0xde>
 800109c:	22fe      	movs	r2, #254	@ 0xfe
 800109e:	1c6b      	adds	r3, r5, #1
 80010a0:	421a      	tst	r2, r3
 80010a2:	d10d      	bne.n	80010c0 <__aeabi_fsub+0x198>
 80010a4:	2d00      	cmp	r5, #0
 80010a6:	d060      	beq.n	800116a <__aeabi_fsub+0x242>
 80010a8:	4663      	mov	r3, ip
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d000      	beq.n	80010b0 <__aeabi_fsub+0x188>
 80010ae:	e120      	b.n	80012f2 <__aeabi_fsub+0x3ca>
 80010b0:	2900      	cmp	r1, #0
 80010b2:	d000      	beq.n	80010b6 <__aeabi_fsub+0x18e>
 80010b4:	e128      	b.n	8001308 <__aeabi_fsub+0x3e0>
 80010b6:	2280      	movs	r2, #128	@ 0x80
 80010b8:	2400      	movs	r4, #0
 80010ba:	20ff      	movs	r0, #255	@ 0xff
 80010bc:	03d2      	lsls	r2, r2, #15
 80010be:	e78f      	b.n	8000fe0 <__aeabi_fsub+0xb8>
 80010c0:	4663      	mov	r3, ip
 80010c2:	1a5f      	subs	r7, r3, r1
 80010c4:	017b      	lsls	r3, r7, #5
 80010c6:	d500      	bpl.n	80010ca <__aeabi_fsub+0x1a2>
 80010c8:	e0fe      	b.n	80012c8 <__aeabi_fsub+0x3a0>
 80010ca:	2f00      	cmp	r7, #0
 80010cc:	d000      	beq.n	80010d0 <__aeabi_fsub+0x1a8>
 80010ce:	e765      	b.n	8000f9c <__aeabi_fsub+0x74>
 80010d0:	2400      	movs	r4, #0
 80010d2:	2000      	movs	r0, #0
 80010d4:	2200      	movs	r2, #0
 80010d6:	e783      	b.n	8000fe0 <__aeabi_fsub+0xb8>
 80010d8:	4663      	mov	r3, ip
 80010da:	1a59      	subs	r1, r3, r1
 80010dc:	014b      	lsls	r3, r1, #5
 80010de:	d400      	bmi.n	80010e2 <__aeabi_fsub+0x1ba>
 80010e0:	e119      	b.n	8001316 <__aeabi_fsub+0x3ee>
 80010e2:	018f      	lsls	r7, r1, #6
 80010e4:	09bf      	lsrs	r7, r7, #6
 80010e6:	0038      	movs	r0, r7
 80010e8:	f000 fec4 	bl	8001e74 <__clzsi2>
 80010ec:	003b      	movs	r3, r7
 80010ee:	3805      	subs	r0, #5
 80010f0:	4083      	lsls	r3, r0
 80010f2:	2501      	movs	r5, #1
 80010f4:	2220      	movs	r2, #32
 80010f6:	1b40      	subs	r0, r0, r5
 80010f8:	3001      	adds	r0, #1
 80010fa:	1a12      	subs	r2, r2, r0
 80010fc:	0019      	movs	r1, r3
 80010fe:	4093      	lsls	r3, r2
 8001100:	40c1      	lsrs	r1, r0
 8001102:	1e5a      	subs	r2, r3, #1
 8001104:	4193      	sbcs	r3, r2
 8001106:	4319      	orrs	r1, r3
 8001108:	468c      	mov	ip, r1
 800110a:	1e0b      	subs	r3, r1, #0
 800110c:	d0e1      	beq.n	80010d2 <__aeabi_fsub+0x1aa>
 800110e:	075b      	lsls	r3, r3, #29
 8001110:	d100      	bne.n	8001114 <__aeabi_fsub+0x1ec>
 8001112:	e152      	b.n	80013ba <__aeabi_fsub+0x492>
 8001114:	230f      	movs	r3, #15
 8001116:	2500      	movs	r5, #0
 8001118:	400b      	ands	r3, r1
 800111a:	2b04      	cmp	r3, #4
 800111c:	d000      	beq.n	8001120 <__aeabi_fsub+0x1f8>
 800111e:	e752      	b.n	8000fc6 <__aeabi_fsub+0x9e>
 8001120:	2001      	movs	r0, #1
 8001122:	014a      	lsls	r2, r1, #5
 8001124:	d400      	bmi.n	8001128 <__aeabi_fsub+0x200>
 8001126:	e092      	b.n	800124e <__aeabi_fsub+0x326>
 8001128:	b2c0      	uxtb	r0, r0
 800112a:	4663      	mov	r3, ip
 800112c:	019a      	lsls	r2, r3, #6
 800112e:	0a52      	lsrs	r2, r2, #9
 8001130:	e756      	b.n	8000fe0 <__aeabi_fsub+0xb8>
 8001132:	4663      	mov	r3, ip
 8001134:	075b      	lsls	r3, r3, #29
 8001136:	d005      	beq.n	8001144 <__aeabi_fsub+0x21c>
 8001138:	230f      	movs	r3, #15
 800113a:	4662      	mov	r2, ip
 800113c:	4013      	ands	r3, r2
 800113e:	2b04      	cmp	r3, #4
 8001140:	d000      	beq.n	8001144 <__aeabi_fsub+0x21c>
 8001142:	e740      	b.n	8000fc6 <__aeabi_fsub+0x9e>
 8001144:	002b      	movs	r3, r5
 8001146:	e765      	b.n	8001014 <__aeabi_fsub+0xec>
 8001148:	0007      	movs	r7, r0
 800114a:	2f00      	cmp	r7, #0
 800114c:	d100      	bne.n	8001150 <__aeabi_fsub+0x228>
 800114e:	e745      	b.n	8000fdc <__aeabi_fsub+0xb4>
 8001150:	2280      	movs	r2, #128	@ 0x80
 8001152:	03d2      	lsls	r2, r2, #15
 8001154:	433a      	orrs	r2, r7
 8001156:	0252      	lsls	r2, r2, #9
 8001158:	20ff      	movs	r0, #255	@ 0xff
 800115a:	0a52      	lsrs	r2, r2, #9
 800115c:	e740      	b.n	8000fe0 <__aeabi_fsub+0xb8>
 800115e:	2b00      	cmp	r3, #0
 8001160:	d179      	bne.n	8001256 <__aeabi_fsub+0x32e>
 8001162:	22fe      	movs	r2, #254	@ 0xfe
 8001164:	1c6b      	adds	r3, r5, #1
 8001166:	421a      	tst	r2, r3
 8001168:	d1aa      	bne.n	80010c0 <__aeabi_fsub+0x198>
 800116a:	4663      	mov	r3, ip
 800116c:	2b00      	cmp	r3, #0
 800116e:	d100      	bne.n	8001172 <__aeabi_fsub+0x24a>
 8001170:	e0f5      	b.n	800135e <__aeabi_fsub+0x436>
 8001172:	2900      	cmp	r1, #0
 8001174:	d100      	bne.n	8001178 <__aeabi_fsub+0x250>
 8001176:	e0d1      	b.n	800131c <__aeabi_fsub+0x3f4>
 8001178:	1a5f      	subs	r7, r3, r1
 800117a:	2380      	movs	r3, #128	@ 0x80
 800117c:	04db      	lsls	r3, r3, #19
 800117e:	421f      	tst	r7, r3
 8001180:	d100      	bne.n	8001184 <__aeabi_fsub+0x25c>
 8001182:	e10e      	b.n	80013a2 <__aeabi_fsub+0x47a>
 8001184:	4662      	mov	r2, ip
 8001186:	2401      	movs	r4, #1
 8001188:	1a8a      	subs	r2, r1, r2
 800118a:	4694      	mov	ip, r2
 800118c:	2000      	movs	r0, #0
 800118e:	4034      	ands	r4, r6
 8001190:	2a00      	cmp	r2, #0
 8001192:	d100      	bne.n	8001196 <__aeabi_fsub+0x26e>
 8001194:	e724      	b.n	8000fe0 <__aeabi_fsub+0xb8>
 8001196:	2001      	movs	r0, #1
 8001198:	421a      	tst	r2, r3
 800119a:	d1c6      	bne.n	800112a <__aeabi_fsub+0x202>
 800119c:	2300      	movs	r3, #0
 800119e:	08d7      	lsrs	r7, r2, #3
 80011a0:	e73d      	b.n	800101e <__aeabi_fsub+0xf6>
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d017      	beq.n	80011d6 <__aeabi_fsub+0x2ae>
 80011a6:	2d00      	cmp	r5, #0
 80011a8:	d000      	beq.n	80011ac <__aeabi_fsub+0x284>
 80011aa:	e0af      	b.n	800130c <__aeabi_fsub+0x3e4>
 80011ac:	23ff      	movs	r3, #255	@ 0xff
 80011ae:	4665      	mov	r5, ip
 80011b0:	2d00      	cmp	r5, #0
 80011b2:	d100      	bne.n	80011b6 <__aeabi_fsub+0x28e>
 80011b4:	e0ad      	b.n	8001312 <__aeabi_fsub+0x3ea>
 80011b6:	1e5e      	subs	r6, r3, #1
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d100      	bne.n	80011be <__aeabi_fsub+0x296>
 80011bc:	e089      	b.n	80012d2 <__aeabi_fsub+0x3aa>
 80011be:	2bff      	cmp	r3, #255	@ 0xff
 80011c0:	d0c2      	beq.n	8001148 <__aeabi_fsub+0x220>
 80011c2:	2e1b      	cmp	r6, #27
 80011c4:	dc00      	bgt.n	80011c8 <__aeabi_fsub+0x2a0>
 80011c6:	e0ab      	b.n	8001320 <__aeabi_fsub+0x3f8>
 80011c8:	1d4b      	adds	r3, r1, #5
 80011ca:	469c      	mov	ip, r3
 80011cc:	0013      	movs	r3, r2
 80011ce:	e721      	b.n	8001014 <__aeabi_fsub+0xec>
 80011d0:	464b      	mov	r3, r9
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d170      	bne.n	80012b8 <__aeabi_fsub+0x390>
 80011d6:	22fe      	movs	r2, #254	@ 0xfe
 80011d8:	1c6b      	adds	r3, r5, #1
 80011da:	421a      	tst	r2, r3
 80011dc:	d15e      	bne.n	800129c <__aeabi_fsub+0x374>
 80011de:	2d00      	cmp	r5, #0
 80011e0:	d000      	beq.n	80011e4 <__aeabi_fsub+0x2bc>
 80011e2:	e0c3      	b.n	800136c <__aeabi_fsub+0x444>
 80011e4:	4663      	mov	r3, ip
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d100      	bne.n	80011ec <__aeabi_fsub+0x2c4>
 80011ea:	e0d0      	b.n	800138e <__aeabi_fsub+0x466>
 80011ec:	2900      	cmp	r1, #0
 80011ee:	d100      	bne.n	80011f2 <__aeabi_fsub+0x2ca>
 80011f0:	e094      	b.n	800131c <__aeabi_fsub+0x3f4>
 80011f2:	000a      	movs	r2, r1
 80011f4:	4462      	add	r2, ip
 80011f6:	0153      	lsls	r3, r2, #5
 80011f8:	d400      	bmi.n	80011fc <__aeabi_fsub+0x2d4>
 80011fa:	e0d8      	b.n	80013ae <__aeabi_fsub+0x486>
 80011fc:	0192      	lsls	r2, r2, #6
 80011fe:	2001      	movs	r0, #1
 8001200:	0a52      	lsrs	r2, r2, #9
 8001202:	e6ed      	b.n	8000fe0 <__aeabi_fsub+0xb8>
 8001204:	0008      	movs	r0, r1
 8001206:	2220      	movs	r2, #32
 8001208:	40d8      	lsrs	r0, r3
 800120a:	1ad3      	subs	r3, r2, r3
 800120c:	4099      	lsls	r1, r3
 800120e:	000b      	movs	r3, r1
 8001210:	1e5a      	subs	r2, r3, #1
 8001212:	4193      	sbcs	r3, r2
 8001214:	4303      	orrs	r3, r0
 8001216:	449c      	add	ip, r3
 8001218:	4663      	mov	r3, ip
 800121a:	015b      	lsls	r3, r3, #5
 800121c:	d589      	bpl.n	8001132 <__aeabi_fsub+0x20a>
 800121e:	3501      	adds	r5, #1
 8001220:	2dff      	cmp	r5, #255	@ 0xff
 8001222:	d100      	bne.n	8001226 <__aeabi_fsub+0x2fe>
 8001224:	e6da      	b.n	8000fdc <__aeabi_fsub+0xb4>
 8001226:	4662      	mov	r2, ip
 8001228:	2301      	movs	r3, #1
 800122a:	4919      	ldr	r1, [pc, #100]	@ (8001290 <__aeabi_fsub+0x368>)
 800122c:	4013      	ands	r3, r2
 800122e:	0852      	lsrs	r2, r2, #1
 8001230:	400a      	ands	r2, r1
 8001232:	431a      	orrs	r2, r3
 8001234:	0013      	movs	r3, r2
 8001236:	4694      	mov	ip, r2
 8001238:	075b      	lsls	r3, r3, #29
 800123a:	d004      	beq.n	8001246 <__aeabi_fsub+0x31e>
 800123c:	230f      	movs	r3, #15
 800123e:	4013      	ands	r3, r2
 8001240:	2b04      	cmp	r3, #4
 8001242:	d000      	beq.n	8001246 <__aeabi_fsub+0x31e>
 8001244:	e6bf      	b.n	8000fc6 <__aeabi_fsub+0x9e>
 8001246:	4663      	mov	r3, ip
 8001248:	015b      	lsls	r3, r3, #5
 800124a:	d500      	bpl.n	800124e <__aeabi_fsub+0x326>
 800124c:	e6c2      	b.n	8000fd4 <__aeabi_fsub+0xac>
 800124e:	4663      	mov	r3, ip
 8001250:	08df      	lsrs	r7, r3, #3
 8001252:	002b      	movs	r3, r5
 8001254:	e6e3      	b.n	800101e <__aeabi_fsub+0xf6>
 8001256:	1b53      	subs	r3, r2, r5
 8001258:	2d00      	cmp	r5, #0
 800125a:	d100      	bne.n	800125e <__aeabi_fsub+0x336>
 800125c:	e6f4      	b.n	8001048 <__aeabi_fsub+0x120>
 800125e:	2080      	movs	r0, #128	@ 0x80
 8001260:	4664      	mov	r4, ip
 8001262:	04c0      	lsls	r0, r0, #19
 8001264:	4304      	orrs	r4, r0
 8001266:	46a4      	mov	ip, r4
 8001268:	0034      	movs	r4, r6
 800126a:	2001      	movs	r0, #1
 800126c:	2b1b      	cmp	r3, #27
 800126e:	dc09      	bgt.n	8001284 <__aeabi_fsub+0x35c>
 8001270:	2520      	movs	r5, #32
 8001272:	4660      	mov	r0, ip
 8001274:	40d8      	lsrs	r0, r3
 8001276:	1aeb      	subs	r3, r5, r3
 8001278:	4665      	mov	r5, ip
 800127a:	409d      	lsls	r5, r3
 800127c:	002b      	movs	r3, r5
 800127e:	1e5d      	subs	r5, r3, #1
 8001280:	41ab      	sbcs	r3, r5
 8001282:	4318      	orrs	r0, r3
 8001284:	1a0b      	subs	r3, r1, r0
 8001286:	469c      	mov	ip, r3
 8001288:	0015      	movs	r5, r2
 800128a:	e680      	b.n	8000f8e <__aeabi_fsub+0x66>
 800128c:	fbffffff 	.word	0xfbffffff
 8001290:	7dffffff 	.word	0x7dffffff
 8001294:	22fe      	movs	r2, #254	@ 0xfe
 8001296:	1c6b      	adds	r3, r5, #1
 8001298:	4213      	tst	r3, r2
 800129a:	d0a3      	beq.n	80011e4 <__aeabi_fsub+0x2bc>
 800129c:	2bff      	cmp	r3, #255	@ 0xff
 800129e:	d100      	bne.n	80012a2 <__aeabi_fsub+0x37a>
 80012a0:	e69c      	b.n	8000fdc <__aeabi_fsub+0xb4>
 80012a2:	4461      	add	r1, ip
 80012a4:	0849      	lsrs	r1, r1, #1
 80012a6:	074a      	lsls	r2, r1, #29
 80012a8:	d049      	beq.n	800133e <__aeabi_fsub+0x416>
 80012aa:	220f      	movs	r2, #15
 80012ac:	400a      	ands	r2, r1
 80012ae:	2a04      	cmp	r2, #4
 80012b0:	d045      	beq.n	800133e <__aeabi_fsub+0x416>
 80012b2:	1d0a      	adds	r2, r1, #4
 80012b4:	4694      	mov	ip, r2
 80012b6:	e6ad      	b.n	8001014 <__aeabi_fsub+0xec>
 80012b8:	2d00      	cmp	r5, #0
 80012ba:	d100      	bne.n	80012be <__aeabi_fsub+0x396>
 80012bc:	e776      	b.n	80011ac <__aeabi_fsub+0x284>
 80012be:	e68d      	b.n	8000fdc <__aeabi_fsub+0xb4>
 80012c0:	0034      	movs	r4, r6
 80012c2:	20ff      	movs	r0, #255	@ 0xff
 80012c4:	2200      	movs	r2, #0
 80012c6:	e68b      	b.n	8000fe0 <__aeabi_fsub+0xb8>
 80012c8:	4663      	mov	r3, ip
 80012ca:	2401      	movs	r4, #1
 80012cc:	1acf      	subs	r7, r1, r3
 80012ce:	4034      	ands	r4, r6
 80012d0:	e664      	b.n	8000f9c <__aeabi_fsub+0x74>
 80012d2:	4461      	add	r1, ip
 80012d4:	014b      	lsls	r3, r1, #5
 80012d6:	d56d      	bpl.n	80013b4 <__aeabi_fsub+0x48c>
 80012d8:	0848      	lsrs	r0, r1, #1
 80012da:	4944      	ldr	r1, [pc, #272]	@ (80013ec <__aeabi_fsub+0x4c4>)
 80012dc:	4001      	ands	r1, r0
 80012de:	0743      	lsls	r3, r0, #29
 80012e0:	d02c      	beq.n	800133c <__aeabi_fsub+0x414>
 80012e2:	230f      	movs	r3, #15
 80012e4:	4003      	ands	r3, r0
 80012e6:	2b04      	cmp	r3, #4
 80012e8:	d028      	beq.n	800133c <__aeabi_fsub+0x414>
 80012ea:	1d0b      	adds	r3, r1, #4
 80012ec:	469c      	mov	ip, r3
 80012ee:	2302      	movs	r3, #2
 80012f0:	e690      	b.n	8001014 <__aeabi_fsub+0xec>
 80012f2:	2900      	cmp	r1, #0
 80012f4:	d100      	bne.n	80012f8 <__aeabi_fsub+0x3d0>
 80012f6:	e72b      	b.n	8001150 <__aeabi_fsub+0x228>
 80012f8:	2380      	movs	r3, #128	@ 0x80
 80012fa:	03db      	lsls	r3, r3, #15
 80012fc:	429f      	cmp	r7, r3
 80012fe:	d200      	bcs.n	8001302 <__aeabi_fsub+0x3da>
 8001300:	e726      	b.n	8001150 <__aeabi_fsub+0x228>
 8001302:	4298      	cmp	r0, r3
 8001304:	d300      	bcc.n	8001308 <__aeabi_fsub+0x3e0>
 8001306:	e723      	b.n	8001150 <__aeabi_fsub+0x228>
 8001308:	2401      	movs	r4, #1
 800130a:	4034      	ands	r4, r6
 800130c:	0007      	movs	r7, r0
 800130e:	e71f      	b.n	8001150 <__aeabi_fsub+0x228>
 8001310:	0034      	movs	r4, r6
 8001312:	468c      	mov	ip, r1
 8001314:	e67e      	b.n	8001014 <__aeabi_fsub+0xec>
 8001316:	2301      	movs	r3, #1
 8001318:	08cf      	lsrs	r7, r1, #3
 800131a:	e680      	b.n	800101e <__aeabi_fsub+0xf6>
 800131c:	2300      	movs	r3, #0
 800131e:	e67e      	b.n	800101e <__aeabi_fsub+0xf6>
 8001320:	2020      	movs	r0, #32
 8001322:	4665      	mov	r5, ip
 8001324:	1b80      	subs	r0, r0, r6
 8001326:	4085      	lsls	r5, r0
 8001328:	4663      	mov	r3, ip
 800132a:	0028      	movs	r0, r5
 800132c:	40f3      	lsrs	r3, r6
 800132e:	1e45      	subs	r5, r0, #1
 8001330:	41a8      	sbcs	r0, r5
 8001332:	4303      	orrs	r3, r0
 8001334:	469c      	mov	ip, r3
 8001336:	0015      	movs	r5, r2
 8001338:	448c      	add	ip, r1
 800133a:	e76d      	b.n	8001218 <__aeabi_fsub+0x2f0>
 800133c:	2302      	movs	r3, #2
 800133e:	08cf      	lsrs	r7, r1, #3
 8001340:	e66d      	b.n	800101e <__aeabi_fsub+0xf6>
 8001342:	1b0f      	subs	r7, r1, r4
 8001344:	017b      	lsls	r3, r7, #5
 8001346:	d528      	bpl.n	800139a <__aeabi_fsub+0x472>
 8001348:	01bf      	lsls	r7, r7, #6
 800134a:	09bf      	lsrs	r7, r7, #6
 800134c:	0038      	movs	r0, r7
 800134e:	f000 fd91 	bl	8001e74 <__clzsi2>
 8001352:	003b      	movs	r3, r7
 8001354:	3805      	subs	r0, #5
 8001356:	4083      	lsls	r3, r0
 8001358:	0034      	movs	r4, r6
 800135a:	2501      	movs	r5, #1
 800135c:	e6ca      	b.n	80010f4 <__aeabi_fsub+0x1cc>
 800135e:	2900      	cmp	r1, #0
 8001360:	d100      	bne.n	8001364 <__aeabi_fsub+0x43c>
 8001362:	e6b5      	b.n	80010d0 <__aeabi_fsub+0x1a8>
 8001364:	2401      	movs	r4, #1
 8001366:	0007      	movs	r7, r0
 8001368:	4034      	ands	r4, r6
 800136a:	e658      	b.n	800101e <__aeabi_fsub+0xf6>
 800136c:	4663      	mov	r3, ip
 800136e:	2b00      	cmp	r3, #0
 8001370:	d100      	bne.n	8001374 <__aeabi_fsub+0x44c>
 8001372:	e6e9      	b.n	8001148 <__aeabi_fsub+0x220>
 8001374:	2900      	cmp	r1, #0
 8001376:	d100      	bne.n	800137a <__aeabi_fsub+0x452>
 8001378:	e6ea      	b.n	8001150 <__aeabi_fsub+0x228>
 800137a:	2380      	movs	r3, #128	@ 0x80
 800137c:	03db      	lsls	r3, r3, #15
 800137e:	429f      	cmp	r7, r3
 8001380:	d200      	bcs.n	8001384 <__aeabi_fsub+0x45c>
 8001382:	e6e5      	b.n	8001150 <__aeabi_fsub+0x228>
 8001384:	4298      	cmp	r0, r3
 8001386:	d300      	bcc.n	800138a <__aeabi_fsub+0x462>
 8001388:	e6e2      	b.n	8001150 <__aeabi_fsub+0x228>
 800138a:	0007      	movs	r7, r0
 800138c:	e6e0      	b.n	8001150 <__aeabi_fsub+0x228>
 800138e:	2900      	cmp	r1, #0
 8001390:	d100      	bne.n	8001394 <__aeabi_fsub+0x46c>
 8001392:	e69e      	b.n	80010d2 <__aeabi_fsub+0x1aa>
 8001394:	2300      	movs	r3, #0
 8001396:	08cf      	lsrs	r7, r1, #3
 8001398:	e641      	b.n	800101e <__aeabi_fsub+0xf6>
 800139a:	0034      	movs	r4, r6
 800139c:	2301      	movs	r3, #1
 800139e:	08ff      	lsrs	r7, r7, #3
 80013a0:	e63d      	b.n	800101e <__aeabi_fsub+0xf6>
 80013a2:	2f00      	cmp	r7, #0
 80013a4:	d100      	bne.n	80013a8 <__aeabi_fsub+0x480>
 80013a6:	e693      	b.n	80010d0 <__aeabi_fsub+0x1a8>
 80013a8:	2300      	movs	r3, #0
 80013aa:	08ff      	lsrs	r7, r7, #3
 80013ac:	e637      	b.n	800101e <__aeabi_fsub+0xf6>
 80013ae:	2300      	movs	r3, #0
 80013b0:	08d7      	lsrs	r7, r2, #3
 80013b2:	e634      	b.n	800101e <__aeabi_fsub+0xf6>
 80013b4:	2301      	movs	r3, #1
 80013b6:	08cf      	lsrs	r7, r1, #3
 80013b8:	e631      	b.n	800101e <__aeabi_fsub+0xf6>
 80013ba:	2280      	movs	r2, #128	@ 0x80
 80013bc:	000b      	movs	r3, r1
 80013be:	04d2      	lsls	r2, r2, #19
 80013c0:	2001      	movs	r0, #1
 80013c2:	4013      	ands	r3, r2
 80013c4:	4211      	tst	r1, r2
 80013c6:	d000      	beq.n	80013ca <__aeabi_fsub+0x4a2>
 80013c8:	e6ae      	b.n	8001128 <__aeabi_fsub+0x200>
 80013ca:	08cf      	lsrs	r7, r1, #3
 80013cc:	e627      	b.n	800101e <__aeabi_fsub+0xf6>
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d100      	bne.n	80013d4 <__aeabi_fsub+0x4ac>
 80013d2:	e75f      	b.n	8001294 <__aeabi_fsub+0x36c>
 80013d4:	1b56      	subs	r6, r2, r5
 80013d6:	2d00      	cmp	r5, #0
 80013d8:	d101      	bne.n	80013de <__aeabi_fsub+0x4b6>
 80013da:	0033      	movs	r3, r6
 80013dc:	e6e7      	b.n	80011ae <__aeabi_fsub+0x286>
 80013de:	2380      	movs	r3, #128	@ 0x80
 80013e0:	4660      	mov	r0, ip
 80013e2:	04db      	lsls	r3, r3, #19
 80013e4:	4318      	orrs	r0, r3
 80013e6:	4684      	mov	ip, r0
 80013e8:	e6eb      	b.n	80011c2 <__aeabi_fsub+0x29a>
 80013ea:	46c0      	nop			@ (mov r8, r8)
 80013ec:	7dffffff 	.word	0x7dffffff

080013f0 <__aeabi_f2iz>:
 80013f0:	0241      	lsls	r1, r0, #9
 80013f2:	0042      	lsls	r2, r0, #1
 80013f4:	0fc3      	lsrs	r3, r0, #31
 80013f6:	0a49      	lsrs	r1, r1, #9
 80013f8:	2000      	movs	r0, #0
 80013fa:	0e12      	lsrs	r2, r2, #24
 80013fc:	2a7e      	cmp	r2, #126	@ 0x7e
 80013fe:	dd03      	ble.n	8001408 <__aeabi_f2iz+0x18>
 8001400:	2a9d      	cmp	r2, #157	@ 0x9d
 8001402:	dd02      	ble.n	800140a <__aeabi_f2iz+0x1a>
 8001404:	4a09      	ldr	r2, [pc, #36]	@ (800142c <__aeabi_f2iz+0x3c>)
 8001406:	1898      	adds	r0, r3, r2
 8001408:	4770      	bx	lr
 800140a:	2080      	movs	r0, #128	@ 0x80
 800140c:	0400      	lsls	r0, r0, #16
 800140e:	4301      	orrs	r1, r0
 8001410:	2a95      	cmp	r2, #149	@ 0x95
 8001412:	dc07      	bgt.n	8001424 <__aeabi_f2iz+0x34>
 8001414:	2096      	movs	r0, #150	@ 0x96
 8001416:	1a82      	subs	r2, r0, r2
 8001418:	40d1      	lsrs	r1, r2
 800141a:	4248      	negs	r0, r1
 800141c:	2b00      	cmp	r3, #0
 800141e:	d1f3      	bne.n	8001408 <__aeabi_f2iz+0x18>
 8001420:	0008      	movs	r0, r1
 8001422:	e7f1      	b.n	8001408 <__aeabi_f2iz+0x18>
 8001424:	3a96      	subs	r2, #150	@ 0x96
 8001426:	4091      	lsls	r1, r2
 8001428:	e7f7      	b.n	800141a <__aeabi_f2iz+0x2a>
 800142a:	46c0      	nop			@ (mov r8, r8)
 800142c:	7fffffff 	.word	0x7fffffff

08001430 <__aeabi_i2f>:
 8001430:	b570      	push	{r4, r5, r6, lr}
 8001432:	2800      	cmp	r0, #0
 8001434:	d012      	beq.n	800145c <__aeabi_i2f+0x2c>
 8001436:	17c3      	asrs	r3, r0, #31
 8001438:	18c5      	adds	r5, r0, r3
 800143a:	405d      	eors	r5, r3
 800143c:	0fc4      	lsrs	r4, r0, #31
 800143e:	0028      	movs	r0, r5
 8001440:	f000 fd18 	bl	8001e74 <__clzsi2>
 8001444:	239e      	movs	r3, #158	@ 0x9e
 8001446:	1a1b      	subs	r3, r3, r0
 8001448:	2b96      	cmp	r3, #150	@ 0x96
 800144a:	dc0f      	bgt.n	800146c <__aeabi_i2f+0x3c>
 800144c:	2808      	cmp	r0, #8
 800144e:	d038      	beq.n	80014c2 <__aeabi_i2f+0x92>
 8001450:	3808      	subs	r0, #8
 8001452:	4085      	lsls	r5, r0
 8001454:	026d      	lsls	r5, r5, #9
 8001456:	0a6d      	lsrs	r5, r5, #9
 8001458:	b2d8      	uxtb	r0, r3
 800145a:	e002      	b.n	8001462 <__aeabi_i2f+0x32>
 800145c:	2400      	movs	r4, #0
 800145e:	2000      	movs	r0, #0
 8001460:	2500      	movs	r5, #0
 8001462:	05c0      	lsls	r0, r0, #23
 8001464:	4328      	orrs	r0, r5
 8001466:	07e4      	lsls	r4, r4, #31
 8001468:	4320      	orrs	r0, r4
 800146a:	bd70      	pop	{r4, r5, r6, pc}
 800146c:	2b99      	cmp	r3, #153	@ 0x99
 800146e:	dc14      	bgt.n	800149a <__aeabi_i2f+0x6a>
 8001470:	1f42      	subs	r2, r0, #5
 8001472:	4095      	lsls	r5, r2
 8001474:	002a      	movs	r2, r5
 8001476:	4915      	ldr	r1, [pc, #84]	@ (80014cc <__aeabi_i2f+0x9c>)
 8001478:	4011      	ands	r1, r2
 800147a:	0755      	lsls	r5, r2, #29
 800147c:	d01c      	beq.n	80014b8 <__aeabi_i2f+0x88>
 800147e:	250f      	movs	r5, #15
 8001480:	402a      	ands	r2, r5
 8001482:	2a04      	cmp	r2, #4
 8001484:	d018      	beq.n	80014b8 <__aeabi_i2f+0x88>
 8001486:	3104      	adds	r1, #4
 8001488:	08ca      	lsrs	r2, r1, #3
 800148a:	0149      	lsls	r1, r1, #5
 800148c:	d515      	bpl.n	80014ba <__aeabi_i2f+0x8a>
 800148e:	239f      	movs	r3, #159	@ 0x9f
 8001490:	0252      	lsls	r2, r2, #9
 8001492:	1a18      	subs	r0, r3, r0
 8001494:	0a55      	lsrs	r5, r2, #9
 8001496:	b2c0      	uxtb	r0, r0
 8001498:	e7e3      	b.n	8001462 <__aeabi_i2f+0x32>
 800149a:	2205      	movs	r2, #5
 800149c:	0029      	movs	r1, r5
 800149e:	1a12      	subs	r2, r2, r0
 80014a0:	40d1      	lsrs	r1, r2
 80014a2:	0002      	movs	r2, r0
 80014a4:	321b      	adds	r2, #27
 80014a6:	4095      	lsls	r5, r2
 80014a8:	002a      	movs	r2, r5
 80014aa:	1e55      	subs	r5, r2, #1
 80014ac:	41aa      	sbcs	r2, r5
 80014ae:	430a      	orrs	r2, r1
 80014b0:	4906      	ldr	r1, [pc, #24]	@ (80014cc <__aeabi_i2f+0x9c>)
 80014b2:	4011      	ands	r1, r2
 80014b4:	0755      	lsls	r5, r2, #29
 80014b6:	d1e2      	bne.n	800147e <__aeabi_i2f+0x4e>
 80014b8:	08ca      	lsrs	r2, r1, #3
 80014ba:	0252      	lsls	r2, r2, #9
 80014bc:	0a55      	lsrs	r5, r2, #9
 80014be:	b2d8      	uxtb	r0, r3
 80014c0:	e7cf      	b.n	8001462 <__aeabi_i2f+0x32>
 80014c2:	026d      	lsls	r5, r5, #9
 80014c4:	0a6d      	lsrs	r5, r5, #9
 80014c6:	308e      	adds	r0, #142	@ 0x8e
 80014c8:	e7cb      	b.n	8001462 <__aeabi_i2f+0x32>
 80014ca:	46c0      	nop			@ (mov r8, r8)
 80014cc:	fbffffff 	.word	0xfbffffff

080014d0 <__eqdf2>:
 80014d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014d2:	4657      	mov	r7, sl
 80014d4:	46de      	mov	lr, fp
 80014d6:	464e      	mov	r6, r9
 80014d8:	4645      	mov	r5, r8
 80014da:	b5e0      	push	{r5, r6, r7, lr}
 80014dc:	000d      	movs	r5, r1
 80014de:	0004      	movs	r4, r0
 80014e0:	0fe8      	lsrs	r0, r5, #31
 80014e2:	4683      	mov	fp, r0
 80014e4:	0309      	lsls	r1, r1, #12
 80014e6:	0fd8      	lsrs	r0, r3, #31
 80014e8:	0b09      	lsrs	r1, r1, #12
 80014ea:	4682      	mov	sl, r0
 80014ec:	4819      	ldr	r0, [pc, #100]	@ (8001554 <__eqdf2+0x84>)
 80014ee:	468c      	mov	ip, r1
 80014f0:	031f      	lsls	r7, r3, #12
 80014f2:	0069      	lsls	r1, r5, #1
 80014f4:	005e      	lsls	r6, r3, #1
 80014f6:	0d49      	lsrs	r1, r1, #21
 80014f8:	0b3f      	lsrs	r7, r7, #12
 80014fa:	0d76      	lsrs	r6, r6, #21
 80014fc:	4281      	cmp	r1, r0
 80014fe:	d018      	beq.n	8001532 <__eqdf2+0x62>
 8001500:	4286      	cmp	r6, r0
 8001502:	d00f      	beq.n	8001524 <__eqdf2+0x54>
 8001504:	2001      	movs	r0, #1
 8001506:	42b1      	cmp	r1, r6
 8001508:	d10d      	bne.n	8001526 <__eqdf2+0x56>
 800150a:	45bc      	cmp	ip, r7
 800150c:	d10b      	bne.n	8001526 <__eqdf2+0x56>
 800150e:	4294      	cmp	r4, r2
 8001510:	d109      	bne.n	8001526 <__eqdf2+0x56>
 8001512:	45d3      	cmp	fp, sl
 8001514:	d01c      	beq.n	8001550 <__eqdf2+0x80>
 8001516:	2900      	cmp	r1, #0
 8001518:	d105      	bne.n	8001526 <__eqdf2+0x56>
 800151a:	4660      	mov	r0, ip
 800151c:	4320      	orrs	r0, r4
 800151e:	1e43      	subs	r3, r0, #1
 8001520:	4198      	sbcs	r0, r3
 8001522:	e000      	b.n	8001526 <__eqdf2+0x56>
 8001524:	2001      	movs	r0, #1
 8001526:	bcf0      	pop	{r4, r5, r6, r7}
 8001528:	46bb      	mov	fp, r7
 800152a:	46b2      	mov	sl, r6
 800152c:	46a9      	mov	r9, r5
 800152e:	46a0      	mov	r8, r4
 8001530:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001532:	2001      	movs	r0, #1
 8001534:	428e      	cmp	r6, r1
 8001536:	d1f6      	bne.n	8001526 <__eqdf2+0x56>
 8001538:	4661      	mov	r1, ip
 800153a:	4339      	orrs	r1, r7
 800153c:	000f      	movs	r7, r1
 800153e:	4317      	orrs	r7, r2
 8001540:	4327      	orrs	r7, r4
 8001542:	d1f0      	bne.n	8001526 <__eqdf2+0x56>
 8001544:	465b      	mov	r3, fp
 8001546:	4652      	mov	r2, sl
 8001548:	1a98      	subs	r0, r3, r2
 800154a:	1e43      	subs	r3, r0, #1
 800154c:	4198      	sbcs	r0, r3
 800154e:	e7ea      	b.n	8001526 <__eqdf2+0x56>
 8001550:	2000      	movs	r0, #0
 8001552:	e7e8      	b.n	8001526 <__eqdf2+0x56>
 8001554:	000007ff 	.word	0x000007ff

08001558 <__gedf2>:
 8001558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800155a:	4657      	mov	r7, sl
 800155c:	464e      	mov	r6, r9
 800155e:	4645      	mov	r5, r8
 8001560:	46de      	mov	lr, fp
 8001562:	b5e0      	push	{r5, r6, r7, lr}
 8001564:	000d      	movs	r5, r1
 8001566:	030e      	lsls	r6, r1, #12
 8001568:	0049      	lsls	r1, r1, #1
 800156a:	0d49      	lsrs	r1, r1, #21
 800156c:	468a      	mov	sl, r1
 800156e:	0fdf      	lsrs	r7, r3, #31
 8001570:	0fe9      	lsrs	r1, r5, #31
 8001572:	46bc      	mov	ip, r7
 8001574:	b083      	sub	sp, #12
 8001576:	4f2f      	ldr	r7, [pc, #188]	@ (8001634 <__gedf2+0xdc>)
 8001578:	0004      	movs	r4, r0
 800157a:	4680      	mov	r8, r0
 800157c:	9101      	str	r1, [sp, #4]
 800157e:	0058      	lsls	r0, r3, #1
 8001580:	0319      	lsls	r1, r3, #12
 8001582:	4691      	mov	r9, r2
 8001584:	0b36      	lsrs	r6, r6, #12
 8001586:	0b09      	lsrs	r1, r1, #12
 8001588:	0d40      	lsrs	r0, r0, #21
 800158a:	45ba      	cmp	sl, r7
 800158c:	d01d      	beq.n	80015ca <__gedf2+0x72>
 800158e:	42b8      	cmp	r0, r7
 8001590:	d00d      	beq.n	80015ae <__gedf2+0x56>
 8001592:	4657      	mov	r7, sl
 8001594:	2f00      	cmp	r7, #0
 8001596:	d12a      	bne.n	80015ee <__gedf2+0x96>
 8001598:	4334      	orrs	r4, r6
 800159a:	2800      	cmp	r0, #0
 800159c:	d124      	bne.n	80015e8 <__gedf2+0x90>
 800159e:	430a      	orrs	r2, r1
 80015a0:	d036      	beq.n	8001610 <__gedf2+0xb8>
 80015a2:	2c00      	cmp	r4, #0
 80015a4:	d141      	bne.n	800162a <__gedf2+0xd2>
 80015a6:	4663      	mov	r3, ip
 80015a8:	0058      	lsls	r0, r3, #1
 80015aa:	3801      	subs	r0, #1
 80015ac:	e015      	b.n	80015da <__gedf2+0x82>
 80015ae:	4311      	orrs	r1, r2
 80015b0:	d138      	bne.n	8001624 <__gedf2+0xcc>
 80015b2:	4653      	mov	r3, sl
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d101      	bne.n	80015bc <__gedf2+0x64>
 80015b8:	4326      	orrs	r6, r4
 80015ba:	d0f4      	beq.n	80015a6 <__gedf2+0x4e>
 80015bc:	9b01      	ldr	r3, [sp, #4]
 80015be:	4563      	cmp	r3, ip
 80015c0:	d107      	bne.n	80015d2 <__gedf2+0x7a>
 80015c2:	9b01      	ldr	r3, [sp, #4]
 80015c4:	0058      	lsls	r0, r3, #1
 80015c6:	3801      	subs	r0, #1
 80015c8:	e007      	b.n	80015da <__gedf2+0x82>
 80015ca:	4326      	orrs	r6, r4
 80015cc:	d12a      	bne.n	8001624 <__gedf2+0xcc>
 80015ce:	4550      	cmp	r0, sl
 80015d0:	d021      	beq.n	8001616 <__gedf2+0xbe>
 80015d2:	2001      	movs	r0, #1
 80015d4:	9b01      	ldr	r3, [sp, #4]
 80015d6:	425f      	negs	r7, r3
 80015d8:	4338      	orrs	r0, r7
 80015da:	b003      	add	sp, #12
 80015dc:	bcf0      	pop	{r4, r5, r6, r7}
 80015de:	46bb      	mov	fp, r7
 80015e0:	46b2      	mov	sl, r6
 80015e2:	46a9      	mov	r9, r5
 80015e4:	46a0      	mov	r8, r4
 80015e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015e8:	2c00      	cmp	r4, #0
 80015ea:	d0dc      	beq.n	80015a6 <__gedf2+0x4e>
 80015ec:	e7e6      	b.n	80015bc <__gedf2+0x64>
 80015ee:	2800      	cmp	r0, #0
 80015f0:	d0ef      	beq.n	80015d2 <__gedf2+0x7a>
 80015f2:	9b01      	ldr	r3, [sp, #4]
 80015f4:	4563      	cmp	r3, ip
 80015f6:	d1ec      	bne.n	80015d2 <__gedf2+0x7a>
 80015f8:	4582      	cmp	sl, r0
 80015fa:	dcea      	bgt.n	80015d2 <__gedf2+0x7a>
 80015fc:	dbe1      	blt.n	80015c2 <__gedf2+0x6a>
 80015fe:	428e      	cmp	r6, r1
 8001600:	d8e7      	bhi.n	80015d2 <__gedf2+0x7a>
 8001602:	d1de      	bne.n	80015c2 <__gedf2+0x6a>
 8001604:	45c8      	cmp	r8, r9
 8001606:	d8e4      	bhi.n	80015d2 <__gedf2+0x7a>
 8001608:	2000      	movs	r0, #0
 800160a:	45c8      	cmp	r8, r9
 800160c:	d2e5      	bcs.n	80015da <__gedf2+0x82>
 800160e:	e7d8      	b.n	80015c2 <__gedf2+0x6a>
 8001610:	2c00      	cmp	r4, #0
 8001612:	d0e2      	beq.n	80015da <__gedf2+0x82>
 8001614:	e7dd      	b.n	80015d2 <__gedf2+0x7a>
 8001616:	4311      	orrs	r1, r2
 8001618:	d104      	bne.n	8001624 <__gedf2+0xcc>
 800161a:	9b01      	ldr	r3, [sp, #4]
 800161c:	4563      	cmp	r3, ip
 800161e:	d1d8      	bne.n	80015d2 <__gedf2+0x7a>
 8001620:	2000      	movs	r0, #0
 8001622:	e7da      	b.n	80015da <__gedf2+0x82>
 8001624:	2002      	movs	r0, #2
 8001626:	4240      	negs	r0, r0
 8001628:	e7d7      	b.n	80015da <__gedf2+0x82>
 800162a:	9b01      	ldr	r3, [sp, #4]
 800162c:	4563      	cmp	r3, ip
 800162e:	d0e6      	beq.n	80015fe <__gedf2+0xa6>
 8001630:	e7cf      	b.n	80015d2 <__gedf2+0x7a>
 8001632:	46c0      	nop			@ (mov r8, r8)
 8001634:	000007ff 	.word	0x000007ff

08001638 <__ledf2>:
 8001638:	b5f0      	push	{r4, r5, r6, r7, lr}
 800163a:	4657      	mov	r7, sl
 800163c:	464e      	mov	r6, r9
 800163e:	4645      	mov	r5, r8
 8001640:	46de      	mov	lr, fp
 8001642:	b5e0      	push	{r5, r6, r7, lr}
 8001644:	000d      	movs	r5, r1
 8001646:	030e      	lsls	r6, r1, #12
 8001648:	0049      	lsls	r1, r1, #1
 800164a:	0d49      	lsrs	r1, r1, #21
 800164c:	468a      	mov	sl, r1
 800164e:	0fdf      	lsrs	r7, r3, #31
 8001650:	0fe9      	lsrs	r1, r5, #31
 8001652:	46bc      	mov	ip, r7
 8001654:	b083      	sub	sp, #12
 8001656:	4f2e      	ldr	r7, [pc, #184]	@ (8001710 <__ledf2+0xd8>)
 8001658:	0004      	movs	r4, r0
 800165a:	4680      	mov	r8, r0
 800165c:	9101      	str	r1, [sp, #4]
 800165e:	0058      	lsls	r0, r3, #1
 8001660:	0319      	lsls	r1, r3, #12
 8001662:	4691      	mov	r9, r2
 8001664:	0b36      	lsrs	r6, r6, #12
 8001666:	0b09      	lsrs	r1, r1, #12
 8001668:	0d40      	lsrs	r0, r0, #21
 800166a:	45ba      	cmp	sl, r7
 800166c:	d01e      	beq.n	80016ac <__ledf2+0x74>
 800166e:	42b8      	cmp	r0, r7
 8001670:	d00d      	beq.n	800168e <__ledf2+0x56>
 8001672:	4657      	mov	r7, sl
 8001674:	2f00      	cmp	r7, #0
 8001676:	d127      	bne.n	80016c8 <__ledf2+0x90>
 8001678:	4334      	orrs	r4, r6
 800167a:	2800      	cmp	r0, #0
 800167c:	d133      	bne.n	80016e6 <__ledf2+0xae>
 800167e:	430a      	orrs	r2, r1
 8001680:	d034      	beq.n	80016ec <__ledf2+0xb4>
 8001682:	2c00      	cmp	r4, #0
 8001684:	d140      	bne.n	8001708 <__ledf2+0xd0>
 8001686:	4663      	mov	r3, ip
 8001688:	0058      	lsls	r0, r3, #1
 800168a:	3801      	subs	r0, #1
 800168c:	e015      	b.n	80016ba <__ledf2+0x82>
 800168e:	4311      	orrs	r1, r2
 8001690:	d112      	bne.n	80016b8 <__ledf2+0x80>
 8001692:	4653      	mov	r3, sl
 8001694:	2b00      	cmp	r3, #0
 8001696:	d101      	bne.n	800169c <__ledf2+0x64>
 8001698:	4326      	orrs	r6, r4
 800169a:	d0f4      	beq.n	8001686 <__ledf2+0x4e>
 800169c:	9b01      	ldr	r3, [sp, #4]
 800169e:	4563      	cmp	r3, ip
 80016a0:	d01d      	beq.n	80016de <__ledf2+0xa6>
 80016a2:	2001      	movs	r0, #1
 80016a4:	9b01      	ldr	r3, [sp, #4]
 80016a6:	425f      	negs	r7, r3
 80016a8:	4338      	orrs	r0, r7
 80016aa:	e006      	b.n	80016ba <__ledf2+0x82>
 80016ac:	4326      	orrs	r6, r4
 80016ae:	d103      	bne.n	80016b8 <__ledf2+0x80>
 80016b0:	4550      	cmp	r0, sl
 80016b2:	d1f6      	bne.n	80016a2 <__ledf2+0x6a>
 80016b4:	4311      	orrs	r1, r2
 80016b6:	d01c      	beq.n	80016f2 <__ledf2+0xba>
 80016b8:	2002      	movs	r0, #2
 80016ba:	b003      	add	sp, #12
 80016bc:	bcf0      	pop	{r4, r5, r6, r7}
 80016be:	46bb      	mov	fp, r7
 80016c0:	46b2      	mov	sl, r6
 80016c2:	46a9      	mov	r9, r5
 80016c4:	46a0      	mov	r8, r4
 80016c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016c8:	2800      	cmp	r0, #0
 80016ca:	d0ea      	beq.n	80016a2 <__ledf2+0x6a>
 80016cc:	9b01      	ldr	r3, [sp, #4]
 80016ce:	4563      	cmp	r3, ip
 80016d0:	d1e7      	bne.n	80016a2 <__ledf2+0x6a>
 80016d2:	4582      	cmp	sl, r0
 80016d4:	dce5      	bgt.n	80016a2 <__ledf2+0x6a>
 80016d6:	db02      	blt.n	80016de <__ledf2+0xa6>
 80016d8:	428e      	cmp	r6, r1
 80016da:	d8e2      	bhi.n	80016a2 <__ledf2+0x6a>
 80016dc:	d00e      	beq.n	80016fc <__ledf2+0xc4>
 80016de:	9b01      	ldr	r3, [sp, #4]
 80016e0:	0058      	lsls	r0, r3, #1
 80016e2:	3801      	subs	r0, #1
 80016e4:	e7e9      	b.n	80016ba <__ledf2+0x82>
 80016e6:	2c00      	cmp	r4, #0
 80016e8:	d0cd      	beq.n	8001686 <__ledf2+0x4e>
 80016ea:	e7d7      	b.n	800169c <__ledf2+0x64>
 80016ec:	2c00      	cmp	r4, #0
 80016ee:	d0e4      	beq.n	80016ba <__ledf2+0x82>
 80016f0:	e7d7      	b.n	80016a2 <__ledf2+0x6a>
 80016f2:	9b01      	ldr	r3, [sp, #4]
 80016f4:	2000      	movs	r0, #0
 80016f6:	4563      	cmp	r3, ip
 80016f8:	d0df      	beq.n	80016ba <__ledf2+0x82>
 80016fa:	e7d2      	b.n	80016a2 <__ledf2+0x6a>
 80016fc:	45c8      	cmp	r8, r9
 80016fe:	d8d0      	bhi.n	80016a2 <__ledf2+0x6a>
 8001700:	2000      	movs	r0, #0
 8001702:	45c8      	cmp	r8, r9
 8001704:	d2d9      	bcs.n	80016ba <__ledf2+0x82>
 8001706:	e7ea      	b.n	80016de <__ledf2+0xa6>
 8001708:	9b01      	ldr	r3, [sp, #4]
 800170a:	4563      	cmp	r3, ip
 800170c:	d0e4      	beq.n	80016d8 <__ledf2+0xa0>
 800170e:	e7c8      	b.n	80016a2 <__ledf2+0x6a>
 8001710:	000007ff 	.word	0x000007ff

08001714 <__aeabi_dmul>:
 8001714:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001716:	4657      	mov	r7, sl
 8001718:	464e      	mov	r6, r9
 800171a:	46de      	mov	lr, fp
 800171c:	4645      	mov	r5, r8
 800171e:	b5e0      	push	{r5, r6, r7, lr}
 8001720:	001f      	movs	r7, r3
 8001722:	030b      	lsls	r3, r1, #12
 8001724:	0b1b      	lsrs	r3, r3, #12
 8001726:	0016      	movs	r6, r2
 8001728:	469a      	mov	sl, r3
 800172a:	0fca      	lsrs	r2, r1, #31
 800172c:	004b      	lsls	r3, r1, #1
 800172e:	0004      	movs	r4, r0
 8001730:	4691      	mov	r9, r2
 8001732:	b085      	sub	sp, #20
 8001734:	0d5b      	lsrs	r3, r3, #21
 8001736:	d100      	bne.n	800173a <__aeabi_dmul+0x26>
 8001738:	e1cf      	b.n	8001ada <__aeabi_dmul+0x3c6>
 800173a:	4acd      	ldr	r2, [pc, #820]	@ (8001a70 <__aeabi_dmul+0x35c>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d055      	beq.n	80017ec <__aeabi_dmul+0xd8>
 8001740:	4651      	mov	r1, sl
 8001742:	0f42      	lsrs	r2, r0, #29
 8001744:	00c9      	lsls	r1, r1, #3
 8001746:	430a      	orrs	r2, r1
 8001748:	2180      	movs	r1, #128	@ 0x80
 800174a:	0409      	lsls	r1, r1, #16
 800174c:	4311      	orrs	r1, r2
 800174e:	00c2      	lsls	r2, r0, #3
 8001750:	4690      	mov	r8, r2
 8001752:	4ac8      	ldr	r2, [pc, #800]	@ (8001a74 <__aeabi_dmul+0x360>)
 8001754:	468a      	mov	sl, r1
 8001756:	4693      	mov	fp, r2
 8001758:	449b      	add	fp, r3
 800175a:	2300      	movs	r3, #0
 800175c:	2500      	movs	r5, #0
 800175e:	9302      	str	r3, [sp, #8]
 8001760:	033c      	lsls	r4, r7, #12
 8001762:	007b      	lsls	r3, r7, #1
 8001764:	0ffa      	lsrs	r2, r7, #31
 8001766:	9601      	str	r6, [sp, #4]
 8001768:	0b24      	lsrs	r4, r4, #12
 800176a:	0d5b      	lsrs	r3, r3, #21
 800176c:	9200      	str	r2, [sp, #0]
 800176e:	d100      	bne.n	8001772 <__aeabi_dmul+0x5e>
 8001770:	e188      	b.n	8001a84 <__aeabi_dmul+0x370>
 8001772:	4abf      	ldr	r2, [pc, #764]	@ (8001a70 <__aeabi_dmul+0x35c>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d100      	bne.n	800177a <__aeabi_dmul+0x66>
 8001778:	e092      	b.n	80018a0 <__aeabi_dmul+0x18c>
 800177a:	4abe      	ldr	r2, [pc, #760]	@ (8001a74 <__aeabi_dmul+0x360>)
 800177c:	4694      	mov	ip, r2
 800177e:	4463      	add	r3, ip
 8001780:	449b      	add	fp, r3
 8001782:	2d0a      	cmp	r5, #10
 8001784:	dc42      	bgt.n	800180c <__aeabi_dmul+0xf8>
 8001786:	00e4      	lsls	r4, r4, #3
 8001788:	0f73      	lsrs	r3, r6, #29
 800178a:	4323      	orrs	r3, r4
 800178c:	2480      	movs	r4, #128	@ 0x80
 800178e:	4649      	mov	r1, r9
 8001790:	0424      	lsls	r4, r4, #16
 8001792:	431c      	orrs	r4, r3
 8001794:	00f3      	lsls	r3, r6, #3
 8001796:	9301      	str	r3, [sp, #4]
 8001798:	9b00      	ldr	r3, [sp, #0]
 800179a:	2000      	movs	r0, #0
 800179c:	4059      	eors	r1, r3
 800179e:	b2cb      	uxtb	r3, r1
 80017a0:	9303      	str	r3, [sp, #12]
 80017a2:	2d02      	cmp	r5, #2
 80017a4:	dc00      	bgt.n	80017a8 <__aeabi_dmul+0x94>
 80017a6:	e094      	b.n	80018d2 <__aeabi_dmul+0x1be>
 80017a8:	2301      	movs	r3, #1
 80017aa:	40ab      	lsls	r3, r5
 80017ac:	001d      	movs	r5, r3
 80017ae:	23a6      	movs	r3, #166	@ 0xa6
 80017b0:	002a      	movs	r2, r5
 80017b2:	00db      	lsls	r3, r3, #3
 80017b4:	401a      	ands	r2, r3
 80017b6:	421d      	tst	r5, r3
 80017b8:	d000      	beq.n	80017bc <__aeabi_dmul+0xa8>
 80017ba:	e229      	b.n	8001c10 <__aeabi_dmul+0x4fc>
 80017bc:	2390      	movs	r3, #144	@ 0x90
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	421d      	tst	r5, r3
 80017c2:	d100      	bne.n	80017c6 <__aeabi_dmul+0xb2>
 80017c4:	e24d      	b.n	8001c62 <__aeabi_dmul+0x54e>
 80017c6:	2300      	movs	r3, #0
 80017c8:	2480      	movs	r4, #128	@ 0x80
 80017ca:	4699      	mov	r9, r3
 80017cc:	0324      	lsls	r4, r4, #12
 80017ce:	4ba8      	ldr	r3, [pc, #672]	@ (8001a70 <__aeabi_dmul+0x35c>)
 80017d0:	0010      	movs	r0, r2
 80017d2:	464a      	mov	r2, r9
 80017d4:	051b      	lsls	r3, r3, #20
 80017d6:	4323      	orrs	r3, r4
 80017d8:	07d2      	lsls	r2, r2, #31
 80017da:	4313      	orrs	r3, r2
 80017dc:	0019      	movs	r1, r3
 80017de:	b005      	add	sp, #20
 80017e0:	bcf0      	pop	{r4, r5, r6, r7}
 80017e2:	46bb      	mov	fp, r7
 80017e4:	46b2      	mov	sl, r6
 80017e6:	46a9      	mov	r9, r5
 80017e8:	46a0      	mov	r8, r4
 80017ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017ec:	4652      	mov	r2, sl
 80017ee:	4302      	orrs	r2, r0
 80017f0:	4690      	mov	r8, r2
 80017f2:	d000      	beq.n	80017f6 <__aeabi_dmul+0xe2>
 80017f4:	e1ac      	b.n	8001b50 <__aeabi_dmul+0x43c>
 80017f6:	469b      	mov	fp, r3
 80017f8:	2302      	movs	r3, #2
 80017fa:	4692      	mov	sl, r2
 80017fc:	2508      	movs	r5, #8
 80017fe:	9302      	str	r3, [sp, #8]
 8001800:	e7ae      	b.n	8001760 <__aeabi_dmul+0x4c>
 8001802:	9b00      	ldr	r3, [sp, #0]
 8001804:	46a2      	mov	sl, r4
 8001806:	4699      	mov	r9, r3
 8001808:	9b01      	ldr	r3, [sp, #4]
 800180a:	4698      	mov	r8, r3
 800180c:	9b02      	ldr	r3, [sp, #8]
 800180e:	2b02      	cmp	r3, #2
 8001810:	d100      	bne.n	8001814 <__aeabi_dmul+0x100>
 8001812:	e1ca      	b.n	8001baa <__aeabi_dmul+0x496>
 8001814:	2b03      	cmp	r3, #3
 8001816:	d100      	bne.n	800181a <__aeabi_dmul+0x106>
 8001818:	e192      	b.n	8001b40 <__aeabi_dmul+0x42c>
 800181a:	2b01      	cmp	r3, #1
 800181c:	d110      	bne.n	8001840 <__aeabi_dmul+0x12c>
 800181e:	2300      	movs	r3, #0
 8001820:	2400      	movs	r4, #0
 8001822:	2200      	movs	r2, #0
 8001824:	e7d4      	b.n	80017d0 <__aeabi_dmul+0xbc>
 8001826:	2201      	movs	r2, #1
 8001828:	087b      	lsrs	r3, r7, #1
 800182a:	403a      	ands	r2, r7
 800182c:	4313      	orrs	r3, r2
 800182e:	4652      	mov	r2, sl
 8001830:	07d2      	lsls	r2, r2, #31
 8001832:	4313      	orrs	r3, r2
 8001834:	4698      	mov	r8, r3
 8001836:	4653      	mov	r3, sl
 8001838:	085b      	lsrs	r3, r3, #1
 800183a:	469a      	mov	sl, r3
 800183c:	9b03      	ldr	r3, [sp, #12]
 800183e:	4699      	mov	r9, r3
 8001840:	465b      	mov	r3, fp
 8001842:	1c58      	adds	r0, r3, #1
 8001844:	2380      	movs	r3, #128	@ 0x80
 8001846:	00db      	lsls	r3, r3, #3
 8001848:	445b      	add	r3, fp
 800184a:	2b00      	cmp	r3, #0
 800184c:	dc00      	bgt.n	8001850 <__aeabi_dmul+0x13c>
 800184e:	e1b1      	b.n	8001bb4 <__aeabi_dmul+0x4a0>
 8001850:	4642      	mov	r2, r8
 8001852:	0752      	lsls	r2, r2, #29
 8001854:	d00b      	beq.n	800186e <__aeabi_dmul+0x15a>
 8001856:	220f      	movs	r2, #15
 8001858:	4641      	mov	r1, r8
 800185a:	400a      	ands	r2, r1
 800185c:	2a04      	cmp	r2, #4
 800185e:	d006      	beq.n	800186e <__aeabi_dmul+0x15a>
 8001860:	4642      	mov	r2, r8
 8001862:	1d11      	adds	r1, r2, #4
 8001864:	4541      	cmp	r1, r8
 8001866:	4192      	sbcs	r2, r2
 8001868:	4688      	mov	r8, r1
 800186a:	4252      	negs	r2, r2
 800186c:	4492      	add	sl, r2
 800186e:	4652      	mov	r2, sl
 8001870:	01d2      	lsls	r2, r2, #7
 8001872:	d506      	bpl.n	8001882 <__aeabi_dmul+0x16e>
 8001874:	4652      	mov	r2, sl
 8001876:	4b80      	ldr	r3, [pc, #512]	@ (8001a78 <__aeabi_dmul+0x364>)
 8001878:	401a      	ands	r2, r3
 800187a:	2380      	movs	r3, #128	@ 0x80
 800187c:	4692      	mov	sl, r2
 800187e:	00db      	lsls	r3, r3, #3
 8001880:	18c3      	adds	r3, r0, r3
 8001882:	4a7e      	ldr	r2, [pc, #504]	@ (8001a7c <__aeabi_dmul+0x368>)
 8001884:	4293      	cmp	r3, r2
 8001886:	dd00      	ble.n	800188a <__aeabi_dmul+0x176>
 8001888:	e18f      	b.n	8001baa <__aeabi_dmul+0x496>
 800188a:	4642      	mov	r2, r8
 800188c:	08d1      	lsrs	r1, r2, #3
 800188e:	4652      	mov	r2, sl
 8001890:	0752      	lsls	r2, r2, #29
 8001892:	430a      	orrs	r2, r1
 8001894:	4651      	mov	r1, sl
 8001896:	055b      	lsls	r3, r3, #21
 8001898:	024c      	lsls	r4, r1, #9
 800189a:	0b24      	lsrs	r4, r4, #12
 800189c:	0d5b      	lsrs	r3, r3, #21
 800189e:	e797      	b.n	80017d0 <__aeabi_dmul+0xbc>
 80018a0:	4b73      	ldr	r3, [pc, #460]	@ (8001a70 <__aeabi_dmul+0x35c>)
 80018a2:	4326      	orrs	r6, r4
 80018a4:	469c      	mov	ip, r3
 80018a6:	44e3      	add	fp, ip
 80018a8:	2e00      	cmp	r6, #0
 80018aa:	d100      	bne.n	80018ae <__aeabi_dmul+0x19a>
 80018ac:	e16f      	b.n	8001b8e <__aeabi_dmul+0x47a>
 80018ae:	2303      	movs	r3, #3
 80018b0:	4649      	mov	r1, r9
 80018b2:	431d      	orrs	r5, r3
 80018b4:	9b00      	ldr	r3, [sp, #0]
 80018b6:	4059      	eors	r1, r3
 80018b8:	b2cb      	uxtb	r3, r1
 80018ba:	9303      	str	r3, [sp, #12]
 80018bc:	2d0a      	cmp	r5, #10
 80018be:	dd00      	ble.n	80018c2 <__aeabi_dmul+0x1ae>
 80018c0:	e133      	b.n	8001b2a <__aeabi_dmul+0x416>
 80018c2:	2301      	movs	r3, #1
 80018c4:	40ab      	lsls	r3, r5
 80018c6:	001d      	movs	r5, r3
 80018c8:	2303      	movs	r3, #3
 80018ca:	9302      	str	r3, [sp, #8]
 80018cc:	2288      	movs	r2, #136	@ 0x88
 80018ce:	422a      	tst	r2, r5
 80018d0:	d197      	bne.n	8001802 <__aeabi_dmul+0xee>
 80018d2:	4642      	mov	r2, r8
 80018d4:	4643      	mov	r3, r8
 80018d6:	0412      	lsls	r2, r2, #16
 80018d8:	0c12      	lsrs	r2, r2, #16
 80018da:	0016      	movs	r6, r2
 80018dc:	9801      	ldr	r0, [sp, #4]
 80018de:	0c1d      	lsrs	r5, r3, #16
 80018e0:	0c03      	lsrs	r3, r0, #16
 80018e2:	0400      	lsls	r0, r0, #16
 80018e4:	0c00      	lsrs	r0, r0, #16
 80018e6:	4346      	muls	r6, r0
 80018e8:	46b4      	mov	ip, r6
 80018ea:	001e      	movs	r6, r3
 80018ec:	436e      	muls	r6, r5
 80018ee:	9600      	str	r6, [sp, #0]
 80018f0:	0016      	movs	r6, r2
 80018f2:	0007      	movs	r7, r0
 80018f4:	435e      	muls	r6, r3
 80018f6:	4661      	mov	r1, ip
 80018f8:	46b0      	mov	r8, r6
 80018fa:	436f      	muls	r7, r5
 80018fc:	0c0e      	lsrs	r6, r1, #16
 80018fe:	44b8      	add	r8, r7
 8001900:	4446      	add	r6, r8
 8001902:	42b7      	cmp	r7, r6
 8001904:	d905      	bls.n	8001912 <__aeabi_dmul+0x1fe>
 8001906:	2180      	movs	r1, #128	@ 0x80
 8001908:	0249      	lsls	r1, r1, #9
 800190a:	4688      	mov	r8, r1
 800190c:	9f00      	ldr	r7, [sp, #0]
 800190e:	4447      	add	r7, r8
 8001910:	9700      	str	r7, [sp, #0]
 8001912:	4661      	mov	r1, ip
 8001914:	0409      	lsls	r1, r1, #16
 8001916:	0c09      	lsrs	r1, r1, #16
 8001918:	0c37      	lsrs	r7, r6, #16
 800191a:	0436      	lsls	r6, r6, #16
 800191c:	468c      	mov	ip, r1
 800191e:	0031      	movs	r1, r6
 8001920:	4461      	add	r1, ip
 8001922:	9101      	str	r1, [sp, #4]
 8001924:	0011      	movs	r1, r2
 8001926:	0c26      	lsrs	r6, r4, #16
 8001928:	0424      	lsls	r4, r4, #16
 800192a:	0c24      	lsrs	r4, r4, #16
 800192c:	4361      	muls	r1, r4
 800192e:	468c      	mov	ip, r1
 8001930:	0021      	movs	r1, r4
 8001932:	4369      	muls	r1, r5
 8001934:	4689      	mov	r9, r1
 8001936:	4661      	mov	r1, ip
 8001938:	0c09      	lsrs	r1, r1, #16
 800193a:	4688      	mov	r8, r1
 800193c:	4372      	muls	r2, r6
 800193e:	444a      	add	r2, r9
 8001940:	4442      	add	r2, r8
 8001942:	4375      	muls	r5, r6
 8001944:	4591      	cmp	r9, r2
 8001946:	d903      	bls.n	8001950 <__aeabi_dmul+0x23c>
 8001948:	2180      	movs	r1, #128	@ 0x80
 800194a:	0249      	lsls	r1, r1, #9
 800194c:	4688      	mov	r8, r1
 800194e:	4445      	add	r5, r8
 8001950:	0c11      	lsrs	r1, r2, #16
 8001952:	4688      	mov	r8, r1
 8001954:	4661      	mov	r1, ip
 8001956:	0409      	lsls	r1, r1, #16
 8001958:	0c09      	lsrs	r1, r1, #16
 800195a:	468c      	mov	ip, r1
 800195c:	0412      	lsls	r2, r2, #16
 800195e:	4462      	add	r2, ip
 8001960:	18b9      	adds	r1, r7, r2
 8001962:	9102      	str	r1, [sp, #8]
 8001964:	4651      	mov	r1, sl
 8001966:	0c09      	lsrs	r1, r1, #16
 8001968:	468c      	mov	ip, r1
 800196a:	4651      	mov	r1, sl
 800196c:	040f      	lsls	r7, r1, #16
 800196e:	0c3f      	lsrs	r7, r7, #16
 8001970:	0039      	movs	r1, r7
 8001972:	4341      	muls	r1, r0
 8001974:	4445      	add	r5, r8
 8001976:	4688      	mov	r8, r1
 8001978:	4661      	mov	r1, ip
 800197a:	4341      	muls	r1, r0
 800197c:	468a      	mov	sl, r1
 800197e:	4641      	mov	r1, r8
 8001980:	4660      	mov	r0, ip
 8001982:	0c09      	lsrs	r1, r1, #16
 8001984:	4689      	mov	r9, r1
 8001986:	4358      	muls	r0, r3
 8001988:	437b      	muls	r3, r7
 800198a:	4453      	add	r3, sl
 800198c:	444b      	add	r3, r9
 800198e:	459a      	cmp	sl, r3
 8001990:	d903      	bls.n	800199a <__aeabi_dmul+0x286>
 8001992:	2180      	movs	r1, #128	@ 0x80
 8001994:	0249      	lsls	r1, r1, #9
 8001996:	4689      	mov	r9, r1
 8001998:	4448      	add	r0, r9
 800199a:	0c19      	lsrs	r1, r3, #16
 800199c:	4689      	mov	r9, r1
 800199e:	4641      	mov	r1, r8
 80019a0:	0409      	lsls	r1, r1, #16
 80019a2:	0c09      	lsrs	r1, r1, #16
 80019a4:	4688      	mov	r8, r1
 80019a6:	0039      	movs	r1, r7
 80019a8:	4361      	muls	r1, r4
 80019aa:	041b      	lsls	r3, r3, #16
 80019ac:	4443      	add	r3, r8
 80019ae:	4688      	mov	r8, r1
 80019b0:	4661      	mov	r1, ip
 80019b2:	434c      	muls	r4, r1
 80019b4:	4371      	muls	r1, r6
 80019b6:	468c      	mov	ip, r1
 80019b8:	4641      	mov	r1, r8
 80019ba:	4377      	muls	r7, r6
 80019bc:	0c0e      	lsrs	r6, r1, #16
 80019be:	193f      	adds	r7, r7, r4
 80019c0:	19f6      	adds	r6, r6, r7
 80019c2:	4448      	add	r0, r9
 80019c4:	42b4      	cmp	r4, r6
 80019c6:	d903      	bls.n	80019d0 <__aeabi_dmul+0x2bc>
 80019c8:	2180      	movs	r1, #128	@ 0x80
 80019ca:	0249      	lsls	r1, r1, #9
 80019cc:	4689      	mov	r9, r1
 80019ce:	44cc      	add	ip, r9
 80019d0:	9902      	ldr	r1, [sp, #8]
 80019d2:	9f00      	ldr	r7, [sp, #0]
 80019d4:	4689      	mov	r9, r1
 80019d6:	0431      	lsls	r1, r6, #16
 80019d8:	444f      	add	r7, r9
 80019da:	4689      	mov	r9, r1
 80019dc:	4641      	mov	r1, r8
 80019de:	4297      	cmp	r7, r2
 80019e0:	4192      	sbcs	r2, r2
 80019e2:	040c      	lsls	r4, r1, #16
 80019e4:	0c24      	lsrs	r4, r4, #16
 80019e6:	444c      	add	r4, r9
 80019e8:	18ff      	adds	r7, r7, r3
 80019ea:	4252      	negs	r2, r2
 80019ec:	1964      	adds	r4, r4, r5
 80019ee:	18a1      	adds	r1, r4, r2
 80019f0:	429f      	cmp	r7, r3
 80019f2:	419b      	sbcs	r3, r3
 80019f4:	4688      	mov	r8, r1
 80019f6:	4682      	mov	sl, r0
 80019f8:	425b      	negs	r3, r3
 80019fa:	4699      	mov	r9, r3
 80019fc:	4590      	cmp	r8, r2
 80019fe:	4192      	sbcs	r2, r2
 8001a00:	42ac      	cmp	r4, r5
 8001a02:	41a4      	sbcs	r4, r4
 8001a04:	44c2      	add	sl, r8
 8001a06:	44d1      	add	r9, sl
 8001a08:	4252      	negs	r2, r2
 8001a0a:	4264      	negs	r4, r4
 8001a0c:	4314      	orrs	r4, r2
 8001a0e:	4599      	cmp	r9, r3
 8001a10:	419b      	sbcs	r3, r3
 8001a12:	4582      	cmp	sl, r0
 8001a14:	4192      	sbcs	r2, r2
 8001a16:	425b      	negs	r3, r3
 8001a18:	4252      	negs	r2, r2
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	464a      	mov	r2, r9
 8001a1e:	0c36      	lsrs	r6, r6, #16
 8001a20:	19a4      	adds	r4, r4, r6
 8001a22:	18e3      	adds	r3, r4, r3
 8001a24:	4463      	add	r3, ip
 8001a26:	025b      	lsls	r3, r3, #9
 8001a28:	0dd2      	lsrs	r2, r2, #23
 8001a2a:	431a      	orrs	r2, r3
 8001a2c:	9901      	ldr	r1, [sp, #4]
 8001a2e:	4692      	mov	sl, r2
 8001a30:	027a      	lsls	r2, r7, #9
 8001a32:	430a      	orrs	r2, r1
 8001a34:	1e50      	subs	r0, r2, #1
 8001a36:	4182      	sbcs	r2, r0
 8001a38:	0dff      	lsrs	r7, r7, #23
 8001a3a:	4317      	orrs	r7, r2
 8001a3c:	464a      	mov	r2, r9
 8001a3e:	0252      	lsls	r2, r2, #9
 8001a40:	4317      	orrs	r7, r2
 8001a42:	46b8      	mov	r8, r7
 8001a44:	01db      	lsls	r3, r3, #7
 8001a46:	d500      	bpl.n	8001a4a <__aeabi_dmul+0x336>
 8001a48:	e6ed      	b.n	8001826 <__aeabi_dmul+0x112>
 8001a4a:	4b0d      	ldr	r3, [pc, #52]	@ (8001a80 <__aeabi_dmul+0x36c>)
 8001a4c:	9a03      	ldr	r2, [sp, #12]
 8001a4e:	445b      	add	r3, fp
 8001a50:	4691      	mov	r9, r2
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	dc00      	bgt.n	8001a58 <__aeabi_dmul+0x344>
 8001a56:	e0ac      	b.n	8001bb2 <__aeabi_dmul+0x49e>
 8001a58:	003a      	movs	r2, r7
 8001a5a:	0752      	lsls	r2, r2, #29
 8001a5c:	d100      	bne.n	8001a60 <__aeabi_dmul+0x34c>
 8001a5e:	e710      	b.n	8001882 <__aeabi_dmul+0x16e>
 8001a60:	220f      	movs	r2, #15
 8001a62:	4658      	mov	r0, fp
 8001a64:	403a      	ands	r2, r7
 8001a66:	2a04      	cmp	r2, #4
 8001a68:	d000      	beq.n	8001a6c <__aeabi_dmul+0x358>
 8001a6a:	e6f9      	b.n	8001860 <__aeabi_dmul+0x14c>
 8001a6c:	e709      	b.n	8001882 <__aeabi_dmul+0x16e>
 8001a6e:	46c0      	nop			@ (mov r8, r8)
 8001a70:	000007ff 	.word	0x000007ff
 8001a74:	fffffc01 	.word	0xfffffc01
 8001a78:	feffffff 	.word	0xfeffffff
 8001a7c:	000007fe 	.word	0x000007fe
 8001a80:	000003ff 	.word	0x000003ff
 8001a84:	0022      	movs	r2, r4
 8001a86:	4332      	orrs	r2, r6
 8001a88:	d06f      	beq.n	8001b6a <__aeabi_dmul+0x456>
 8001a8a:	2c00      	cmp	r4, #0
 8001a8c:	d100      	bne.n	8001a90 <__aeabi_dmul+0x37c>
 8001a8e:	e0c2      	b.n	8001c16 <__aeabi_dmul+0x502>
 8001a90:	0020      	movs	r0, r4
 8001a92:	f000 f9ef 	bl	8001e74 <__clzsi2>
 8001a96:	0002      	movs	r2, r0
 8001a98:	0003      	movs	r3, r0
 8001a9a:	3a0b      	subs	r2, #11
 8001a9c:	201d      	movs	r0, #29
 8001a9e:	1a82      	subs	r2, r0, r2
 8001aa0:	0030      	movs	r0, r6
 8001aa2:	0019      	movs	r1, r3
 8001aa4:	40d0      	lsrs	r0, r2
 8001aa6:	3908      	subs	r1, #8
 8001aa8:	408c      	lsls	r4, r1
 8001aaa:	0002      	movs	r2, r0
 8001aac:	4322      	orrs	r2, r4
 8001aae:	0034      	movs	r4, r6
 8001ab0:	408c      	lsls	r4, r1
 8001ab2:	4659      	mov	r1, fp
 8001ab4:	1acb      	subs	r3, r1, r3
 8001ab6:	4986      	ldr	r1, [pc, #536]	@ (8001cd0 <__aeabi_dmul+0x5bc>)
 8001ab8:	468b      	mov	fp, r1
 8001aba:	449b      	add	fp, r3
 8001abc:	2d0a      	cmp	r5, #10
 8001abe:	dd00      	ble.n	8001ac2 <__aeabi_dmul+0x3ae>
 8001ac0:	e6a4      	b.n	800180c <__aeabi_dmul+0xf8>
 8001ac2:	4649      	mov	r1, r9
 8001ac4:	9b00      	ldr	r3, [sp, #0]
 8001ac6:	9401      	str	r4, [sp, #4]
 8001ac8:	4059      	eors	r1, r3
 8001aca:	b2cb      	uxtb	r3, r1
 8001acc:	0014      	movs	r4, r2
 8001ace:	2000      	movs	r0, #0
 8001ad0:	9303      	str	r3, [sp, #12]
 8001ad2:	2d02      	cmp	r5, #2
 8001ad4:	dd00      	ble.n	8001ad8 <__aeabi_dmul+0x3c4>
 8001ad6:	e667      	b.n	80017a8 <__aeabi_dmul+0x94>
 8001ad8:	e6fb      	b.n	80018d2 <__aeabi_dmul+0x1be>
 8001ada:	4653      	mov	r3, sl
 8001adc:	4303      	orrs	r3, r0
 8001ade:	4698      	mov	r8, r3
 8001ae0:	d03c      	beq.n	8001b5c <__aeabi_dmul+0x448>
 8001ae2:	4653      	mov	r3, sl
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d100      	bne.n	8001aea <__aeabi_dmul+0x3d6>
 8001ae8:	e0a3      	b.n	8001c32 <__aeabi_dmul+0x51e>
 8001aea:	4650      	mov	r0, sl
 8001aec:	f000 f9c2 	bl	8001e74 <__clzsi2>
 8001af0:	230b      	movs	r3, #11
 8001af2:	425b      	negs	r3, r3
 8001af4:	469c      	mov	ip, r3
 8001af6:	0002      	movs	r2, r0
 8001af8:	4484      	add	ip, r0
 8001afa:	0011      	movs	r1, r2
 8001afc:	4650      	mov	r0, sl
 8001afe:	3908      	subs	r1, #8
 8001b00:	4088      	lsls	r0, r1
 8001b02:	231d      	movs	r3, #29
 8001b04:	4680      	mov	r8, r0
 8001b06:	4660      	mov	r0, ip
 8001b08:	1a1b      	subs	r3, r3, r0
 8001b0a:	0020      	movs	r0, r4
 8001b0c:	40d8      	lsrs	r0, r3
 8001b0e:	0003      	movs	r3, r0
 8001b10:	4640      	mov	r0, r8
 8001b12:	4303      	orrs	r3, r0
 8001b14:	469a      	mov	sl, r3
 8001b16:	0023      	movs	r3, r4
 8001b18:	408b      	lsls	r3, r1
 8001b1a:	4698      	mov	r8, r3
 8001b1c:	4b6c      	ldr	r3, [pc, #432]	@ (8001cd0 <__aeabi_dmul+0x5bc>)
 8001b1e:	2500      	movs	r5, #0
 8001b20:	1a9b      	subs	r3, r3, r2
 8001b22:	469b      	mov	fp, r3
 8001b24:	2300      	movs	r3, #0
 8001b26:	9302      	str	r3, [sp, #8]
 8001b28:	e61a      	b.n	8001760 <__aeabi_dmul+0x4c>
 8001b2a:	2d0f      	cmp	r5, #15
 8001b2c:	d000      	beq.n	8001b30 <__aeabi_dmul+0x41c>
 8001b2e:	e0c9      	b.n	8001cc4 <__aeabi_dmul+0x5b0>
 8001b30:	2380      	movs	r3, #128	@ 0x80
 8001b32:	4652      	mov	r2, sl
 8001b34:	031b      	lsls	r3, r3, #12
 8001b36:	421a      	tst	r2, r3
 8001b38:	d002      	beq.n	8001b40 <__aeabi_dmul+0x42c>
 8001b3a:	421c      	tst	r4, r3
 8001b3c:	d100      	bne.n	8001b40 <__aeabi_dmul+0x42c>
 8001b3e:	e092      	b.n	8001c66 <__aeabi_dmul+0x552>
 8001b40:	2480      	movs	r4, #128	@ 0x80
 8001b42:	4653      	mov	r3, sl
 8001b44:	0324      	lsls	r4, r4, #12
 8001b46:	431c      	orrs	r4, r3
 8001b48:	0324      	lsls	r4, r4, #12
 8001b4a:	4642      	mov	r2, r8
 8001b4c:	0b24      	lsrs	r4, r4, #12
 8001b4e:	e63e      	b.n	80017ce <__aeabi_dmul+0xba>
 8001b50:	469b      	mov	fp, r3
 8001b52:	2303      	movs	r3, #3
 8001b54:	4680      	mov	r8, r0
 8001b56:	250c      	movs	r5, #12
 8001b58:	9302      	str	r3, [sp, #8]
 8001b5a:	e601      	b.n	8001760 <__aeabi_dmul+0x4c>
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	469a      	mov	sl, r3
 8001b60:	469b      	mov	fp, r3
 8001b62:	3301      	adds	r3, #1
 8001b64:	2504      	movs	r5, #4
 8001b66:	9302      	str	r3, [sp, #8]
 8001b68:	e5fa      	b.n	8001760 <__aeabi_dmul+0x4c>
 8001b6a:	2101      	movs	r1, #1
 8001b6c:	430d      	orrs	r5, r1
 8001b6e:	2d0a      	cmp	r5, #10
 8001b70:	dd00      	ble.n	8001b74 <__aeabi_dmul+0x460>
 8001b72:	e64b      	b.n	800180c <__aeabi_dmul+0xf8>
 8001b74:	4649      	mov	r1, r9
 8001b76:	9800      	ldr	r0, [sp, #0]
 8001b78:	4041      	eors	r1, r0
 8001b7a:	b2c9      	uxtb	r1, r1
 8001b7c:	9103      	str	r1, [sp, #12]
 8001b7e:	2d02      	cmp	r5, #2
 8001b80:	dc00      	bgt.n	8001b84 <__aeabi_dmul+0x470>
 8001b82:	e096      	b.n	8001cb2 <__aeabi_dmul+0x59e>
 8001b84:	2300      	movs	r3, #0
 8001b86:	2400      	movs	r4, #0
 8001b88:	2001      	movs	r0, #1
 8001b8a:	9301      	str	r3, [sp, #4]
 8001b8c:	e60c      	b.n	80017a8 <__aeabi_dmul+0x94>
 8001b8e:	4649      	mov	r1, r9
 8001b90:	2302      	movs	r3, #2
 8001b92:	9a00      	ldr	r2, [sp, #0]
 8001b94:	432b      	orrs	r3, r5
 8001b96:	4051      	eors	r1, r2
 8001b98:	b2ca      	uxtb	r2, r1
 8001b9a:	9203      	str	r2, [sp, #12]
 8001b9c:	2b0a      	cmp	r3, #10
 8001b9e:	dd00      	ble.n	8001ba2 <__aeabi_dmul+0x48e>
 8001ba0:	e634      	b.n	800180c <__aeabi_dmul+0xf8>
 8001ba2:	2d00      	cmp	r5, #0
 8001ba4:	d157      	bne.n	8001c56 <__aeabi_dmul+0x542>
 8001ba6:	9b03      	ldr	r3, [sp, #12]
 8001ba8:	4699      	mov	r9, r3
 8001baa:	2400      	movs	r4, #0
 8001bac:	2200      	movs	r2, #0
 8001bae:	4b49      	ldr	r3, [pc, #292]	@ (8001cd4 <__aeabi_dmul+0x5c0>)
 8001bb0:	e60e      	b.n	80017d0 <__aeabi_dmul+0xbc>
 8001bb2:	4658      	mov	r0, fp
 8001bb4:	2101      	movs	r1, #1
 8001bb6:	1ac9      	subs	r1, r1, r3
 8001bb8:	2938      	cmp	r1, #56	@ 0x38
 8001bba:	dd00      	ble.n	8001bbe <__aeabi_dmul+0x4aa>
 8001bbc:	e62f      	b.n	800181e <__aeabi_dmul+0x10a>
 8001bbe:	291f      	cmp	r1, #31
 8001bc0:	dd56      	ble.n	8001c70 <__aeabi_dmul+0x55c>
 8001bc2:	221f      	movs	r2, #31
 8001bc4:	4654      	mov	r4, sl
 8001bc6:	4252      	negs	r2, r2
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	40dc      	lsrs	r4, r3
 8001bcc:	2920      	cmp	r1, #32
 8001bce:	d007      	beq.n	8001be0 <__aeabi_dmul+0x4cc>
 8001bd0:	4b41      	ldr	r3, [pc, #260]	@ (8001cd8 <__aeabi_dmul+0x5c4>)
 8001bd2:	4642      	mov	r2, r8
 8001bd4:	469c      	mov	ip, r3
 8001bd6:	4653      	mov	r3, sl
 8001bd8:	4460      	add	r0, ip
 8001bda:	4083      	lsls	r3, r0
 8001bdc:	431a      	orrs	r2, r3
 8001bde:	4690      	mov	r8, r2
 8001be0:	4642      	mov	r2, r8
 8001be2:	2107      	movs	r1, #7
 8001be4:	1e53      	subs	r3, r2, #1
 8001be6:	419a      	sbcs	r2, r3
 8001be8:	000b      	movs	r3, r1
 8001bea:	4322      	orrs	r2, r4
 8001bec:	4013      	ands	r3, r2
 8001bee:	2400      	movs	r4, #0
 8001bf0:	4211      	tst	r1, r2
 8001bf2:	d009      	beq.n	8001c08 <__aeabi_dmul+0x4f4>
 8001bf4:	230f      	movs	r3, #15
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	2b04      	cmp	r3, #4
 8001bfa:	d05d      	beq.n	8001cb8 <__aeabi_dmul+0x5a4>
 8001bfc:	1d11      	adds	r1, r2, #4
 8001bfe:	4291      	cmp	r1, r2
 8001c00:	419b      	sbcs	r3, r3
 8001c02:	000a      	movs	r2, r1
 8001c04:	425b      	negs	r3, r3
 8001c06:	075b      	lsls	r3, r3, #29
 8001c08:	08d2      	lsrs	r2, r2, #3
 8001c0a:	431a      	orrs	r2, r3
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	e5df      	b.n	80017d0 <__aeabi_dmul+0xbc>
 8001c10:	9b03      	ldr	r3, [sp, #12]
 8001c12:	4699      	mov	r9, r3
 8001c14:	e5fa      	b.n	800180c <__aeabi_dmul+0xf8>
 8001c16:	9801      	ldr	r0, [sp, #4]
 8001c18:	f000 f92c 	bl	8001e74 <__clzsi2>
 8001c1c:	0002      	movs	r2, r0
 8001c1e:	0003      	movs	r3, r0
 8001c20:	3215      	adds	r2, #21
 8001c22:	3320      	adds	r3, #32
 8001c24:	2a1c      	cmp	r2, #28
 8001c26:	dc00      	bgt.n	8001c2a <__aeabi_dmul+0x516>
 8001c28:	e738      	b.n	8001a9c <__aeabi_dmul+0x388>
 8001c2a:	9a01      	ldr	r2, [sp, #4]
 8001c2c:	3808      	subs	r0, #8
 8001c2e:	4082      	lsls	r2, r0
 8001c30:	e73f      	b.n	8001ab2 <__aeabi_dmul+0x39e>
 8001c32:	f000 f91f 	bl	8001e74 <__clzsi2>
 8001c36:	2315      	movs	r3, #21
 8001c38:	469c      	mov	ip, r3
 8001c3a:	4484      	add	ip, r0
 8001c3c:	0002      	movs	r2, r0
 8001c3e:	4663      	mov	r3, ip
 8001c40:	3220      	adds	r2, #32
 8001c42:	2b1c      	cmp	r3, #28
 8001c44:	dc00      	bgt.n	8001c48 <__aeabi_dmul+0x534>
 8001c46:	e758      	b.n	8001afa <__aeabi_dmul+0x3e6>
 8001c48:	2300      	movs	r3, #0
 8001c4a:	4698      	mov	r8, r3
 8001c4c:	0023      	movs	r3, r4
 8001c4e:	3808      	subs	r0, #8
 8001c50:	4083      	lsls	r3, r0
 8001c52:	469a      	mov	sl, r3
 8001c54:	e762      	b.n	8001b1c <__aeabi_dmul+0x408>
 8001c56:	001d      	movs	r5, r3
 8001c58:	2300      	movs	r3, #0
 8001c5a:	2400      	movs	r4, #0
 8001c5c:	2002      	movs	r0, #2
 8001c5e:	9301      	str	r3, [sp, #4]
 8001c60:	e5a2      	b.n	80017a8 <__aeabi_dmul+0x94>
 8001c62:	9002      	str	r0, [sp, #8]
 8001c64:	e632      	b.n	80018cc <__aeabi_dmul+0x1b8>
 8001c66:	431c      	orrs	r4, r3
 8001c68:	9b00      	ldr	r3, [sp, #0]
 8001c6a:	9a01      	ldr	r2, [sp, #4]
 8001c6c:	4699      	mov	r9, r3
 8001c6e:	e5ae      	b.n	80017ce <__aeabi_dmul+0xba>
 8001c70:	4b1a      	ldr	r3, [pc, #104]	@ (8001cdc <__aeabi_dmul+0x5c8>)
 8001c72:	4652      	mov	r2, sl
 8001c74:	18c3      	adds	r3, r0, r3
 8001c76:	4640      	mov	r0, r8
 8001c78:	409a      	lsls	r2, r3
 8001c7a:	40c8      	lsrs	r0, r1
 8001c7c:	4302      	orrs	r2, r0
 8001c7e:	4640      	mov	r0, r8
 8001c80:	4098      	lsls	r0, r3
 8001c82:	0003      	movs	r3, r0
 8001c84:	1e58      	subs	r0, r3, #1
 8001c86:	4183      	sbcs	r3, r0
 8001c88:	4654      	mov	r4, sl
 8001c8a:	431a      	orrs	r2, r3
 8001c8c:	40cc      	lsrs	r4, r1
 8001c8e:	0753      	lsls	r3, r2, #29
 8001c90:	d009      	beq.n	8001ca6 <__aeabi_dmul+0x592>
 8001c92:	230f      	movs	r3, #15
 8001c94:	4013      	ands	r3, r2
 8001c96:	2b04      	cmp	r3, #4
 8001c98:	d005      	beq.n	8001ca6 <__aeabi_dmul+0x592>
 8001c9a:	1d13      	adds	r3, r2, #4
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	4192      	sbcs	r2, r2
 8001ca0:	4252      	negs	r2, r2
 8001ca2:	18a4      	adds	r4, r4, r2
 8001ca4:	001a      	movs	r2, r3
 8001ca6:	0223      	lsls	r3, r4, #8
 8001ca8:	d508      	bpl.n	8001cbc <__aeabi_dmul+0x5a8>
 8001caa:	2301      	movs	r3, #1
 8001cac:	2400      	movs	r4, #0
 8001cae:	2200      	movs	r2, #0
 8001cb0:	e58e      	b.n	80017d0 <__aeabi_dmul+0xbc>
 8001cb2:	4689      	mov	r9, r1
 8001cb4:	2400      	movs	r4, #0
 8001cb6:	e58b      	b.n	80017d0 <__aeabi_dmul+0xbc>
 8001cb8:	2300      	movs	r3, #0
 8001cba:	e7a5      	b.n	8001c08 <__aeabi_dmul+0x4f4>
 8001cbc:	0763      	lsls	r3, r4, #29
 8001cbe:	0264      	lsls	r4, r4, #9
 8001cc0:	0b24      	lsrs	r4, r4, #12
 8001cc2:	e7a1      	b.n	8001c08 <__aeabi_dmul+0x4f4>
 8001cc4:	9b00      	ldr	r3, [sp, #0]
 8001cc6:	46a2      	mov	sl, r4
 8001cc8:	4699      	mov	r9, r3
 8001cca:	9b01      	ldr	r3, [sp, #4]
 8001ccc:	4698      	mov	r8, r3
 8001cce:	e737      	b.n	8001b40 <__aeabi_dmul+0x42c>
 8001cd0:	fffffc0d 	.word	0xfffffc0d
 8001cd4:	000007ff 	.word	0x000007ff
 8001cd8:	0000043e 	.word	0x0000043e
 8001cdc:	0000041e 	.word	0x0000041e

08001ce0 <__aeabi_f2d>:
 8001ce0:	b570      	push	{r4, r5, r6, lr}
 8001ce2:	0242      	lsls	r2, r0, #9
 8001ce4:	0043      	lsls	r3, r0, #1
 8001ce6:	0fc4      	lsrs	r4, r0, #31
 8001ce8:	20fe      	movs	r0, #254	@ 0xfe
 8001cea:	0e1b      	lsrs	r3, r3, #24
 8001cec:	1c59      	adds	r1, r3, #1
 8001cee:	0a55      	lsrs	r5, r2, #9
 8001cf0:	4208      	tst	r0, r1
 8001cf2:	d00c      	beq.n	8001d0e <__aeabi_f2d+0x2e>
 8001cf4:	21e0      	movs	r1, #224	@ 0xe0
 8001cf6:	0089      	lsls	r1, r1, #2
 8001cf8:	468c      	mov	ip, r1
 8001cfa:	076d      	lsls	r5, r5, #29
 8001cfc:	0b12      	lsrs	r2, r2, #12
 8001cfe:	4463      	add	r3, ip
 8001d00:	051b      	lsls	r3, r3, #20
 8001d02:	4313      	orrs	r3, r2
 8001d04:	07e4      	lsls	r4, r4, #31
 8001d06:	4323      	orrs	r3, r4
 8001d08:	0028      	movs	r0, r5
 8001d0a:	0019      	movs	r1, r3
 8001d0c:	bd70      	pop	{r4, r5, r6, pc}
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d114      	bne.n	8001d3c <__aeabi_f2d+0x5c>
 8001d12:	2d00      	cmp	r5, #0
 8001d14:	d01b      	beq.n	8001d4e <__aeabi_f2d+0x6e>
 8001d16:	0028      	movs	r0, r5
 8001d18:	f000 f8ac 	bl	8001e74 <__clzsi2>
 8001d1c:	280a      	cmp	r0, #10
 8001d1e:	dc1c      	bgt.n	8001d5a <__aeabi_f2d+0x7a>
 8001d20:	230b      	movs	r3, #11
 8001d22:	002a      	movs	r2, r5
 8001d24:	1a1b      	subs	r3, r3, r0
 8001d26:	40da      	lsrs	r2, r3
 8001d28:	0003      	movs	r3, r0
 8001d2a:	3315      	adds	r3, #21
 8001d2c:	409d      	lsls	r5, r3
 8001d2e:	4b0e      	ldr	r3, [pc, #56]	@ (8001d68 <__aeabi_f2d+0x88>)
 8001d30:	0312      	lsls	r2, r2, #12
 8001d32:	1a1b      	subs	r3, r3, r0
 8001d34:	055b      	lsls	r3, r3, #21
 8001d36:	0b12      	lsrs	r2, r2, #12
 8001d38:	0d5b      	lsrs	r3, r3, #21
 8001d3a:	e7e1      	b.n	8001d00 <__aeabi_f2d+0x20>
 8001d3c:	2d00      	cmp	r5, #0
 8001d3e:	d009      	beq.n	8001d54 <__aeabi_f2d+0x74>
 8001d40:	0b13      	lsrs	r3, r2, #12
 8001d42:	2280      	movs	r2, #128	@ 0x80
 8001d44:	0312      	lsls	r2, r2, #12
 8001d46:	431a      	orrs	r2, r3
 8001d48:	076d      	lsls	r5, r5, #29
 8001d4a:	4b08      	ldr	r3, [pc, #32]	@ (8001d6c <__aeabi_f2d+0x8c>)
 8001d4c:	e7d8      	b.n	8001d00 <__aeabi_f2d+0x20>
 8001d4e:	2300      	movs	r3, #0
 8001d50:	2200      	movs	r2, #0
 8001d52:	e7d5      	b.n	8001d00 <__aeabi_f2d+0x20>
 8001d54:	2200      	movs	r2, #0
 8001d56:	4b05      	ldr	r3, [pc, #20]	@ (8001d6c <__aeabi_f2d+0x8c>)
 8001d58:	e7d2      	b.n	8001d00 <__aeabi_f2d+0x20>
 8001d5a:	0003      	movs	r3, r0
 8001d5c:	002a      	movs	r2, r5
 8001d5e:	3b0b      	subs	r3, #11
 8001d60:	409a      	lsls	r2, r3
 8001d62:	2500      	movs	r5, #0
 8001d64:	e7e3      	b.n	8001d2e <__aeabi_f2d+0x4e>
 8001d66:	46c0      	nop			@ (mov r8, r8)
 8001d68:	00000389 	.word	0x00000389
 8001d6c:	000007ff 	.word	0x000007ff

08001d70 <__aeabi_d2f>:
 8001d70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d72:	004b      	lsls	r3, r1, #1
 8001d74:	030f      	lsls	r7, r1, #12
 8001d76:	0d5b      	lsrs	r3, r3, #21
 8001d78:	4c3a      	ldr	r4, [pc, #232]	@ (8001e64 <__aeabi_d2f+0xf4>)
 8001d7a:	0f45      	lsrs	r5, r0, #29
 8001d7c:	b083      	sub	sp, #12
 8001d7e:	0a7f      	lsrs	r7, r7, #9
 8001d80:	1c5e      	adds	r6, r3, #1
 8001d82:	432f      	orrs	r7, r5
 8001d84:	9000      	str	r0, [sp, #0]
 8001d86:	9101      	str	r1, [sp, #4]
 8001d88:	0fca      	lsrs	r2, r1, #31
 8001d8a:	00c5      	lsls	r5, r0, #3
 8001d8c:	4226      	tst	r6, r4
 8001d8e:	d00b      	beq.n	8001da8 <__aeabi_d2f+0x38>
 8001d90:	4935      	ldr	r1, [pc, #212]	@ (8001e68 <__aeabi_d2f+0xf8>)
 8001d92:	185c      	adds	r4, r3, r1
 8001d94:	2cfe      	cmp	r4, #254	@ 0xfe
 8001d96:	dd13      	ble.n	8001dc0 <__aeabi_d2f+0x50>
 8001d98:	20ff      	movs	r0, #255	@ 0xff
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	05c0      	lsls	r0, r0, #23
 8001d9e:	4318      	orrs	r0, r3
 8001da0:	07d2      	lsls	r2, r2, #31
 8001da2:	4310      	orrs	r0, r2
 8001da4:	b003      	add	sp, #12
 8001da6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001da8:	433d      	orrs	r5, r7
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d101      	bne.n	8001db2 <__aeabi_d2f+0x42>
 8001dae:	2000      	movs	r0, #0
 8001db0:	e7f4      	b.n	8001d9c <__aeabi_d2f+0x2c>
 8001db2:	2d00      	cmp	r5, #0
 8001db4:	d0f0      	beq.n	8001d98 <__aeabi_d2f+0x28>
 8001db6:	2380      	movs	r3, #128	@ 0x80
 8001db8:	03db      	lsls	r3, r3, #15
 8001dba:	20ff      	movs	r0, #255	@ 0xff
 8001dbc:	433b      	orrs	r3, r7
 8001dbe:	e7ed      	b.n	8001d9c <__aeabi_d2f+0x2c>
 8001dc0:	2c00      	cmp	r4, #0
 8001dc2:	dd0c      	ble.n	8001dde <__aeabi_d2f+0x6e>
 8001dc4:	9b00      	ldr	r3, [sp, #0]
 8001dc6:	00ff      	lsls	r7, r7, #3
 8001dc8:	019b      	lsls	r3, r3, #6
 8001dca:	1e58      	subs	r0, r3, #1
 8001dcc:	4183      	sbcs	r3, r0
 8001dce:	0f69      	lsrs	r1, r5, #29
 8001dd0:	433b      	orrs	r3, r7
 8001dd2:	430b      	orrs	r3, r1
 8001dd4:	0759      	lsls	r1, r3, #29
 8001dd6:	d127      	bne.n	8001e28 <__aeabi_d2f+0xb8>
 8001dd8:	08db      	lsrs	r3, r3, #3
 8001dda:	b2e0      	uxtb	r0, r4
 8001ddc:	e7de      	b.n	8001d9c <__aeabi_d2f+0x2c>
 8001dde:	0021      	movs	r1, r4
 8001de0:	3117      	adds	r1, #23
 8001de2:	db31      	blt.n	8001e48 <__aeabi_d2f+0xd8>
 8001de4:	2180      	movs	r1, #128	@ 0x80
 8001de6:	201e      	movs	r0, #30
 8001de8:	0409      	lsls	r1, r1, #16
 8001dea:	4339      	orrs	r1, r7
 8001dec:	1b00      	subs	r0, r0, r4
 8001dee:	281f      	cmp	r0, #31
 8001df0:	dd2d      	ble.n	8001e4e <__aeabi_d2f+0xde>
 8001df2:	2602      	movs	r6, #2
 8001df4:	4276      	negs	r6, r6
 8001df6:	1b34      	subs	r4, r6, r4
 8001df8:	000e      	movs	r6, r1
 8001dfa:	40e6      	lsrs	r6, r4
 8001dfc:	0034      	movs	r4, r6
 8001dfe:	2820      	cmp	r0, #32
 8001e00:	d004      	beq.n	8001e0c <__aeabi_d2f+0x9c>
 8001e02:	481a      	ldr	r0, [pc, #104]	@ (8001e6c <__aeabi_d2f+0xfc>)
 8001e04:	4684      	mov	ip, r0
 8001e06:	4463      	add	r3, ip
 8001e08:	4099      	lsls	r1, r3
 8001e0a:	430d      	orrs	r5, r1
 8001e0c:	002b      	movs	r3, r5
 8001e0e:	1e59      	subs	r1, r3, #1
 8001e10:	418b      	sbcs	r3, r1
 8001e12:	4323      	orrs	r3, r4
 8001e14:	0759      	lsls	r1, r3, #29
 8001e16:	d003      	beq.n	8001e20 <__aeabi_d2f+0xb0>
 8001e18:	210f      	movs	r1, #15
 8001e1a:	4019      	ands	r1, r3
 8001e1c:	2904      	cmp	r1, #4
 8001e1e:	d10b      	bne.n	8001e38 <__aeabi_d2f+0xc8>
 8001e20:	019b      	lsls	r3, r3, #6
 8001e22:	2000      	movs	r0, #0
 8001e24:	0a5b      	lsrs	r3, r3, #9
 8001e26:	e7b9      	b.n	8001d9c <__aeabi_d2f+0x2c>
 8001e28:	210f      	movs	r1, #15
 8001e2a:	4019      	ands	r1, r3
 8001e2c:	2904      	cmp	r1, #4
 8001e2e:	d104      	bne.n	8001e3a <__aeabi_d2f+0xca>
 8001e30:	019b      	lsls	r3, r3, #6
 8001e32:	0a5b      	lsrs	r3, r3, #9
 8001e34:	b2e0      	uxtb	r0, r4
 8001e36:	e7b1      	b.n	8001d9c <__aeabi_d2f+0x2c>
 8001e38:	2400      	movs	r4, #0
 8001e3a:	3304      	adds	r3, #4
 8001e3c:	0159      	lsls	r1, r3, #5
 8001e3e:	d5f7      	bpl.n	8001e30 <__aeabi_d2f+0xc0>
 8001e40:	3401      	adds	r4, #1
 8001e42:	2300      	movs	r3, #0
 8001e44:	b2e0      	uxtb	r0, r4
 8001e46:	e7a9      	b.n	8001d9c <__aeabi_d2f+0x2c>
 8001e48:	2000      	movs	r0, #0
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	e7a6      	b.n	8001d9c <__aeabi_d2f+0x2c>
 8001e4e:	4c08      	ldr	r4, [pc, #32]	@ (8001e70 <__aeabi_d2f+0x100>)
 8001e50:	191c      	adds	r4, r3, r4
 8001e52:	002b      	movs	r3, r5
 8001e54:	40a5      	lsls	r5, r4
 8001e56:	40c3      	lsrs	r3, r0
 8001e58:	40a1      	lsls	r1, r4
 8001e5a:	1e68      	subs	r0, r5, #1
 8001e5c:	4185      	sbcs	r5, r0
 8001e5e:	4329      	orrs	r1, r5
 8001e60:	430b      	orrs	r3, r1
 8001e62:	e7d7      	b.n	8001e14 <__aeabi_d2f+0xa4>
 8001e64:	000007fe 	.word	0x000007fe
 8001e68:	fffffc80 	.word	0xfffffc80
 8001e6c:	fffffca2 	.word	0xfffffca2
 8001e70:	fffffc82 	.word	0xfffffc82

08001e74 <__clzsi2>:
 8001e74:	211c      	movs	r1, #28
 8001e76:	2301      	movs	r3, #1
 8001e78:	041b      	lsls	r3, r3, #16
 8001e7a:	4298      	cmp	r0, r3
 8001e7c:	d301      	bcc.n	8001e82 <__clzsi2+0xe>
 8001e7e:	0c00      	lsrs	r0, r0, #16
 8001e80:	3910      	subs	r1, #16
 8001e82:	0a1b      	lsrs	r3, r3, #8
 8001e84:	4298      	cmp	r0, r3
 8001e86:	d301      	bcc.n	8001e8c <__clzsi2+0x18>
 8001e88:	0a00      	lsrs	r0, r0, #8
 8001e8a:	3908      	subs	r1, #8
 8001e8c:	091b      	lsrs	r3, r3, #4
 8001e8e:	4298      	cmp	r0, r3
 8001e90:	d301      	bcc.n	8001e96 <__clzsi2+0x22>
 8001e92:	0900      	lsrs	r0, r0, #4
 8001e94:	3904      	subs	r1, #4
 8001e96:	a202      	add	r2, pc, #8	@ (adr r2, 8001ea0 <__clzsi2+0x2c>)
 8001e98:	5c10      	ldrb	r0, [r2, r0]
 8001e9a:	1840      	adds	r0, r0, r1
 8001e9c:	4770      	bx	lr
 8001e9e:	46c0      	nop			@ (mov r8, r8)
 8001ea0:	02020304 	.word	0x02020304
 8001ea4:	01010101 	.word	0x01010101
	...

08001eb0 <LCD_sendNibble_BareMetal>:

int row = 0;
int col = 0;

// Privte function
static void LCD_sendNibble_BareMetal(uint8_t data) {
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	0002      	movs	r2, r0
 8001eb8:	1dfb      	adds	r3, r7, #7
 8001eba:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, D4_Pin,
			(data & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001ebc:	1dfb      	adds	r3, r7, #7
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	b2da      	uxtb	r2, r3
	HAL_GPIO_WritePin(GPIOA, D4_Pin,
 8001ec6:	2390      	movs	r3, #144	@ 0x90
 8001ec8:	05db      	lsls	r3, r3, #23
 8001eca:	2120      	movs	r1, #32
 8001ecc:	0018      	movs	r0, r3
 8001ece:	f001 fd50 	bl	8003972 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, D5_Pin,
			(data & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001ed2:	1dfb      	adds	r3, r7, #7
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	105b      	asrs	r3, r3, #1
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	2201      	movs	r2, #1
 8001edc:	4013      	ands	r3, r2
 8001ede:	b2da      	uxtb	r2, r3
	HAL_GPIO_WritePin(GPIOA, D5_Pin,
 8001ee0:	2390      	movs	r3, #144	@ 0x90
 8001ee2:	05db      	lsls	r3, r3, #23
 8001ee4:	2140      	movs	r1, #64	@ 0x40
 8001ee6:	0018      	movs	r0, r3
 8001ee8:	f001 fd43 	bl	8003972 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, D6_Pin,
			(data & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001eec:	1dfb      	adds	r3, r7, #7
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	109b      	asrs	r3, r3, #2
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	b2da      	uxtb	r2, r3
	HAL_GPIO_WritePin(GPIOA, D6_Pin,
 8001efa:	2390      	movs	r3, #144	@ 0x90
 8001efc:	05db      	lsls	r3, r3, #23
 8001efe:	2180      	movs	r1, #128	@ 0x80
 8001f00:	0018      	movs	r0, r3
 8001f02:	f001 fd36 	bl	8003972 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, D7_Pin,
			(data & 0x08) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001f06:	1dfb      	adds	r3, r7, #7
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	10db      	asrs	r3, r3, #3
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	2201      	movs	r2, #1
 8001f10:	4013      	ands	r3, r2
 8001f12:	b2db      	uxtb	r3, r3
	HAL_GPIO_WritePin(GPIOB, D7_Pin,
 8001f14:	480c      	ldr	r0, [pc, #48]	@ (8001f48 <LCD_sendNibble_BareMetal+0x98>)
 8001f16:	001a      	movs	r2, r3
 8001f18:	2101      	movs	r1, #1
 8001f1a:	f001 fd2a 	bl	8003972 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOA, EN_Pin, GPIO_PIN_SET);
 8001f1e:	2390      	movs	r3, #144	@ 0x90
 8001f20:	05db      	lsls	r3, r3, #23
 8001f22:	2201      	movs	r2, #1
 8001f24:	2110      	movs	r1, #16
 8001f26:	0018      	movs	r0, r3
 8001f28:	f001 fd23 	bl	8003972 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001f2c:	2001      	movs	r0, #1
 8001f2e:	f001 fac1 	bl	80034b4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, EN_Pin, GPIO_PIN_RESET);
 8001f32:	2390      	movs	r3, #144	@ 0x90
 8001f34:	05db      	lsls	r3, r3, #23
 8001f36:	2200      	movs	r2, #0
 8001f38:	2110      	movs	r1, #16
 8001f3a:	0018      	movs	r0, r3
 8001f3c:	f001 fd19 	bl	8003972 <HAL_GPIO_WritePin>
}
 8001f40:	46c0      	nop			@ (mov r8, r8)
 8001f42:	46bd      	mov	sp, r7
 8001f44:	b002      	add	sp, #8
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	48000400 	.word	0x48000400

08001f4c <LCD_sendNibble>:

static void LCD_sendNibble(uint8_t data) {
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	0002      	movs	r2, r0
 8001f54:	1dfb      	adds	r3, r7, #7
 8001f56:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, D4_Pin,
			(data & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001f58:	1dfb      	adds	r3, r7, #7
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	4013      	ands	r3, r2
 8001f60:	b2da      	uxtb	r2, r3
	HAL_GPIO_WritePin(GPIOA, D4_Pin,
 8001f62:	2390      	movs	r3, #144	@ 0x90
 8001f64:	05db      	lsls	r3, r3, #23
 8001f66:	2120      	movs	r1, #32
 8001f68:	0018      	movs	r0, r3
 8001f6a:	f001 fd02 	bl	8003972 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, D5_Pin,
			(data & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001f6e:	1dfb      	adds	r3, r7, #7
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	105b      	asrs	r3, r3, #1
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	2201      	movs	r2, #1
 8001f78:	4013      	ands	r3, r2
 8001f7a:	b2da      	uxtb	r2, r3
	HAL_GPIO_WritePin(GPIOA, D5_Pin,
 8001f7c:	2390      	movs	r3, #144	@ 0x90
 8001f7e:	05db      	lsls	r3, r3, #23
 8001f80:	2140      	movs	r1, #64	@ 0x40
 8001f82:	0018      	movs	r0, r3
 8001f84:	f001 fcf5 	bl	8003972 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, D6_Pin,
			(data & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001f88:	1dfb      	adds	r3, r7, #7
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	109b      	asrs	r3, r3, #2
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	2201      	movs	r2, #1
 8001f92:	4013      	ands	r3, r2
 8001f94:	b2da      	uxtb	r2, r3
	HAL_GPIO_WritePin(GPIOA, D6_Pin,
 8001f96:	2390      	movs	r3, #144	@ 0x90
 8001f98:	05db      	lsls	r3, r3, #23
 8001f9a:	2180      	movs	r1, #128	@ 0x80
 8001f9c:	0018      	movs	r0, r3
 8001f9e:	f001 fce8 	bl	8003972 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, D7_Pin,
			(data & 0x08) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001fa2:	1dfb      	adds	r3, r7, #7
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	10db      	asrs	r3, r3, #3
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	2201      	movs	r2, #1
 8001fac:	4013      	ands	r3, r2
 8001fae:	b2db      	uxtb	r3, r3
	HAL_GPIO_WritePin(GPIOB, D7_Pin,
 8001fb0:	480c      	ldr	r0, [pc, #48]	@ (8001fe4 <LCD_sendNibble+0x98>)
 8001fb2:	001a      	movs	r2, r3
 8001fb4:	2101      	movs	r1, #1
 8001fb6:	f001 fcdc 	bl	8003972 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, EN_Pin, GPIO_PIN_SET);
 8001fba:	2390      	movs	r3, #144	@ 0x90
 8001fbc:	05db      	lsls	r3, r3, #23
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	2110      	movs	r1, #16
 8001fc2:	0018      	movs	r0, r3
 8001fc4:	f001 fcd5 	bl	8003972 <HAL_GPIO_WritePin>
	vTaskDelay(pdMS_TO_TICKS(5));
 8001fc8:	2005      	movs	r0, #5
 8001fca:	f003 fb57 	bl	800567c <vTaskDelay>
	HAL_GPIO_WritePin(GPIOA, EN_Pin, GPIO_PIN_RESET);
 8001fce:	2390      	movs	r3, #144	@ 0x90
 8001fd0:	05db      	lsls	r3, r3, #23
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	2110      	movs	r1, #16
 8001fd6:	0018      	movs	r0, r3
 8001fd8:	f001 fccb 	bl	8003972 <HAL_GPIO_WritePin>
}
 8001fdc:	46c0      	nop			@ (mov r8, r8)
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	b002      	add	sp, #8
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	48000400 	.word	0x48000400

08001fe8 <LCD_sendByte>:

static void LCD_sendByte(uint8_t data) {
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	0002      	movs	r2, r0
 8001ff0:	1dfb      	adds	r3, r7, #7
 8001ff2:	701a      	strb	r2, [r3, #0]
	LCD_sendNibble(data >> 4);
 8001ff4:	1dfb      	adds	r3, r7, #7
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	091b      	lsrs	r3, r3, #4
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	0018      	movs	r0, r3
 8001ffe:	f7ff ffa5 	bl	8001f4c <LCD_sendNibble>
	LCD_sendNibble(data);
 8002002:	1dfb      	adds	r3, r7, #7
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	0018      	movs	r0, r3
 8002008:	f7ff ffa0 	bl	8001f4c <LCD_sendNibble>
}
 800200c:	46c0      	nop			@ (mov r8, r8)
 800200e:	46bd      	mov	sp, r7
 8002010:	b002      	add	sp, #8
 8002012:	bd80      	pop	{r7, pc}

08002014 <LCD_sendByte_BareMetal>:

static void LCD_sendByte_BareMetal(uint8_t data) {
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	0002      	movs	r2, r0
 800201c:	1dfb      	adds	r3, r7, #7
 800201e:	701a      	strb	r2, [r3, #0]
	LCD_sendNibble_BareMetal(data >> 4);
 8002020:	1dfb      	adds	r3, r7, #7
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	091b      	lsrs	r3, r3, #4
 8002026:	b2db      	uxtb	r3, r3
 8002028:	0018      	movs	r0, r3
 800202a:	f7ff ff41 	bl	8001eb0 <LCD_sendNibble_BareMetal>
	LCD_sendNibble_BareMetal(data);
 800202e:	1dfb      	adds	r3, r7, #7
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	0018      	movs	r0, r3
 8002034:	f7ff ff3c 	bl	8001eb0 <LCD_sendNibble_BareMetal>
}
 8002038:	46c0      	nop			@ (mov r8, r8)
 800203a:	46bd      	mov	sp, r7
 800203c:	b002      	add	sp, #8
 800203e:	bd80      	pop	{r7, pc}

08002040 <LCD_sendCmd>:

static void LCD_sendCmd(uint8_t data) {
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	0002      	movs	r2, r0
 8002048:	1dfb      	adds	r3, r7, #7
 800204a:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, RS_Pin, GPIO_PIN_RESET);
 800204c:	2390      	movs	r3, #144	@ 0x90
 800204e:	05db      	lsls	r3, r3, #23
 8002050:	2200      	movs	r2, #0
 8002052:	2108      	movs	r1, #8
 8002054:	0018      	movs	r0, r3
 8002056:	f001 fc8c 	bl	8003972 <HAL_GPIO_WritePin>
	LCD_sendByte(data);
 800205a:	1dfb      	adds	r3, r7, #7
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	0018      	movs	r0, r3
 8002060:	f7ff ffc2 	bl	8001fe8 <LCD_sendByte>
}
 8002064:	46c0      	nop			@ (mov r8, r8)
 8002066:	46bd      	mov	sp, r7
 8002068:	b002      	add	sp, #8
 800206a:	bd80      	pop	{r7, pc}

0800206c <LCD_init>:

// Public function
void LCD_init() {
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
	HAL_Delay(20);
 8002070:	2014      	movs	r0, #20
 8002072:	f001 fa1f 	bl	80034b4 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOA, RS_Pin, GPIO_PIN_RESET);
 8002076:	2390      	movs	r3, #144	@ 0x90
 8002078:	05db      	lsls	r3, r3, #23
 800207a:	2200      	movs	r2, #0
 800207c:	2108      	movs	r1, #8
 800207e:	0018      	movs	r0, r3
 8002080:	f001 fc77 	bl	8003972 <HAL_GPIO_WritePin>
	LCD_sendByte_BareMetal(0x33);
 8002084:	2033      	movs	r0, #51	@ 0x33
 8002086:	f7ff ffc5 	bl	8002014 <LCD_sendByte_BareMetal>
	LCD_sendByte_BareMetal(0x32);
 800208a:	2032      	movs	r0, #50	@ 0x32
 800208c:	f7ff ffc2 	bl	8002014 <LCD_sendByte_BareMetal>
	LCD_sendByte_BareMetal(0x28);
 8002090:	2028      	movs	r0, #40	@ 0x28
 8002092:	f7ff ffbf 	bl	8002014 <LCD_sendByte_BareMetal>
	LCD_sendByte_BareMetal(0x06);
 8002096:	2006      	movs	r0, #6
 8002098:	f7ff ffbc 	bl	8002014 <LCD_sendByte_BareMetal>
	LCD_sendByte_BareMetal(0x0C);
 800209c:	200c      	movs	r0, #12
 800209e:	f7ff ffb9 	bl	8002014 <LCD_sendByte_BareMetal>
	LCD_sendByte_BareMetal(0x01);
 80020a2:	2001      	movs	r0, #1
 80020a4:	f7ff ffb6 	bl	8002014 <LCD_sendByte_BareMetal>
	HAL_Delay(2);
 80020a8:	2002      	movs	r0, #2
 80020aa:	f001 fa03 	bl	80034b4 <HAL_Delay>
}
 80020ae:	46c0      	nop			@ (mov r8, r8)
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <LCD_clear>:

void LCD_clear() {
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
	LCD_sendCmd(0x01);
 80020b8:	2001      	movs	r0, #1
 80020ba:	f7ff ffc1 	bl	8002040 <LCD_sendCmd>
	vTaskDelay(pdMS_TO_TICKS(5));
 80020be:	2005      	movs	r0, #5
 80020c0:	f003 fadc 	bl	800567c <vTaskDelay>
}
 80020c4:	46c0      	nop			@ (mov r8, r8)
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}

080020ca <LCD_setCursor>:

void LCD_setCursor(char row, char col) {
 80020ca:	b580      	push	{r7, lr}
 80020cc:	b084      	sub	sp, #16
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	0002      	movs	r2, r0
 80020d2:	1dfb      	adds	r3, r7, #7
 80020d4:	701a      	strb	r2, [r3, #0]
 80020d6:	1dbb      	adds	r3, r7, #6
 80020d8:	1c0a      	adds	r2, r1, #0
 80020da:	701a      	strb	r2, [r3, #0]
	char val = (row == 0) ? 0x00 : 0x40;
 80020dc:	1dfb      	adds	r3, r7, #7
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d101      	bne.n	80020e8 <LCD_setCursor+0x1e>
 80020e4:	2200      	movs	r2, #0
 80020e6:	e000      	b.n	80020ea <LCD_setCursor+0x20>
 80020e8:	2240      	movs	r2, #64	@ 0x40
 80020ea:	200f      	movs	r0, #15
 80020ec:	183b      	adds	r3, r7, r0
 80020ee:	701a      	strb	r2, [r3, #0]
	val += col;
 80020f0:	183b      	adds	r3, r7, r0
 80020f2:	1839      	adds	r1, r7, r0
 80020f4:	1dba      	adds	r2, r7, #6
 80020f6:	7809      	ldrb	r1, [r1, #0]
 80020f8:	7812      	ldrb	r2, [r2, #0]
 80020fa:	188a      	adds	r2, r1, r2
 80020fc:	701a      	strb	r2, [r3, #0]
	LCD_sendCmd(0x80 | val);
 80020fe:	183b      	adds	r3, r7, r0
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	2280      	movs	r2, #128	@ 0x80
 8002104:	4252      	negs	r2, r2
 8002106:	4313      	orrs	r3, r2
 8002108:	b2db      	uxtb	r3, r3
 800210a:	0018      	movs	r0, r3
 800210c:	f7ff ff98 	bl	8002040 <LCD_sendCmd>
}
 8002110:	46c0      	nop			@ (mov r8, r8)
 8002112:	46bd      	mov	sp, r7
 8002114:	b004      	add	sp, #16
 8002116:	bd80      	pop	{r7, pc}

08002118 <LCD_sendChar>:

void LCD_sendChar(uint8_t data) {
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	0002      	movs	r2, r0
 8002120:	1dfb      	adds	r3, r7, #7
 8002122:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, RS_Pin, GPIO_PIN_SET);
 8002124:	2390      	movs	r3, #144	@ 0x90
 8002126:	05db      	lsls	r3, r3, #23
 8002128:	2201      	movs	r2, #1
 800212a:	2108      	movs	r1, #8
 800212c:	0018      	movs	r0, r3
 800212e:	f001 fc20 	bl	8003972 <HAL_GPIO_WritePin>
	LCD_sendByte(data);
 8002132:	1dfb      	adds	r3, r7, #7
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	0018      	movs	r0, r3
 8002138:	f7ff ff56 	bl	8001fe8 <LCD_sendByte>
}
 800213c:	46c0      	nop			@ (mov r8, r8)
 800213e:	46bd      	mov	sp, r7
 8002140:	b002      	add	sp, #8
 8002142:	bd80      	pop	{r7, pc}

08002144 <LCD_puts>:

void LCD_puts(char *data) {
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
	while (data[0] != '\0') {
 800214c:	e007      	b.n	800215e <LCD_puts+0x1a>
		LCD_sendChar(data[0]);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	0018      	movs	r0, r3
 8002154:	f7ff ffe0 	bl	8002118 <LCD_sendChar>
		data++;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	3301      	adds	r3, #1
 800215c:	607b      	str	r3, [r7, #4]
	while (data[0] != '\0') {
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d1f3      	bne.n	800214e <LCD_puts+0xa>
	}
}
 8002166:	46c0      	nop			@ (mov r8, r8)
 8002168:	46c0      	nop			@ (mov r8, r8)
 800216a:	46bd      	mov	sp, r7
 800216c:	b002      	add	sp, #8
 800216e:	bd80      	pop	{r7, pc}

08002170 <App_RunCalculatorMode>:
 *      Author: ADMIN
 */

#include "app_main.h"

void App_RunCalculatorMode() {
 8002170:	b5b0      	push	{r4, r5, r7, lr}
 8002172:	b090      	sub	sp, #64	@ 0x40
 8002174:	af00      	add	r7, sp, #0
	keypad[0][3] = '*';
 8002176:	4b79      	ldr	r3, [pc, #484]	@ (800235c <App_RunCalculatorMode+0x1ec>)
 8002178:	222a      	movs	r2, #42	@ 0x2a
 800217a:	70da      	strb	r2, [r3, #3]
	keypad[2][4] = 'B';
 800217c:	4b77      	ldr	r3, [pc, #476]	@ (800235c <App_RunCalculatorMode+0x1ec>)
 800217e:	2242      	movs	r2, #66	@ 0x42
 8002180:	739a      	strb	r2, [r3, #14]
	char keyToDisplay;
	char buffer[17] = "";
 8002182:	231c      	movs	r3, #28
 8002184:	18fb      	adds	r3, r7, r3
 8002186:	0018      	movs	r0, r3
 8002188:	2311      	movs	r3, #17
 800218a:	001a      	movs	r2, r3
 800218c:	2100      	movs	r1, #0
 800218e:	f004 fab9 	bl	8006704 <memset>
	char bufferToShow[2] = "";
 8002192:	2318      	movs	r3, #24
 8002194:	18fb      	adds	r3, r7, r3
 8002196:	2200      	movs	r2, #0
 8002198:	801a      	strh	r2, [r3, #0]
	int i = 0;
 800219a:	2300      	movs	r3, #0
 800219c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	int exit = 0;
 800219e:	2300      	movs	r3, #0
 80021a0:	63bb      	str	r3, [r7, #56]	@ 0x38
	while (1) {
		keyToDisplay = keyPad_scan();
 80021a2:	2537      	movs	r5, #55	@ 0x37
 80021a4:	197c      	adds	r4, r7, r5
 80021a6:	f000 fe95 	bl	8002ed4 <keyPad_scan>
 80021aa:	0003      	movs	r3, r0
 80021ac:	7023      	strb	r3, [r4, #0]
		if (keyToDisplay != 'c') {
 80021ae:	197b      	adds	r3, r7, r5
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	2b63      	cmp	r3, #99	@ 0x63
 80021b4:	d0f5      	beq.n	80021a2 <App_RunCalculatorMode+0x32>
			if (keyToDisplay == '=') {
 80021b6:	197b      	adds	r3, r7, r5
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	2b3d      	cmp	r3, #61	@ 0x3d
 80021bc:	d157      	bne.n	800226e <App_RunCalculatorMode+0xfe>
				if (exit == 0) {
 80021be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d14b      	bne.n	800225c <App_RunCalculatorMode+0xec>
					buffer[i] = '\0';
 80021c4:	211c      	movs	r1, #28
 80021c6:	187a      	adds	r2, r7, r1
 80021c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80021ca:	18d3      	adds	r3, r2, r3
 80021cc:	2200      	movs	r2, #0
 80021ce:	701a      	strb	r2, [r3, #0]
					if (i > 0) { // chỉ xử lý khi có dữ liệu
 80021d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	dd3d      	ble.n	8002252 <App_RunCalculatorMode+0xe2>
						float result = Calculate(buffer);
 80021d6:	187b      	adds	r3, r7, r1
 80021d8:	0018      	movs	r0, r3
 80021da:	f000 fb62 	bl	80028a2 <Calculate>
 80021de:	1c03      	adds	r3, r0, #0
 80021e0:	633b      	str	r3, [r7, #48]	@ 0x30
						char ketqua[17];
						if (fabs(result - (int) result) < 1e-9) {
 80021e2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80021e4:	f7ff f904 	bl	80013f0 <__aeabi_f2iz>
 80021e8:	0003      	movs	r3, r0
 80021ea:	0018      	movs	r0, r3
 80021ec:	f7ff f920 	bl	8001430 <__aeabi_i2f>
 80021f0:	1c03      	adds	r3, r0, #0
 80021f2:	1c19      	adds	r1, r3, #0
 80021f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80021f6:	f7fe fe97 	bl	8000f28 <__aeabi_fsub>
 80021fa:	1c03      	adds	r3, r0, #0
 80021fc:	005b      	lsls	r3, r3, #1
 80021fe:	085b      	lsrs	r3, r3, #1
 8002200:	1c18      	adds	r0, r3, #0
 8002202:	f7ff fd6d 	bl	8001ce0 <__aeabi_f2d>
 8002206:	4a56      	ldr	r2, [pc, #344]	@ (8002360 <App_RunCalculatorMode+0x1f0>)
 8002208:	4b56      	ldr	r3, [pc, #344]	@ (8002364 <App_RunCalculatorMode+0x1f4>)
 800220a:	f7fe f911 	bl	8000430 <__aeabi_dcmplt>
 800220e:	1e03      	subs	r3, r0, #0
 8002210:	d008      	beq.n	8002224 <App_RunCalculatorMode+0xb4>
							int_to_str((long) result, ketqua, 10);
 8002212:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002214:	f7ff f8ec 	bl	80013f0 <__aeabi_f2iz>
 8002218:	1d3b      	adds	r3, r7, #4
 800221a:	220a      	movs	r2, #10
 800221c:	0019      	movs	r1, r3
 800221e:	f000 fd0d 	bl	8002c3c <int_to_str>
 8002222:	e005      	b.n	8002230 <App_RunCalculatorMode+0xc0>
						} else {
							float_to_str(result, ketqua, 2);
 8002224:	1d39      	adds	r1, r7, #4
 8002226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002228:	2202      	movs	r2, #2
 800222a:	1c18      	adds	r0, r3, #0
 800222c:	f000 fd6e 	bl	8002d0c <float_to_str>
						}
						LCD_setCursor(1, 16 - strlen(ketqua));
 8002230:	1d3b      	adds	r3, r7, #4
 8002232:	0018      	movs	r0, r3
 8002234:	f7fd ff68 	bl	8000108 <strlen>
 8002238:	0003      	movs	r3, r0
 800223a:	b2db      	uxtb	r3, r3
 800223c:	2210      	movs	r2, #16
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	b2db      	uxtb	r3, r3
 8002242:	0019      	movs	r1, r3
 8002244:	2001      	movs	r0, #1
 8002246:	f7ff ff40 	bl	80020ca <LCD_setCursor>
						LCD_puts(ketqua);
 800224a:	1d3b      	adds	r3, r7, #4
 800224c:	0018      	movs	r0, r3
 800224e:	f7ff ff79 	bl	8002144 <LCD_puts>
					}
					i = 0;
 8002252:	2300      	movs	r3, #0
 8002254:	63fb      	str	r3, [r7, #60]	@ 0x3c
					exit = 1;
 8002256:	2301      	movs	r3, #1
 8002258:	63bb      	str	r3, [r7, #56]	@ 0x38
 800225a:	e7a2      	b.n	80021a2 <App_RunCalculatorMode+0x32>
				} else {
					LCD_clear();
 800225c:	f7ff ff2a 	bl	80020b4 <LCD_clear>
					row = 0;
 8002260:	4b41      	ldr	r3, [pc, #260]	@ (8002368 <App_RunCalculatorMode+0x1f8>)
 8002262:	2200      	movs	r2, #0
 8002264:	601a      	str	r2, [r3, #0]
					col = 0;
 8002266:	4b41      	ldr	r3, [pc, #260]	@ (800236c <App_RunCalculatorMode+0x1fc>)
 8002268:	2200      	movs	r2, #0
 800226a:	601a      	str	r2, [r3, #0]
					break;
 800226c:	e071      	b.n	8002352 <App_RunCalculatorMode+0x1e2>
				}
			}

			else if (keyToDisplay == 'C') {
 800226e:	2337      	movs	r3, #55	@ 0x37
 8002270:	18fb      	adds	r3, r7, r3
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	2b43      	cmp	r3, #67	@ 0x43
 8002276:	d112      	bne.n	800229e <App_RunCalculatorMode+0x12e>
				LCD_clear();
 8002278:	f7ff ff1c 	bl	80020b4 <LCD_clear>
				buffer[0] = '\0';
 800227c:	231c      	movs	r3, #28
 800227e:	18fb      	adds	r3, r7, r3
 8002280:	2200      	movs	r2, #0
 8002282:	701a      	strb	r2, [r3, #0]
				bufferToShow[0] = '\0';
 8002284:	2318      	movs	r3, #24
 8002286:	18fb      	adds	r3, r7, r3
 8002288:	2200      	movs	r2, #0
 800228a:	701a      	strb	r2, [r3, #0]
				row = 0;
 800228c:	4b36      	ldr	r3, [pc, #216]	@ (8002368 <App_RunCalculatorMode+0x1f8>)
 800228e:	2200      	movs	r2, #0
 8002290:	601a      	str	r2, [r3, #0]
				col = 0;
 8002292:	4b36      	ldr	r3, [pc, #216]	@ (800236c <App_RunCalculatorMode+0x1fc>)
 8002294:	2200      	movs	r2, #0
 8002296:	601a      	str	r2, [r3, #0]
				exit = 0;
 8002298:	2300      	movs	r3, #0
 800229a:	63bb      	str	r3, [r7, #56]	@ 0x38
				continue;
 800229c:	e058      	b.n	8002350 <App_RunCalculatorMode+0x1e0>
			}

			else if (keyToDisplay == 'B') {
 800229e:	2337      	movs	r3, #55	@ 0x37
 80022a0:	18fb      	adds	r3, r7, r3
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	2b42      	cmp	r3, #66	@ 0x42
 80022a6:	d123      	bne.n	80022f0 <App_RunCalculatorMode+0x180>
				if (i > 0) {
 80022a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	dc00      	bgt.n	80022b0 <App_RunCalculatorMode+0x140>
 80022ae:	e778      	b.n	80021a2 <App_RunCalculatorMode+0x32>
					i--;
 80022b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022b2:	3b01      	subs	r3, #1
 80022b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
					col--;
 80022b6:	4b2d      	ldr	r3, [pc, #180]	@ (800236c <App_RunCalculatorMode+0x1fc>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	1e5a      	subs	r2, r3, #1
 80022bc:	4b2b      	ldr	r3, [pc, #172]	@ (800236c <App_RunCalculatorMode+0x1fc>)
 80022be:	601a      	str	r2, [r3, #0]
					buffer[i] = '\0';
 80022c0:	231c      	movs	r3, #28
 80022c2:	18fa      	adds	r2, r7, r3
 80022c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022c6:	18d3      	adds	r3, r2, r3
 80022c8:	2200      	movs	r2, #0
 80022ca:	701a      	strb	r2, [r3, #0]

					LCD_setCursor(0, col);
 80022cc:	4b27      	ldr	r3, [pc, #156]	@ (800236c <App_RunCalculatorMode+0x1fc>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	0019      	movs	r1, r3
 80022d4:	2000      	movs	r0, #0
 80022d6:	f7ff fef8 	bl	80020ca <LCD_setCursor>
					LCD_sendChar(' ');
 80022da:	2020      	movs	r0, #32
 80022dc:	f7ff ff1c 	bl	8002118 <LCD_sendChar>
					LCD_setCursor(0, col);
 80022e0:	4b22      	ldr	r3, [pc, #136]	@ (800236c <App_RunCalculatorMode+0x1fc>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	0019      	movs	r1, r3
 80022e8:	2000      	movs	r0, #0
 80022ea:	f7ff feee 	bl	80020ca <LCD_setCursor>
 80022ee:	e758      	b.n	80021a2 <App_RunCalculatorMode+0x32>
				}
			} else {
				buffer[i] = keyToDisplay;
 80022f0:	231c      	movs	r3, #28
 80022f2:	18fa      	adds	r2, r7, r3
 80022f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022f6:	18d3      	adds	r3, r2, r3
 80022f8:	2137      	movs	r1, #55	@ 0x37
 80022fa:	187a      	adds	r2, r7, r1
 80022fc:	7812      	ldrb	r2, [r2, #0]
 80022fe:	701a      	strb	r2, [r3, #0]
				bufferToShow[0] = keyToDisplay;
 8002300:	2418      	movs	r4, #24
 8002302:	193b      	adds	r3, r7, r4
 8002304:	187a      	adds	r2, r7, r1
 8002306:	7812      	ldrb	r2, [r2, #0]
 8002308:	701a      	strb	r2, [r3, #0]
				bufferToShow[1] = '\0';
 800230a:	193b      	adds	r3, r7, r4
 800230c:	2200      	movs	r2, #0
 800230e:	705a      	strb	r2, [r3, #1]
				LCD_setCursor(0, col);
 8002310:	4b16      	ldr	r3, [pc, #88]	@ (800236c <App_RunCalculatorMode+0x1fc>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	b2db      	uxtb	r3, r3
 8002316:	0019      	movs	r1, r3
 8002318:	2000      	movs	r0, #0
 800231a:	f7ff fed6 	bl	80020ca <LCD_setCursor>
				LCD_puts(bufferToShow);
 800231e:	193b      	adds	r3, r7, r4
 8002320:	0018      	movs	r0, r3
 8002322:	f7ff ff0f 	bl	8002144 <LCD_puts>
				col++;
 8002326:	4b11      	ldr	r3, [pc, #68]	@ (800236c <App_RunCalculatorMode+0x1fc>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	1c5a      	adds	r2, r3, #1
 800232c:	4b0f      	ldr	r3, [pc, #60]	@ (800236c <App_RunCalculatorMode+0x1fc>)
 800232e:	601a      	str	r2, [r3, #0]
				i++;
 8002330:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002332:	3301      	adds	r3, #1
 8002334:	63fb      	str	r3, [r7, #60]	@ 0x3c
				if (col >= 16) {
 8002336:	4b0d      	ldr	r3, [pc, #52]	@ (800236c <App_RunCalculatorMode+0x1fc>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	2b0f      	cmp	r3, #15
 800233c:	dd02      	ble.n	8002344 <App_RunCalculatorMode+0x1d4>
					col = 0;
 800233e:	4b0b      	ldr	r3, [pc, #44]	@ (800236c <App_RunCalculatorMode+0x1fc>)
 8002340:	2200      	movs	r2, #0
 8002342:	601a      	str	r2, [r3, #0]
				}
				if (i >= sizeof(buffer) - 1) {
 8002344:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002346:	2b0f      	cmp	r3, #15
 8002348:	d800      	bhi.n	800234c <App_RunCalculatorMode+0x1dc>
 800234a:	e72a      	b.n	80021a2 <App_RunCalculatorMode+0x32>
					i = 0;
 800234c:	2300      	movs	r3, #0
 800234e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		keyToDisplay = keyPad_scan();
 8002350:	e727      	b.n	80021a2 <App_RunCalculatorMode+0x32>
				}
			}
		}
	}
}
 8002352:	46c0      	nop			@ (mov r8, r8)
 8002354:	46bd      	mov	sp, r7
 8002356:	b010      	add	sp, #64	@ 0x40
 8002358:	bdb0      	pop	{r4, r5, r7, pc}
 800235a:	46c0      	nop			@ (mov r8, r8)
 800235c:	20000000 	.word	0x20000000
 8002360:	e826d695 	.word	0xe826d695
 8002364:	3e112e0b 	.word	0x3e112e0b
 8002368:	20000078 	.word	0x20000078
 800236c:	2000007c 	.word	0x2000007c

08002370 <App_RunSolverMode>:

void App_RunSolverMode() {
 8002370:	b5b0      	push	{r4, r5, r7, lr}
 8002372:	b088      	sub	sp, #32
 8002374:	af00      	add	r7, sp, #0
	keypad[0][3] = 'x';
 8002376:	4b41      	ldr	r3, [pc, #260]	@ (800247c <App_RunSolverMode+0x10c>)
 8002378:	2278      	movs	r2, #120	@ 0x78
 800237a:	70da      	strb	r2, [r3, #3]
	keypad[2][4] = '*';
 800237c:	4b3f      	ldr	r3, [pc, #252]	@ (800247c <App_RunSolverMode+0x10c>)
 800237e:	222a      	movs	r2, #42	@ 0x2a
 8002380:	739a      	strb	r2, [r3, #14]
	char keyMode2;
	int exit = 0;
 8002382:	2300      	movs	r3, #0
 8002384:	61fb      	str	r3, [r7, #28]
	int i = 0;
 8002386:	2300      	movs	r3, #0
 8002388:	61bb      	str	r3, [r7, #24]
	char buffer[17] = "";
 800238a:	1d3b      	adds	r3, r7, #4
 800238c:	0018      	movs	r0, r3
 800238e:	2311      	movs	r3, #17
 8002390:	001a      	movs	r2, r3
 8002392:	2100      	movs	r1, #0
 8002394:	f004 f9b6 	bl	8006704 <memset>
	char bufferToShow[2] = "";
 8002398:	003b      	movs	r3, r7
 800239a:	2200      	movs	r2, #0
 800239c:	801a      	strh	r2, [r3, #0]
	while (1) {
		keyMode2 = keyPad_scan();
 800239e:	2517      	movs	r5, #23
 80023a0:	197c      	adds	r4, r7, r5
 80023a2:	f000 fd97 	bl	8002ed4 <keyPad_scan>
 80023a6:	0003      	movs	r3, r0
 80023a8:	7023      	strb	r3, [r4, #0]
		if (keyMode2 != 'c') {
 80023aa:	197b      	adds	r3, r7, r5
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	2b63      	cmp	r3, #99	@ 0x63
 80023b0:	d0f5      	beq.n	800239e <App_RunSolverMode+0x2e>
			if (keyMode2 == '=') {
 80023b2:	197b      	adds	r3, r7, r5
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	2b3d      	cmp	r3, #61	@ 0x3d
 80023b8:	d115      	bne.n	80023e6 <App_RunSolverMode+0x76>
				if (exit == 0) {
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d109      	bne.n	80023d4 <App_RunSolverMode+0x64>
					if (i > 0) {
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	dd03      	ble.n	80023ce <App_RunSolverMode+0x5e>
						solve_the_equation(buffer);
 80023c6:	1d3b      	adds	r3, r7, #4
 80023c8:	0018      	movs	r0, r3
 80023ca:	f000 fb31 	bl	8002a30 <solve_the_equation>
					}
					exit = 1;
 80023ce:	2301      	movs	r3, #1
 80023d0:	61fb      	str	r3, [r7, #28]
 80023d2:	e7e4      	b.n	800239e <App_RunSolverMode+0x2e>
				} else {
					LCD_clear();
 80023d4:	f7ff fe6e 	bl	80020b4 <LCD_clear>
					col = 0;
 80023d8:	4b29      	ldr	r3, [pc, #164]	@ (8002480 <App_RunSolverMode+0x110>)
 80023da:	2200      	movs	r2, #0
 80023dc:	601a      	str	r2, [r3, #0]
					row = 0;
 80023de:	4b29      	ldr	r3, [pc, #164]	@ (8002484 <App_RunSolverMode+0x114>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	601a      	str	r2, [r3, #0]
					break;
 80023e4:	e045      	b.n	8002472 <App_RunSolverMode+0x102>
				}
			} else if (keyMode2 == 'C') {
 80023e6:	2317      	movs	r3, #23
 80023e8:	18fb      	adds	r3, r7, r3
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	2b43      	cmp	r3, #67	@ 0x43
 80023ee:	d112      	bne.n	8002416 <App_RunSolverMode+0xa6>
				LCD_clear();
 80023f0:	f7ff fe60 	bl	80020b4 <LCD_clear>
				buffer[0] = '\0';
 80023f4:	1d3b      	adds	r3, r7, #4
 80023f6:	2200      	movs	r2, #0
 80023f8:	701a      	strb	r2, [r3, #0]
				bufferToShow[0] = '\0';
 80023fa:	003b      	movs	r3, r7
 80023fc:	2200      	movs	r2, #0
 80023fe:	701a      	strb	r2, [r3, #0]
				row = 0;
 8002400:	4b20      	ldr	r3, [pc, #128]	@ (8002484 <App_RunSolverMode+0x114>)
 8002402:	2200      	movs	r2, #0
 8002404:	601a      	str	r2, [r3, #0]
				col = 0;
 8002406:	4b1e      	ldr	r3, [pc, #120]	@ (8002480 <App_RunSolverMode+0x110>)
 8002408:	2200      	movs	r2, #0
 800240a:	601a      	str	r2, [r3, #0]
				i = 0;
 800240c:	2300      	movs	r3, #0
 800240e:	61bb      	str	r3, [r7, #24]
				exit = 0;
 8002410:	2300      	movs	r3, #0
 8002412:	61fb      	str	r3, [r7, #28]
				continue;
 8002414:	e02c      	b.n	8002470 <App_RunSolverMode+0x100>
			} else {
				buffer[i] = keyMode2;
 8002416:	1d3a      	adds	r2, r7, #4
 8002418:	69bb      	ldr	r3, [r7, #24]
 800241a:	18d3      	adds	r3, r2, r3
 800241c:	2117      	movs	r1, #23
 800241e:	187a      	adds	r2, r7, r1
 8002420:	7812      	ldrb	r2, [r2, #0]
 8002422:	701a      	strb	r2, [r3, #0]
				bufferToShow[0] = keyMode2;
 8002424:	003b      	movs	r3, r7
 8002426:	187a      	adds	r2, r7, r1
 8002428:	7812      	ldrb	r2, [r2, #0]
 800242a:	701a      	strb	r2, [r3, #0]
				bufferToShow[1] = '\0';
 800242c:	003b      	movs	r3, r7
 800242e:	2200      	movs	r2, #0
 8002430:	705a      	strb	r2, [r3, #1]
				LCD_setCursor(0, col);
 8002432:	4b13      	ldr	r3, [pc, #76]	@ (8002480 <App_RunSolverMode+0x110>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	b2db      	uxtb	r3, r3
 8002438:	0019      	movs	r1, r3
 800243a:	2000      	movs	r0, #0
 800243c:	f7ff fe45 	bl	80020ca <LCD_setCursor>
				LCD_puts(bufferToShow);
 8002440:	003b      	movs	r3, r7
 8002442:	0018      	movs	r0, r3
 8002444:	f7ff fe7e 	bl	8002144 <LCD_puts>
				col++;
 8002448:	4b0d      	ldr	r3, [pc, #52]	@ (8002480 <App_RunSolverMode+0x110>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	1c5a      	adds	r2, r3, #1
 800244e:	4b0c      	ldr	r3, [pc, #48]	@ (8002480 <App_RunSolverMode+0x110>)
 8002450:	601a      	str	r2, [r3, #0]
				i++;
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	3301      	adds	r3, #1
 8002456:	61bb      	str	r3, [r7, #24]
				if (col >= 16) {
 8002458:	4b09      	ldr	r3, [pc, #36]	@ (8002480 <App_RunSolverMode+0x110>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2b0f      	cmp	r3, #15
 800245e:	dd02      	ble.n	8002466 <App_RunSolverMode+0xf6>
					col = 0;
 8002460:	4b07      	ldr	r3, [pc, #28]	@ (8002480 <App_RunSolverMode+0x110>)
 8002462:	2200      	movs	r2, #0
 8002464:	601a      	str	r2, [r3, #0]
				}
				if (i >= sizeof(buffer) - 1) {
 8002466:	69bb      	ldr	r3, [r7, #24]
 8002468:	2b0f      	cmp	r3, #15
 800246a:	d998      	bls.n	800239e <App_RunSolverMode+0x2e>
					i = 0;
 800246c:	2300      	movs	r3, #0
 800246e:	61bb      	str	r3, [r7, #24]
		keyMode2 = keyPad_scan();
 8002470:	e795      	b.n	800239e <App_RunSolverMode+0x2e>
				}
			}
		}
	}
}
 8002472:	46c0      	nop			@ (mov r8, r8)
 8002474:	46bd      	mov	sp, r7
 8002476:	b008      	add	sp, #32
 8002478:	bdb0      	pop	{r4, r5, r7, pc}
 800247a:	46c0      	nop			@ (mov r8, r8)
 800247c:	20000000 	.word	0x20000000
 8002480:	2000007c 	.word	0x2000007c
 8002484:	20000078 	.word	0x20000078

08002488 <eval_simple>:
 */

#include "calculator_engine.h"

//Private function
static float eval_simple(char *expr) {
 8002488:	b5b0      	push	{r4, r5, r7, lr}
 800248a:	b09e      	sub	sp, #120	@ 0x78
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
	float nums[17];
	int n = 0;
 8002490:	2300      	movs	r3, #0
 8002492:	677b      	str	r3, [r7, #116]	@ 0x74
	char last_op = '+';
 8002494:	2373      	movs	r3, #115	@ 0x73
 8002496:	18fb      	adds	r3, r7, r3
 8002498:	222b      	movs	r2, #43	@ 0x2b
 800249a:	701a      	strb	r2, [r3, #0]
	int i = 0, len = strlen(expr);
 800249c:	2300      	movs	r3, #0
 800249e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	0018      	movs	r0, r3
 80024a4:	f7fd fe30 	bl	8000108 <strlen>
 80024a8:	0003      	movs	r3, r0
 80024aa:	653b      	str	r3, [r7, #80]	@ 0x50
	while (i < len) {
 80024ac:	e0de      	b.n	800266c <eval_simple+0x1e4>
		while (expr[i] == ' ')
			i++;
 80024ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80024b0:	3301      	adds	r3, #1
 80024b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
		while (expr[i] == ' ')
 80024b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	18d3      	adds	r3, r2, r3
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	2b20      	cmp	r3, #32
 80024be:	d0f6      	beq.n	80024ae <eval_simple+0x26>
		float num = 0, neg = 1, frac = 0.1;
 80024c0:	2300      	movs	r3, #0
 80024c2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80024c4:	23fe      	movs	r3, #254	@ 0xfe
 80024c6:	059b      	lsls	r3, r3, #22
 80024c8:	667b      	str	r3, [r7, #100]	@ 0x64
 80024ca:	4b79      	ldr	r3, [pc, #484]	@ (80026b0 <eval_simple+0x228>)
 80024cc:	663b      	str	r3, [r7, #96]	@ 0x60
		int has_dot = 0;
 80024ce:	2300      	movs	r3, #0
 80024d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
		if (expr[i] == '-') {
 80024d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80024d4:	687a      	ldr	r2, [r7, #4]
 80024d6:	18d3      	adds	r3, r2, r3
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	2b2d      	cmp	r3, #45	@ 0x2d
 80024dc:	d153      	bne.n	8002586 <eval_simple+0xfe>
			neg = -1;
 80024de:	4b75      	ldr	r3, [pc, #468]	@ (80026b4 <eval_simple+0x22c>)
 80024e0:	667b      	str	r3, [r7, #100]	@ 0x64
			i++;
 80024e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80024e4:	3301      	adds	r3, #1
 80024e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
		}
		while (isdigit(expr[i]) || expr[i] == '.') {
 80024e8:	e04d      	b.n	8002586 <eval_simple+0xfe>
			if (expr[i] == '.') {
 80024ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80024ec:	687a      	ldr	r2, [r7, #4]
 80024ee:	18d3      	adds	r3, r2, r3
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	2b2e      	cmp	r3, #46	@ 0x2e
 80024f4:	d105      	bne.n	8002502 <eval_simple+0x7a>
				has_dot = 1;
 80024f6:	2301      	movs	r3, #1
 80024f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
				i++;
 80024fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80024fc:	3301      	adds	r3, #1
 80024fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
				continue;
 8002500:	e041      	b.n	8002586 <eval_simple+0xfe>
			}
			if (!has_dot) {
 8002502:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002504:	2b00      	cmp	r3, #0
 8002506:	d118      	bne.n	800253a <eval_simple+0xb2>
				num = num * 10 + (expr[i++] - '0');
 8002508:	496b      	ldr	r1, [pc, #428]	@ (80026b8 <eval_simple+0x230>)
 800250a:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 800250c:	f7fe fbb2 	bl	8000c74 <__aeabi_fmul>
 8002510:	1c03      	adds	r3, r0, #0
 8002512:	1c1c      	adds	r4, r3, #0
 8002514:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002516:	1c5a      	adds	r2, r3, #1
 8002518:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800251a:	001a      	movs	r2, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	189b      	adds	r3, r3, r2
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	3b30      	subs	r3, #48	@ 0x30
 8002524:	0018      	movs	r0, r3
 8002526:	f7fe ff83 	bl	8001430 <__aeabi_i2f>
 800252a:	1c03      	adds	r3, r0, #0
 800252c:	1c19      	adds	r1, r3, #0
 800252e:	1c20      	adds	r0, r4, #0
 8002530:	f7fd ffe0 	bl	80004f4 <__aeabi_fadd>
 8002534:	1c03      	adds	r3, r0, #0
 8002536:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002538:	e025      	b.n	8002586 <eval_simple+0xfe>
			} else {
				num = num + (expr[i++] - '0') * frac;
 800253a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800253c:	1c5a      	adds	r2, r3, #1
 800253e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002540:	001a      	movs	r2, r3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	189b      	adds	r3, r3, r2
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	3b30      	subs	r3, #48	@ 0x30
 800254a:	0018      	movs	r0, r3
 800254c:	f7fe ff70 	bl	8001430 <__aeabi_i2f>
 8002550:	1c03      	adds	r3, r0, #0
 8002552:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8002554:	1c18      	adds	r0, r3, #0
 8002556:	f7fe fb8d 	bl	8000c74 <__aeabi_fmul>
 800255a:	1c03      	adds	r3, r0, #0
 800255c:	1c19      	adds	r1, r3, #0
 800255e:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8002560:	f7fd ffc8 	bl	80004f4 <__aeabi_fadd>
 8002564:	1c03      	adds	r3, r0, #0
 8002566:	66bb      	str	r3, [r7, #104]	@ 0x68
				frac *= 0.1;
 8002568:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 800256a:	f7ff fbb9 	bl	8001ce0 <__aeabi_f2d>
 800256e:	4a53      	ldr	r2, [pc, #332]	@ (80026bc <eval_simple+0x234>)
 8002570:	4b53      	ldr	r3, [pc, #332]	@ (80026c0 <eval_simple+0x238>)
 8002572:	f7ff f8cf 	bl	8001714 <__aeabi_dmul>
 8002576:	0002      	movs	r2, r0
 8002578:	000b      	movs	r3, r1
 800257a:	0010      	movs	r0, r2
 800257c:	0019      	movs	r1, r3
 800257e:	f7ff fbf7 	bl	8001d70 <__aeabi_d2f>
 8002582:	1c03      	adds	r3, r0, #0
 8002584:	663b      	str	r3, [r7, #96]	@ 0x60
		while (isdigit(expr[i]) || expr[i] == '.') {
 8002586:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	18d3      	adds	r3, r2, r3
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	1c5a      	adds	r2, r3, #1
 8002590:	4b4c      	ldr	r3, [pc, #304]	@ (80026c4 <eval_simple+0x23c>)
 8002592:	18d3      	adds	r3, r2, r3
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	001a      	movs	r2, r3
 8002598:	2304      	movs	r3, #4
 800259a:	4013      	ands	r3, r2
 800259c:	d1a5      	bne.n	80024ea <eval_simple+0x62>
 800259e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	18d3      	adds	r3, r2, r3
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	2b2e      	cmp	r3, #46	@ 0x2e
 80025a8:	d09f      	beq.n	80024ea <eval_simple+0x62>
			}
		}
		num *= neg;
 80025aa:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80025ac:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 80025ae:	f7fe fb61 	bl	8000c74 <__aeabi_fmul>
 80025b2:	1c03      	adds	r3, r0, #0
 80025b4:	66bb      	str	r3, [r7, #104]	@ 0x68
		if (last_op == '*')
 80025b6:	2373      	movs	r3, #115	@ 0x73
 80025b8:	18fb      	adds	r3, r7, r3
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	2b2a      	cmp	r3, #42	@ 0x2a
 80025be:	d111      	bne.n	80025e4 <eval_simple+0x15c>
			nums[n - 1] *= num;
 80025c0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80025c2:	1e5a      	subs	r2, r3, #1
 80025c4:	250c      	movs	r5, #12
 80025c6:	197b      	adds	r3, r7, r5
 80025c8:	0092      	lsls	r2, r2, #2
 80025ca:	58d2      	ldr	r2, [r2, r3]
 80025cc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80025ce:	1e5c      	subs	r4, r3, #1
 80025d0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80025d2:	1c10      	adds	r0, r2, #0
 80025d4:	f7fe fb4e 	bl	8000c74 <__aeabi_fmul>
 80025d8:	1c03      	adds	r3, r0, #0
 80025da:	1c19      	adds	r1, r3, #0
 80025dc:	197b      	adds	r3, r7, r5
 80025de:	00a2      	lsls	r2, r4, #2
 80025e0:	50d1      	str	r1, [r2, r3]
 80025e2:	e033      	b.n	800264c <eval_simple+0x1c4>
		else if (last_op == ':')
 80025e4:	2373      	movs	r3, #115	@ 0x73
 80025e6:	18fb      	adds	r3, r7, r3
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	2b3a      	cmp	r3, #58	@ 0x3a
 80025ec:	d111      	bne.n	8002612 <eval_simple+0x18a>
			nums[n - 1] /= num;
 80025ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80025f0:	1e5a      	subs	r2, r3, #1
 80025f2:	250c      	movs	r5, #12
 80025f4:	197b      	adds	r3, r7, r5
 80025f6:	0092      	lsls	r2, r2, #2
 80025f8:	58d2      	ldr	r2, [r2, r3]
 80025fa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80025fc:	1e5c      	subs	r4, r3, #1
 80025fe:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002600:	1c10      	adds	r0, r2, #0
 8002602:	f7fe f969 	bl	80008d8 <__aeabi_fdiv>
 8002606:	1c03      	adds	r3, r0, #0
 8002608:	1c19      	adds	r1, r3, #0
 800260a:	197b      	adds	r3, r7, r5
 800260c:	00a2      	lsls	r2, r4, #2
 800260e:	50d1      	str	r1, [r2, r3]
 8002610:	e01c      	b.n	800264c <eval_simple+0x1c4>
		else if (last_op == '-')
 8002612:	2373      	movs	r3, #115	@ 0x73
 8002614:	18fb      	adds	r3, r7, r3
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	2b2d      	cmp	r3, #45	@ 0x2d
 800261a:	d10b      	bne.n	8002634 <eval_simple+0x1ac>
			nums[n++] = -num;
 800261c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800261e:	1c5a      	adds	r2, r3, #1
 8002620:	677a      	str	r2, [r7, #116]	@ 0x74
 8002622:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8002624:	2180      	movs	r1, #128	@ 0x80
 8002626:	0609      	lsls	r1, r1, #24
 8002628:	4051      	eors	r1, r2
 800262a:	220c      	movs	r2, #12
 800262c:	18ba      	adds	r2, r7, r2
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	5099      	str	r1, [r3, r2]
 8002632:	e00b      	b.n	800264c <eval_simple+0x1c4>
		else
			nums[n++] = num;
 8002634:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002636:	1c5a      	adds	r2, r3, #1
 8002638:	677a      	str	r2, [r7, #116]	@ 0x74
 800263a:	220c      	movs	r2, #12
 800263c:	18ba      	adds	r2, r7, r2
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002642:	5099      	str	r1, [r3, r2]
		while (expr[i] == ' ')
 8002644:	e002      	b.n	800264c <eval_simple+0x1c4>
			i++;
 8002646:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002648:	3301      	adds	r3, #1
 800264a:	66fb      	str	r3, [r7, #108]	@ 0x6c
		while (expr[i] == ' ')
 800264c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	18d3      	adds	r3, r2, r3
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	2b20      	cmp	r3, #32
 8002656:	d0f6      	beq.n	8002646 <eval_simple+0x1be>
		last_op = expr[i++];
 8002658:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800265a:	1c5a      	adds	r2, r3, #1
 800265c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800265e:	001a      	movs	r2, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	189a      	adds	r2, r3, r2
 8002664:	2373      	movs	r3, #115	@ 0x73
 8002666:	18fb      	adds	r3, r7, r3
 8002668:	7812      	ldrb	r2, [r2, #0]
 800266a:	701a      	strb	r2, [r3, #0]
	while (i < len) {
 800266c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800266e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002670:	429a      	cmp	r2, r3
 8002672:	da00      	bge.n	8002676 <eval_simple+0x1ee>
 8002674:	e71e      	b.n	80024b4 <eval_simple+0x2c>
	}
	float result = 0;
 8002676:	2300      	movs	r3, #0
 8002678:	65bb      	str	r3, [r7, #88]	@ 0x58
	for (int j = 0; j < n; j++) {
 800267a:	2300      	movs	r3, #0
 800267c:	657b      	str	r3, [r7, #84]	@ 0x54
 800267e:	e00d      	b.n	800269c <eval_simple+0x214>
		result += nums[j];
 8002680:	230c      	movs	r3, #12
 8002682:	18fb      	adds	r3, r7, r3
 8002684:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002686:	0092      	lsls	r2, r2, #2
 8002688:	58d3      	ldr	r3, [r2, r3]
 800268a:	1c19      	adds	r1, r3, #0
 800268c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800268e:	f7fd ff31 	bl	80004f4 <__aeabi_fadd>
 8002692:	1c03      	adds	r3, r0, #0
 8002694:	65bb      	str	r3, [r7, #88]	@ 0x58
	for (int j = 0; j < n; j++) {
 8002696:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002698:	3301      	adds	r3, #1
 800269a:	657b      	str	r3, [r7, #84]	@ 0x54
 800269c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800269e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80026a0:	429a      	cmp	r2, r3
 80026a2:	dbed      	blt.n	8002680 <eval_simple+0x1f8>
	}
	return result;
 80026a4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
}
 80026a6:	1c18      	adds	r0, r3, #0
 80026a8:	46bd      	mov	sp, r7
 80026aa:	b01e      	add	sp, #120	@ 0x78
 80026ac:	bdb0      	pop	{r4, r5, r7, pc}
 80026ae:	46c0      	nop			@ (mov r8, r8)
 80026b0:	3dcccccd 	.word	0x3dcccccd
 80026b4:	bf800000 	.word	0xbf800000
 80026b8:	41200000 	.word	0x41200000
 80026bc:	9999999a 	.word	0x9999999a
 80026c0:	3fb99999 	.word	0x3fb99999
 80026c4:	08006924 	.word	0x08006924

080026c8 <calc>:

// Hàm binary search tìm nghiệm trong [l,r] với độ chính xác eps
static float calc(char *expr, float x) {
 80026c8:	b590      	push	{r4, r7, lr}
 80026ca:	b09d      	sub	sp, #116	@ 0x74
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	6039      	str	r1, [r7, #0]
	char buf[64], numbuf[32];
	buf[0] = '\0';
 80026d2:	232c      	movs	r3, #44	@ 0x2c
 80026d4:	18fb      	adds	r3, r7, r3
 80026d6:	2200      	movs	r2, #0
 80026d8:	701a      	strb	r2, [r3, #0]
	for (int i = 0; expr[i]; i++) {
 80026da:	2300      	movs	r3, #0
 80026dc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80026de:	e028      	b.n	8002732 <calc+0x6a>
		if (expr[i] == 'x') {
 80026e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	18d3      	adds	r3, r2, r3
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	2b78      	cmp	r3, #120	@ 0x78
 80026ea:	d10e      	bne.n	800270a <calc+0x42>
			float_to_str(x, numbuf, 7);
 80026ec:	240c      	movs	r4, #12
 80026ee:	1939      	adds	r1, r7, r4
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	2207      	movs	r2, #7
 80026f4:	1c18      	adds	r0, r3, #0
 80026f6:	f000 fb09 	bl	8002d0c <float_to_str>
			strcat(buf, numbuf);
 80026fa:	193a      	adds	r2, r7, r4
 80026fc:	232c      	movs	r3, #44	@ 0x2c
 80026fe:	18fb      	adds	r3, r7, r3
 8002700:	0011      	movs	r1, r2
 8002702:	0018      	movs	r0, r3
 8002704:	f004 f806 	bl	8006714 <strcat>
 8002708:	e010      	b.n	800272c <calc+0x64>
		} else {
			char tmp[2] = { expr[i], '\0' };
 800270a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	18d3      	adds	r3, r2, r3
 8002710:	781a      	ldrb	r2, [r3, #0]
 8002712:	2108      	movs	r1, #8
 8002714:	187b      	adds	r3, r7, r1
 8002716:	701a      	strb	r2, [r3, #0]
 8002718:	187b      	adds	r3, r7, r1
 800271a:	2200      	movs	r2, #0
 800271c:	705a      	strb	r2, [r3, #1]
			strcat(buf, tmp);
 800271e:	187a      	adds	r2, r7, r1
 8002720:	232c      	movs	r3, #44	@ 0x2c
 8002722:	18fb      	adds	r3, r7, r3
 8002724:	0011      	movs	r1, r2
 8002726:	0018      	movs	r0, r3
 8002728:	f003 fff4 	bl	8006714 <strcat>
	for (int i = 0; expr[i]; i++) {
 800272c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800272e:	3301      	adds	r3, #1
 8002730:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002732:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	18d3      	adds	r3, r2, r3
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d1d0      	bne.n	80026e0 <calc+0x18>
		}
	}
	return Calculate(buf);
 800273e:	232c      	movs	r3, #44	@ 0x2c
 8002740:	18fb      	adds	r3, r7, r3
 8002742:	0018      	movs	r0, r3
 8002744:	f000 f8ad 	bl	80028a2 <Calculate>
 8002748:	1c03      	adds	r3, r0, #0
}
 800274a:	1c18      	adds	r0, r3, #0
 800274c:	46bd      	mov	sp, r7
 800274e:	b01d      	add	sp, #116	@ 0x74
 8002750:	bd90      	pop	{r4, r7, pc}

08002752 <binary_search_root>:

static int binary_search_root(char *expr, float l, float r, float eps,
		float *root) {
 8002752:	b580      	push	{r7, lr}
 8002754:	b088      	sub	sp, #32
 8002756:	af00      	add	r7, sp, #0
 8002758:	60f8      	str	r0, [r7, #12]
 800275a:	60b9      	str	r1, [r7, #8]
 800275c:	607a      	str	r2, [r7, #4]
 800275e:	603b      	str	r3, [r7, #0]
	float mid, f_l, f_mid;

	f_l = calc(expr, l);
 8002760:	68ba      	ldr	r2, [r7, #8]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	1c11      	adds	r1, r2, #0
 8002766:	0018      	movs	r0, r3
 8002768:	f7ff ffae 	bl	80026c8 <calc>
 800276c:	1c03      	adds	r3, r0, #0
 800276e:	61fb      	str	r3, [r7, #28]
	if (fabs(f_l) < eps) {
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	005b      	lsls	r3, r3, #1
 8002774:	085b      	lsrs	r3, r3, #1
 8002776:	1c19      	adds	r1, r3, #0
 8002778:	6838      	ldr	r0, [r7, #0]
 800277a:	f7fd fea7 	bl	80004cc <__aeabi_fcmpgt>
 800277e:	1e03      	subs	r3, r0, #0
 8002780:	d004      	beq.n	800278c <binary_search_root+0x3a>
		*root = l;
 8002782:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002784:	68ba      	ldr	r2, [r7, #8]
 8002786:	601a      	str	r2, [r3, #0]
		return 1;
 8002788:	2301      	movs	r3, #1
 800278a:	e054      	b.n	8002836 <binary_search_root+0xe4>
	}

	while (r - l > eps) {
 800278c:	e039      	b.n	8002802 <binary_search_root+0xb0>
		mid = (l + r) / 2;
 800278e:	6879      	ldr	r1, [r7, #4]
 8002790:	68b8      	ldr	r0, [r7, #8]
 8002792:	f7fd feaf 	bl	80004f4 <__aeabi_fadd>
 8002796:	1c03      	adds	r3, r0, #0
 8002798:	2180      	movs	r1, #128	@ 0x80
 800279a:	05c9      	lsls	r1, r1, #23
 800279c:	1c18      	adds	r0, r3, #0
 800279e:	f7fe f89b 	bl	80008d8 <__aeabi_fdiv>
 80027a2:	1c03      	adds	r3, r0, #0
 80027a4:	61bb      	str	r3, [r7, #24]
		f_mid = calc(expr, mid);
 80027a6:	69ba      	ldr	r2, [r7, #24]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	1c11      	adds	r1, r2, #0
 80027ac:	0018      	movs	r0, r3
 80027ae:	f7ff ff8b 	bl	80026c8 <calc>
 80027b2:	1c03      	adds	r3, r0, #0
 80027b4:	617b      	str	r3, [r7, #20]

		if (fabs(f_mid) < eps) {
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	005b      	lsls	r3, r3, #1
 80027ba:	085b      	lsrs	r3, r3, #1
 80027bc:	1c19      	adds	r1, r3, #0
 80027be:	6838      	ldr	r0, [r7, #0]
 80027c0:	f7fd fe84 	bl	80004cc <__aeabi_fcmpgt>
 80027c4:	1e03      	subs	r3, r0, #0
 80027c6:	d004      	beq.n	80027d2 <binary_search_root+0x80>
			*root = mid;
 80027c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027ca:	69ba      	ldr	r2, [r7, #24]
 80027cc:	601a      	str	r2, [r3, #0]
			return 1;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e031      	b.n	8002836 <binary_search_root+0xe4>
		}

		f_l = calc(expr, l);  // luôn tính lại
 80027d2:	68ba      	ldr	r2, [r7, #8]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	1c11      	adds	r1, r2, #0
 80027d8:	0018      	movs	r0, r3
 80027da:	f7ff ff75 	bl	80026c8 <calc>
 80027de:	1c03      	adds	r3, r0, #0
 80027e0:	61fb      	str	r3, [r7, #28]
		if (f_l * f_mid < 0)
 80027e2:	6979      	ldr	r1, [r7, #20]
 80027e4:	69f8      	ldr	r0, [r7, #28]
 80027e6:	f7fe fa45 	bl	8000c74 <__aeabi_fmul>
 80027ea:	1c03      	adds	r3, r0, #0
 80027ec:	2100      	movs	r1, #0
 80027ee:	1c18      	adds	r0, r3, #0
 80027f0:	f7fd fe58 	bl	80004a4 <__aeabi_fcmplt>
 80027f4:	1e03      	subs	r3, r0, #0
 80027f6:	d002      	beq.n	80027fe <binary_search_root+0xac>
			r = mid;
 80027f8:	69bb      	ldr	r3, [r7, #24]
 80027fa:	607b      	str	r3, [r7, #4]
 80027fc:	e001      	b.n	8002802 <binary_search_root+0xb0>
		else
			l = mid;
 80027fe:	69bb      	ldr	r3, [r7, #24]
 8002800:	60bb      	str	r3, [r7, #8]
	while (r - l > eps) {
 8002802:	68b9      	ldr	r1, [r7, #8]
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	f7fe fb8f 	bl	8000f28 <__aeabi_fsub>
 800280a:	1c03      	adds	r3, r0, #0
 800280c:	1c19      	adds	r1, r3, #0
 800280e:	6838      	ldr	r0, [r7, #0]
 8002810:	f7fd fe48 	bl	80004a4 <__aeabi_fcmplt>
 8002814:	1e03      	subs	r3, r0, #0
 8002816:	d1ba      	bne.n	800278e <binary_search_root+0x3c>
	}
	*root = (l + r) / 2;
 8002818:	6879      	ldr	r1, [r7, #4]
 800281a:	68b8      	ldr	r0, [r7, #8]
 800281c:	f7fd fe6a 	bl	80004f4 <__aeabi_fadd>
 8002820:	1c03      	adds	r3, r0, #0
 8002822:	2180      	movs	r1, #128	@ 0x80
 8002824:	05c9      	lsls	r1, r1, #23
 8002826:	1c18      	adds	r0, r3, #0
 8002828:	f7fe f856 	bl	80008d8 <__aeabi_fdiv>
 800282c:	1c03      	adds	r3, r0, #0
 800282e:	1c1a      	adds	r2, r3, #0
 8002830:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002832:	601a      	str	r2, [r3, #0]
	return 1;
 8002834:	2301      	movs	r3, #1
}
 8002836:	0018      	movs	r0, r3
 8002838:	46bd      	mov	sp, r7
 800283a:	b008      	add	sp, #32
 800283c:	bd80      	pop	{r7, pc}

0800283e <reverse_str>:

static void reverse_str(char *str) {
 800283e:	b580      	push	{r7, lr}
 8002840:	b086      	sub	sp, #24
 8002842:	af00      	add	r7, sp, #0
 8002844:	6078      	str	r0, [r7, #4]
	int i = 0;
 8002846:	2300      	movs	r3, #0
 8002848:	617b      	str	r3, [r7, #20]
	int j = strlen(str) - 1;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	0018      	movs	r0, r3
 800284e:	f7fd fc5b 	bl	8000108 <strlen>
 8002852:	0003      	movs	r3, r0
 8002854:	3b01      	subs	r3, #1
 8002856:	613b      	str	r3, [r7, #16]
	char temp;
	while (i < j) {
 8002858:	e01a      	b.n	8002890 <reverse_str+0x52>
		temp = str[i];
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	18d2      	adds	r2, r2, r3
 8002860:	200f      	movs	r0, #15
 8002862:	183b      	adds	r3, r7, r0
 8002864:	7812      	ldrb	r2, [r2, #0]
 8002866:	701a      	strb	r2, [r3, #0]
		str[i] = str[j];
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	18d2      	adds	r2, r2, r3
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	6879      	ldr	r1, [r7, #4]
 8002872:	18cb      	adds	r3, r1, r3
 8002874:	7812      	ldrb	r2, [r2, #0]
 8002876:	701a      	strb	r2, [r3, #0]
		str[j] = temp;
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	18d3      	adds	r3, r2, r3
 800287e:	183a      	adds	r2, r7, r0
 8002880:	7812      	ldrb	r2, [r2, #0]
 8002882:	701a      	strb	r2, [r3, #0]
		i++;
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	3301      	adds	r3, #1
 8002888:	617b      	str	r3, [r7, #20]
		j--;
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	3b01      	subs	r3, #1
 800288e:	613b      	str	r3, [r7, #16]
	while (i < j) {
 8002890:	697a      	ldr	r2, [r7, #20]
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	429a      	cmp	r2, r3
 8002896:	dbe0      	blt.n	800285a <reverse_str+0x1c>
	}
}
 8002898:	46c0      	nop			@ (mov r8, r8)
 800289a:	46c0      	nop			@ (mov r8, r8)
 800289c:	46bd      	mov	sp, r7
 800289e:	b006      	add	sp, #24
 80028a0:	bd80      	pop	{r7, pc}

080028a2 <Calculate>:

// Public function
float Calculate(char *data) {
 80028a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028a4:	b0bb      	sub	sp, #236	@ 0xec
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	6078      	str	r0, [r7, #4]
	while (strchr(data, '(')) {
 80028aa:	e0ab      	b.n	8002a04 <Calculate+0x162>
		int right = -1, left = -1;
 80028ac:	2301      	movs	r3, #1
 80028ae:	425b      	negs	r3, r3
 80028b0:	22e4      	movs	r2, #228	@ 0xe4
 80028b2:	18ba      	adds	r2, r7, r2
 80028b4:	6013      	str	r3, [r2, #0]
 80028b6:	2301      	movs	r3, #1
 80028b8:	425b      	negs	r3, r3
 80028ba:	22e0      	movs	r2, #224	@ 0xe0
 80028bc:	18ba      	adds	r2, r7, r2
 80028be:	6013      	str	r3, [r2, #0]
		for (int i = 0; data[i]; i++) {
 80028c0:	2300      	movs	r3, #0
 80028c2:	22dc      	movs	r2, #220	@ 0xdc
 80028c4:	18ba      	adds	r2, r7, r2
 80028c6:	6013      	str	r3, [r2, #0]
 80028c8:	e013      	b.n	80028f2 <Calculate+0x50>
			if (data[i] == ')') {
 80028ca:	21dc      	movs	r1, #220	@ 0xdc
 80028cc:	187b      	adds	r3, r7, r1
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	18d3      	adds	r3, r2, r3
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	2b29      	cmp	r3, #41	@ 0x29
 80028d8:	d105      	bne.n	80028e6 <Calculate+0x44>
				right = i;
 80028da:	187b      	adds	r3, r7, r1
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	22e4      	movs	r2, #228	@ 0xe4
 80028e0:	18ba      	adds	r2, r7, r2
 80028e2:	6013      	str	r3, [r2, #0]
				break;
 80028e4:	e00d      	b.n	8002902 <Calculate+0x60>
		for (int i = 0; data[i]; i++) {
 80028e6:	22dc      	movs	r2, #220	@ 0xdc
 80028e8:	18bb      	adds	r3, r7, r2
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	3301      	adds	r3, #1
 80028ee:	18ba      	adds	r2, r7, r2
 80028f0:	6013      	str	r3, [r2, #0]
 80028f2:	23dc      	movs	r3, #220	@ 0xdc
 80028f4:	18fb      	adds	r3, r7, r3
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	18d3      	adds	r3, r2, r3
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d1e3      	bne.n	80028ca <Calculate+0x28>
			}
		}

		for (int i = right; i >= 0; i--) {
 8002902:	23e4      	movs	r3, #228	@ 0xe4
 8002904:	18fb      	adds	r3, r7, r3
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	22d8      	movs	r2, #216	@ 0xd8
 800290a:	18ba      	adds	r2, r7, r2
 800290c:	6013      	str	r3, [r2, #0]
 800290e:	e013      	b.n	8002938 <Calculate+0x96>
			if (data[i] == '(') {
 8002910:	21d8      	movs	r1, #216	@ 0xd8
 8002912:	187b      	adds	r3, r7, r1
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	18d3      	adds	r3, r2, r3
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	2b28      	cmp	r3, #40	@ 0x28
 800291e:	d105      	bne.n	800292c <Calculate+0x8a>
				left = i;
 8002920:	187b      	adds	r3, r7, r1
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	22e0      	movs	r2, #224	@ 0xe0
 8002926:	18ba      	adds	r2, r7, r2
 8002928:	6013      	str	r3, [r2, #0]
				break;
 800292a:	e00a      	b.n	8002942 <Calculate+0xa0>
		for (int i = right; i >= 0; i--) {
 800292c:	22d8      	movs	r2, #216	@ 0xd8
 800292e:	18bb      	adds	r3, r7, r2
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	3b01      	subs	r3, #1
 8002934:	18ba      	adds	r2, r7, r2
 8002936:	6013      	str	r3, [r2, #0]
 8002938:	23d8      	movs	r3, #216	@ 0xd8
 800293a:	18fb      	adds	r3, r7, r3
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	2b00      	cmp	r3, #0
 8002940:	dae6      	bge.n	8002910 <Calculate+0x6e>
			}
		}
		if (left == -1 || right == -1)
 8002942:	25e0      	movs	r5, #224	@ 0xe0
 8002944:	197b      	adds	r3, r7, r5
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	3301      	adds	r3, #1
 800294a:	d063      	beq.n	8002a14 <Calculate+0x172>
 800294c:	26e4      	movs	r6, #228	@ 0xe4
 800294e:	19bb      	adds	r3, r7, r6
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	3301      	adds	r3, #1
 8002954:	d05e      	beq.n	8002a14 <Calculate+0x172>
			break;
		char sub[64] = { 0 };
 8002956:	240c      	movs	r4, #12
 8002958:	193b      	adds	r3, r7, r4
 800295a:	0018      	movs	r0, r3
 800295c:	2340      	movs	r3, #64	@ 0x40
 800295e:	001a      	movs	r2, r3
 8002960:	2100      	movs	r1, #0
 8002962:	f003 fecf 	bl	8006704 <memset>
		strncpy(sub, data + left + 1, right - left - 1);
 8002966:	197b      	adds	r3, r7, r5
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	3301      	adds	r3, #1
 800296c:	687a      	ldr	r2, [r7, #4]
 800296e:	18d1      	adds	r1, r2, r3
 8002970:	19bb      	adds	r3, r7, r6
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	197b      	adds	r3, r7, r5
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	3b01      	subs	r3, #1
 800297c:	001a      	movs	r2, r3
 800297e:	193b      	adds	r3, r7, r4
 8002980:	0018      	movs	r0, r3
 8002982:	f003 fee2 	bl	800674a <strncpy>
		double val = eval_simple(sub);
 8002986:	193b      	adds	r3, r7, r4
 8002988:	0018      	movs	r0, r3
 800298a:	f7ff fd7d 	bl	8002488 <eval_simple>
 800298e:	1c03      	adds	r3, r0, #0
 8002990:	1c18      	adds	r0, r3, #0
 8002992:	f7ff f9a5 	bl	8001ce0 <__aeabi_f2d>
 8002996:	0002      	movs	r2, r0
 8002998:	000b      	movs	r3, r1
 800299a:	21d0      	movs	r1, #208	@ 0xd0
 800299c:	1878      	adds	r0, r7, r1
 800299e:	6002      	str	r2, [r0, #0]
 80029a0:	6043      	str	r3, [r0, #4]

		char newdata[64] = { 0 };
 80029a2:	244c      	movs	r4, #76	@ 0x4c
 80029a4:	193b      	adds	r3, r7, r4
 80029a6:	0018      	movs	r0, r3
 80029a8:	2340      	movs	r3, #64	@ 0x40
 80029aa:	001a      	movs	r2, r3
 80029ac:	2100      	movs	r1, #0
 80029ae:	f003 fea9 	bl	8006704 <memset>
		strncpy(newdata, data, left);
 80029b2:	197b      	adds	r3, r7, r5
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	6879      	ldr	r1, [r7, #4]
 80029b8:	193b      	adds	r3, r7, r4
 80029ba:	0018      	movs	r0, r3
 80029bc:	f003 fec5 	bl	800674a <strncpy>
		char numbuf[64];
		float_to_str(val, numbuf, 2);
 80029c0:	21d0      	movs	r1, #208	@ 0xd0
 80029c2:	187b      	adds	r3, r7, r1
 80029c4:	6818      	ldr	r0, [r3, #0]
 80029c6:	6859      	ldr	r1, [r3, #4]
 80029c8:	f7ff f9d2 	bl	8001d70 <__aeabi_d2f>
 80029cc:	258c      	movs	r5, #140	@ 0x8c
 80029ce:	197b      	adds	r3, r7, r5
 80029d0:	2202      	movs	r2, #2
 80029d2:	0019      	movs	r1, r3
 80029d4:	f000 f99a 	bl	8002d0c <float_to_str>
		strcat(newdata, numbuf);
 80029d8:	197a      	adds	r2, r7, r5
 80029da:	193b      	adds	r3, r7, r4
 80029dc:	0011      	movs	r1, r2
 80029de:	0018      	movs	r0, r3
 80029e0:	f003 fe98 	bl	8006714 <strcat>
		strcat(newdata, data + right + 1);
 80029e4:	19bb      	adds	r3, r7, r6
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	3301      	adds	r3, #1
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	18d2      	adds	r2, r2, r3
 80029ee:	193b      	adds	r3, r7, r4
 80029f0:	0011      	movs	r1, r2
 80029f2:	0018      	movs	r0, r3
 80029f4:	f003 fe8e 	bl	8006714 <strcat>
		strcpy(data, newdata);
 80029f8:	193a      	adds	r2, r7, r4
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	0011      	movs	r1, r2
 80029fe:	0018      	movs	r0, r3
 8002a00:	f003 fedc 	bl	80067bc <strcpy>
	while (strchr(data, '(')) {
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2128      	movs	r1, #40	@ 0x28
 8002a08:	0018      	movs	r0, r3
 8002a0a:	f003 fe90 	bl	800672e <strchr>
 8002a0e:	1e03      	subs	r3, r0, #0
 8002a10:	d000      	beq.n	8002a14 <Calculate+0x172>
 8002a12:	e74b      	b.n	80028ac <Calculate+0xa>
	}

	float result = eval_simple(data);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	0018      	movs	r0, r3
 8002a18:	f7ff fd36 	bl	8002488 <eval_simple>
 8002a1c:	1c03      	adds	r3, r0, #0
 8002a1e:	22cc      	movs	r2, #204	@ 0xcc
 8002a20:	18b9      	adds	r1, r7, r2
 8002a22:	600b      	str	r3, [r1, #0]
	return result;
 8002a24:	18bb      	adds	r3, r7, r2
 8002a26:	681b      	ldr	r3, [r3, #0]
}
 8002a28:	1c18      	adds	r0, r3, #0
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	b03b      	add	sp, #236	@ 0xec
 8002a2e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a30 <solve_the_equation>:

void solve_the_equation(char *expr) {
 8002a30:	b5b0      	push	{r4, r5, r7, lr}
 8002a32:	b092      	sub	sp, #72	@ 0x48
 8002a34:	af02      	add	r7, sp, #8
 8002a36:	6078      	str	r0, [r7, #4]
	float eps = 1e-4f;
 8002a38:	4b79      	ldr	r3, [pc, #484]	@ (8002c20 <solve_the_equation+0x1f0>)
 8002a3a:	633b      	str	r3, [r7, #48]	@ 0x30
	float step = 1.0f;
 8002a3c:	23fe      	movs	r3, #254	@ 0xfe
 8002a3e:	059b      	lsls	r3, r3, #22
 8002a40:	62fb      	str	r3, [r7, #44]	@ 0x2c
	float root;
	int found_root = 0;
 8002a42:	2300      	movs	r3, #0
 8002a44:	63fb      	str	r3, [r7, #60]	@ 0x3c
	char kq[17];
	int col = 16;
 8002a46:	2310      	movs	r3, #16
 8002a48:	63bb      	str	r3, [r7, #56]	@ 0x38
	LCD_setCursor(1, 0);
 8002a4a:	2100      	movs	r1, #0
 8002a4c:	2001      	movs	r0, #1
 8002a4e:	f7ff fb3c 	bl	80020ca <LCD_setCursor>
	LCD_puts("tim");
 8002a52:	4b74      	ldr	r3, [pc, #464]	@ (8002c24 <solve_the_equation+0x1f4>)
 8002a54:	0018      	movs	r0, r3
 8002a56:	f7ff fb75 	bl	8002144 <LCD_puts>
	for (float l = -10000; l < 10000; l += step) {
 8002a5a:	4b73      	ldr	r3, [pc, #460]	@ (8002c28 <solve_the_equation+0x1f8>)
 8002a5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a5e:	e0c0      	b.n	8002be2 <solve_the_equation+0x1b2>
		float r = l + step;
 8002a60:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002a62:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002a64:	f7fd fd46 	bl	80004f4 <__aeabi_fadd>
 8002a68:	1c03      	adds	r3, r0, #0
 8002a6a:	62bb      	str	r3, [r7, #40]	@ 0x28
		float f_l = calc(expr, l);
 8002a6c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	1c11      	adds	r1, r2, #0
 8002a72:	0018      	movs	r0, r3
 8002a74:	f7ff fe28 	bl	80026c8 <calc>
 8002a78:	1c03      	adds	r3, r0, #0
 8002a7a:	627b      	str	r3, [r7, #36]	@ 0x24
		float f_r = calc(expr, r);
 8002a7c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	1c11      	adds	r1, r2, #0
 8002a82:	0018      	movs	r0, r3
 8002a84:	f7ff fe20 	bl	80026c8 <calc>
 8002a88:	1c03      	adds	r3, r0, #0
 8002a8a:	623b      	str	r3, [r7, #32]

		if (fabs(f_l) < eps) {  // nghiệm ngay tại l
 8002a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a8e:	005b      	lsls	r3, r3, #1
 8002a90:	085b      	lsrs	r3, r3, #1
 8002a92:	1c19      	adds	r1, r3, #0
 8002a94:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002a96:	f7fd fd19 	bl	80004cc <__aeabi_fcmpgt>
 8002a9a:	1e03      	subs	r3, r0, #0
 8002a9c:	d026      	beq.n	8002aec <solve_the_equation+0xbc>
			found_root = 1;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
			float_to_str(l, kq, 2);
 8002aa2:	2508      	movs	r5, #8
 8002aa4:	1979      	adds	r1, r7, r5
 8002aa6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002aa8:	2202      	movs	r2, #2
 8002aaa:	1c18      	adds	r0, r3, #0
 8002aac:	f000 f92e 	bl	8002d0c <float_to_str>
			LCD_setCursor(1, col - strlen(kq));
 8002ab0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ab2:	b2dc      	uxtb	r4, r3
 8002ab4:	197b      	adds	r3, r7, r5
 8002ab6:	0018      	movs	r0, r3
 8002ab8:	f7fd fb26 	bl	8000108 <strlen>
 8002abc:	0003      	movs	r3, r0
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	1ae3      	subs	r3, r4, r3
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	0019      	movs	r1, r3
 8002ac6:	2001      	movs	r0, #1
 8002ac8:	f7ff faff 	bl	80020ca <LCD_setCursor>
			LCD_puts(kq);
 8002acc:	197b      	adds	r3, r7, r5
 8002ace:	0018      	movs	r0, r3
 8002ad0:	f7ff fb38 	bl	8002144 <LCD_puts>
			col -= col - strlen(kq) - 1;
 8002ad4:	197b      	adds	r3, r7, r5
 8002ad6:	0018      	movs	r0, r3
 8002ad8:	f7fd fb16 	bl	8000108 <strlen>
 8002adc:	0002      	movs	r2, r0
 8002ade:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ae0:	1ad2      	subs	r2, r2, r3
 8002ae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ae4:	18d3      	adds	r3, r2, r3
 8002ae6:	3301      	adds	r3, #1
 8002ae8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002aea:	e074      	b.n	8002bd6 <solve_the_equation+0x1a6>
		} else if (f_l * f_r < 0 || fabs(f_r) < eps) {
 8002aec:	6a39      	ldr	r1, [r7, #32]
 8002aee:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002af0:	f7fe f8c0 	bl	8000c74 <__aeabi_fmul>
 8002af4:	1c03      	adds	r3, r0, #0
 8002af6:	2100      	movs	r1, #0
 8002af8:	1c18      	adds	r0, r3, #0
 8002afa:	f7fd fcd3 	bl	80004a4 <__aeabi_fcmplt>
 8002afe:	1e03      	subs	r3, r0, #0
 8002b00:	d108      	bne.n	8002b14 <solve_the_equation+0xe4>
 8002b02:	6a3b      	ldr	r3, [r7, #32]
 8002b04:	005b      	lsls	r3, r3, #1
 8002b06:	085b      	lsrs	r3, r3, #1
 8002b08:	1c19      	adds	r1, r3, #0
 8002b0a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002b0c:	f7fd fcde 	bl	80004cc <__aeabi_fcmpgt>
 8002b10:	1e03      	subs	r3, r0, #0
 8002b12:	d060      	beq.n	8002bd6 <solve_the_equation+0x1a6>
			found_root = 1;
 8002b14:	2301      	movs	r3, #1
 8002b16:	63fb      	str	r3, [r7, #60]	@ 0x3c
			if (binary_search_root(expr, l, r, eps, &root)) {
 8002b18:	6b3c      	ldr	r4, [r7, #48]	@ 0x30
 8002b1a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002b1c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	231c      	movs	r3, #28
 8002b22:	18fb      	adds	r3, r7, r3
 8002b24:	9300      	str	r3, [sp, #0]
 8002b26:	1c23      	adds	r3, r4, #0
 8002b28:	f7ff fe13 	bl	8002752 <binary_search_root>
 8002b2c:	1e03      	subs	r3, r0, #0
 8002b2e:	d052      	beq.n	8002bd6 <solve_the_equation+0x1a6>
				if (fabs(root) < eps)
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	005b      	lsls	r3, r3, #1
 8002b34:	085b      	lsrs	r3, r3, #1
 8002b36:	1c19      	adds	r1, r3, #0
 8002b38:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002b3a:	f7fd fcc7 	bl	80004cc <__aeabi_fcmpgt>
 8002b3e:	1e03      	subs	r3, r0, #0
 8002b40:	d001      	beq.n	8002b46 <solve_the_equation+0x116>
					root = 0;
 8002b42:	2300      	movs	r3, #0
 8002b44:	61fb      	str	r3, [r7, #28]
				float_to_str(root, kq, 2);
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	2508      	movs	r5, #8
 8002b4a:	1979      	adds	r1, r7, r5
 8002b4c:	2202      	movs	r2, #2
 8002b4e:	1c18      	adds	r0, r3, #0
 8002b50:	f000 f8dc 	bl	8002d0c <float_to_str>
				LCD_setCursor(1, col - strlen(kq));
 8002b54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b56:	b2dc      	uxtb	r4, r3
 8002b58:	197b      	adds	r3, r7, r5
 8002b5a:	0018      	movs	r0, r3
 8002b5c:	f7fd fad4 	bl	8000108 <strlen>
 8002b60:	0003      	movs	r3, r0
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	1ae3      	subs	r3, r4, r3
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	0019      	movs	r1, r3
 8002b6a:	2001      	movs	r0, #1
 8002b6c:	f7ff faad 	bl	80020ca <LCD_setCursor>
				LCD_puts(kq);
 8002b70:	197b      	adds	r3, r7, r5
 8002b72:	0018      	movs	r0, r3
 8002b74:	f7ff fae6 	bl	8002144 <LCD_puts>
				if (col - strlen(kq) > 0) {
 8002b78:	197b      	adds	r3, r7, r5
 8002b7a:	0018      	movs	r0, r3
 8002b7c:	f7fd fac4 	bl	8000108 <strlen>
 8002b80:	0002      	movs	r2, r0
 8002b82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d01d      	beq.n	8002bc4 <solve_the_equation+0x194>
					LCD_setCursor(1, col - strlen(kq) - 1);
 8002b88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b8a:	b2dc      	uxtb	r4, r3
 8002b8c:	197b      	adds	r3, r7, r5
 8002b8e:	0018      	movs	r0, r3
 8002b90:	f7fd faba 	bl	8000108 <strlen>
 8002b94:	0003      	movs	r3, r0
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	1ae3      	subs	r3, r4, r3
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	3b01      	subs	r3, #1
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	0019      	movs	r1, r3
 8002ba2:	2001      	movs	r0, #1
 8002ba4:	f7ff fa91 	bl	80020ca <LCD_setCursor>
					LCD_puts(" ");
 8002ba8:	4b20      	ldr	r3, [pc, #128]	@ (8002c2c <solve_the_equation+0x1fc>)
 8002baa:	0018      	movs	r0, r3
 8002bac:	f7ff faca 	bl	8002144 <LCD_puts>
					col -= (strlen(kq) + 1);
 8002bb0:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 8002bb2:	197b      	adds	r3, r7, r5
 8002bb4:	0018      	movs	r0, r3
 8002bb6:	f7fd faa7 	bl	8000108 <strlen>
 8002bba:	0003      	movs	r3, r0
 8002bbc:	1ae3      	subs	r3, r4, r3
 8002bbe:	3b01      	subs	r3, #1
 8002bc0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002bc2:	e008      	b.n	8002bd6 <solve_the_equation+0x1a6>
				} else {
					col -= strlen(kq);
 8002bc4:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 8002bc6:	2308      	movs	r3, #8
 8002bc8:	18fb      	adds	r3, r7, r3
 8002bca:	0018      	movs	r0, r3
 8002bcc:	f7fd fa9c 	bl	8000108 <strlen>
 8002bd0:	0003      	movs	r3, r0
 8002bd2:	1ae3      	subs	r3, r4, r3
 8002bd4:	63bb      	str	r3, [r7, #56]	@ 0x38
	for (float l = -10000; l < 10000; l += step) {
 8002bd6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002bd8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002bda:	f7fd fc8b 	bl	80004f4 <__aeabi_fadd>
 8002bde:	1c03      	adds	r3, r0, #0
 8002be0:	637b      	str	r3, [r7, #52]	@ 0x34
 8002be2:	4913      	ldr	r1, [pc, #76]	@ (8002c30 <solve_the_equation+0x200>)
 8002be4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002be6:	f7fd fc5d 	bl	80004a4 <__aeabi_fcmplt>
 8002bea:	1e03      	subs	r3, r0, #0
 8002bec:	d000      	beq.n	8002bf0 <solve_the_equation+0x1c0>
 8002bee:	e737      	b.n	8002a60 <solve_the_equation+0x30>
				}
			}
		}
	}
	if (!found_root) {
 8002bf0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d108      	bne.n	8002c08 <solve_the_equation+0x1d8>
		LCD_setCursor(1, 0);
 8002bf6:	2100      	movs	r1, #0
 8002bf8:	2001      	movs	r0, #1
 8002bfa:	f7ff fa66 	bl	80020ca <LCD_setCursor>
		LCD_puts("Not found");
 8002bfe:	4b0d      	ldr	r3, [pc, #52]	@ (8002c34 <solve_the_equation+0x204>)
 8002c00:	0018      	movs	r0, r3
 8002c02:	f7ff fa9f 	bl	8002144 <LCD_puts>
	} else {
		LCD_setCursor(1, 0);
		LCD_puts("x: ");
	}
}
 8002c06:	e007      	b.n	8002c18 <solve_the_equation+0x1e8>
		LCD_setCursor(1, 0);
 8002c08:	2100      	movs	r1, #0
 8002c0a:	2001      	movs	r0, #1
 8002c0c:	f7ff fa5d 	bl	80020ca <LCD_setCursor>
		LCD_puts("x: ");
 8002c10:	4b09      	ldr	r3, [pc, #36]	@ (8002c38 <solve_the_equation+0x208>)
 8002c12:	0018      	movs	r0, r3
 8002c14:	f7ff fa96 	bl	8002144 <LCD_puts>
}
 8002c18:	46c0      	nop			@ (mov r8, r8)
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	b010      	add	sp, #64	@ 0x40
 8002c1e:	bdb0      	pop	{r4, r5, r7, pc}
 8002c20:	38d1b717 	.word	0x38d1b717
 8002c24:	080067f8 	.word	0x080067f8
 8002c28:	c61c4000 	.word	0xc61c4000
 8002c2c:	080067fc 	.word	0x080067fc
 8002c30:	461c4000 	.word	0x461c4000
 8002c34:	08006800 	.word	0x08006800
 8002c38:	0800680c 	.word	0x0800680c

08002c3c <int_to_str>:

void int_to_str(long num, char *str, int base) {
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b088      	sub	sp, #32
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	60f8      	str	r0, [r7, #12]
 8002c44:	60b9      	str	r1, [r7, #8]
 8002c46:	607a      	str	r2, [r7, #4]
	int i = 0;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	61fb      	str	r3, [r7, #28]
	bool is_negative = false;
 8002c4c:	231b      	movs	r3, #27
 8002c4e:	18fb      	adds	r3, r7, r3
 8002c50:	2200      	movs	r2, #0
 8002c52:	701a      	strb	r2, [r3, #0]
	if (num == 0) {
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d10d      	bne.n	8002c76 <int_to_str+0x3a>
		str[i++] = '0';
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	1c5a      	adds	r2, r3, #1
 8002c5e:	61fa      	str	r2, [r7, #28]
 8002c60:	001a      	movs	r2, r3
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	189b      	adds	r3, r3, r2
 8002c66:	2230      	movs	r2, #48	@ 0x30
 8002c68:	701a      	strb	r2, [r3, #0]
		str[i] = '\0';
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	68ba      	ldr	r2, [r7, #8]
 8002c6e:	18d3      	adds	r3, r2, r3
 8002c70:	2200      	movs	r2, #0
 8002c72:	701a      	strb	r2, [r3, #0]
		return;
 8002c74:	e046      	b.n	8002d04 <int_to_str+0xc8>
	}
	if (num < 0 && base == 10) {
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	da2a      	bge.n	8002cd2 <int_to_str+0x96>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2b0a      	cmp	r3, #10
 8002c80:	d127      	bne.n	8002cd2 <int_to_str+0x96>
		is_negative = true;
 8002c82:	231b      	movs	r3, #27
 8002c84:	18fb      	adds	r3, r7, r3
 8002c86:	2201      	movs	r2, #1
 8002c88:	701a      	strb	r2, [r3, #0]
		num = -num;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	425b      	negs	r3, r3
 8002c8e:	60fb      	str	r3, [r7, #12]
	}
	while (num != 0) {
 8002c90:	e01f      	b.n	8002cd2 <int_to_str+0x96>
		int rem = num % base;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	6879      	ldr	r1, [r7, #4]
 8002c96:	0018      	movs	r0, r3
 8002c98:	f7fd fbae 	bl	80003f8 <__aeabi_idivmod>
 8002c9c:	000b      	movs	r3, r1
 8002c9e:	617b      	str	r3, [r7, #20]
		str[i++] = (rem > 9) ? (rem - 10) + 'a' : rem + '0';
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	2b09      	cmp	r3, #9
 8002ca4:	dd04      	ble.n	8002cb0 <int_to_str+0x74>
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	3357      	adds	r3, #87	@ 0x57
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	e003      	b.n	8002cb8 <int_to_str+0x7c>
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	3330      	adds	r3, #48	@ 0x30
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	69fa      	ldr	r2, [r7, #28]
 8002cba:	1c51      	adds	r1, r2, #1
 8002cbc:	61f9      	str	r1, [r7, #28]
 8002cbe:	0011      	movs	r1, r2
 8002cc0:	68ba      	ldr	r2, [r7, #8]
 8002cc2:	1852      	adds	r2, r2, r1
 8002cc4:	7013      	strb	r3, [r2, #0]
		num = num / base;
 8002cc6:	6879      	ldr	r1, [r7, #4]
 8002cc8:	68f8      	ldr	r0, [r7, #12]
 8002cca:	f7fd faaf 	bl	800022c <__divsi3>
 8002cce:	0003      	movs	r3, r0
 8002cd0:	60fb      	str	r3, [r7, #12]
	while (num != 0) {
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d1dc      	bne.n	8002c92 <int_to_str+0x56>
	}
	if (is_negative) {
 8002cd8:	231b      	movs	r3, #27
 8002cda:	18fb      	adds	r3, r7, r3
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d007      	beq.n	8002cf2 <int_to_str+0xb6>
		str[i++] = '-';
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	1c5a      	adds	r2, r3, #1
 8002ce6:	61fa      	str	r2, [r7, #28]
 8002ce8:	001a      	movs	r2, r3
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	189b      	adds	r3, r3, r2
 8002cee:	222d      	movs	r2, #45	@ 0x2d
 8002cf0:	701a      	strb	r2, [r3, #0]
	}
	str[i] = '\0';
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	68ba      	ldr	r2, [r7, #8]
 8002cf6:	18d3      	adds	r3, r2, r3
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	701a      	strb	r2, [r3, #0]
	reverse_str(str);
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	0018      	movs	r0, r3
 8002d00:	f7ff fd9d 	bl	800283e <reverse_str>
}
 8002d04:	46bd      	mov	sp, r7
 8002d06:	b008      	add	sp, #32
 8002d08:	bd80      	pop	{r7, pc}
	...

08002d0c <float_to_str>:

void float_to_str(float num, char *buffer, int precision) {
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b090      	sub	sp, #64	@ 0x40
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	60f8      	str	r0, [r7, #12]
 8002d14:	60b9      	str	r1, [r7, #8]
 8002d16:	607a      	str	r2, [r7, #4]
	// Xử lý dấu âm
	int idx = 0;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (num < 0) {
 8002d1c:	2100      	movs	r1, #0
 8002d1e:	68f8      	ldr	r0, [r7, #12]
 8002d20:	f7fd fbc0 	bl	80004a4 <__aeabi_fcmplt>
 8002d24:	1e03      	subs	r3, r0, #0
 8002d26:	d00c      	beq.n	8002d42 <float_to_str+0x36>
		buffer[idx++] = '-';
 8002d28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d2a:	1c5a      	adds	r2, r3, #1
 8002d2c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002d2e:	001a      	movs	r2, r3
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	189b      	adds	r3, r3, r2
 8002d34:	222d      	movs	r2, #45	@ 0x2d
 8002d36:	701a      	strb	r2, [r3, #0]
		num = -num;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2280      	movs	r2, #128	@ 0x80
 8002d3c:	0612      	lsls	r2, r2, #24
 8002d3e:	4053      	eors	r3, r2
 8002d40:	60fb      	str	r3, [r7, #12]
	}

	// Phần nguyên
	int int_part = (int) num;
 8002d42:	68f8      	ldr	r0, [r7, #12]
 8002d44:	f7fe fb54 	bl	80013f0 <__aeabi_f2iz>
 8002d48:	0003      	movs	r3, r0
 8002d4a:	63bb      	str	r3, [r7, #56]	@ 0x38
	float frac_part = num - int_part;
 8002d4c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002d4e:	f7fe fb6f 	bl	8001430 <__aeabi_i2f>
 8002d52:	1c03      	adds	r3, r0, #0
 8002d54:	1c19      	adds	r1, r3, #0
 8002d56:	68f8      	ldr	r0, [r7, #12]
 8002d58:	f7fe f8e6 	bl	8000f28 <__aeabi_fsub>
 8002d5c:	1c03      	adds	r3, r0, #0
 8002d5e:	637b      	str	r3, [r7, #52]	@ 0x34

	// Chuyển phần nguyên sang chuỗi
	char temp[20];
	int t = 0;
 8002d60:	2300      	movs	r3, #0
 8002d62:	633b      	str	r3, [r7, #48]	@ 0x30
	if (int_part == 0) {
 8002d64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d11d      	bne.n	8002da6 <float_to_str+0x9a>
		temp[t++] = '0';
 8002d6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d6c:	1c5a      	adds	r2, r3, #1
 8002d6e:	633a      	str	r2, [r7, #48]	@ 0x30
 8002d70:	2210      	movs	r2, #16
 8002d72:	18ba      	adds	r2, r7, r2
 8002d74:	2130      	movs	r1, #48	@ 0x30
 8002d76:	54d1      	strb	r1, [r2, r3]
 8002d78:	e018      	b.n	8002dac <float_to_str+0xa0>
	} else {
		while (int_part > 0) {
			temp[t++] = (int_part % 10) + '0';
 8002d7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d7c:	210a      	movs	r1, #10
 8002d7e:	0018      	movs	r0, r3
 8002d80:	f7fd fb3a 	bl	80003f8 <__aeabi_idivmod>
 8002d84:	000b      	movs	r3, r1
 8002d86:	b2da      	uxtb	r2, r3
 8002d88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d8a:	1c59      	adds	r1, r3, #1
 8002d8c:	6339      	str	r1, [r7, #48]	@ 0x30
 8002d8e:	3230      	adds	r2, #48	@ 0x30
 8002d90:	b2d1      	uxtb	r1, r2
 8002d92:	2210      	movs	r2, #16
 8002d94:	18ba      	adds	r2, r7, r2
 8002d96:	54d1      	strb	r1, [r2, r3]
			int_part /= 10;
 8002d98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d9a:	210a      	movs	r1, #10
 8002d9c:	0018      	movs	r0, r3
 8002d9e:	f7fd fa45 	bl	800022c <__divsi3>
 8002da2:	0003      	movs	r3, r0
 8002da4:	63bb      	str	r3, [r7, #56]	@ 0x38
		while (int_part > 0) {
 8002da6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	dce6      	bgt.n	8002d7a <float_to_str+0x6e>
		}
	}
	// Đảo ngược
	for (int i = t - 1; i >= 0; i--)
 8002dac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dae:	3b01      	subs	r3, #1
 8002db0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002db2:	e00e      	b.n	8002dd2 <float_to_str+0xc6>
		buffer[idx++] = temp[i];
 8002db4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002db6:	1c5a      	adds	r2, r3, #1
 8002db8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002dba:	001a      	movs	r2, r3
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	189b      	adds	r3, r3, r2
 8002dc0:	2210      	movs	r2, #16
 8002dc2:	18b9      	adds	r1, r7, r2
 8002dc4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002dc6:	188a      	adds	r2, r1, r2
 8002dc8:	7812      	ldrb	r2, [r2, #0]
 8002dca:	701a      	strb	r2, [r3, #0]
	for (int i = t - 1; i >= 0; i--)
 8002dcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dce:	3b01      	subs	r3, #1
 8002dd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002dd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	daed      	bge.n	8002db4 <float_to_str+0xa8>

	// Thêm dấu thập phân
	if (precision > 0) {
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	dd4c      	ble.n	8002e78 <float_to_str+0x16c>
		buffer[idx++] = '.';
 8002dde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002de0:	1c5a      	adds	r2, r3, #1
 8002de2:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002de4:	001a      	movs	r2, r3
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	189b      	adds	r3, r3, r2
 8002dea:	222e      	movs	r2, #46	@ 0x2e
 8002dec:	701a      	strb	r2, [r3, #0]

		// Xử lý phần thập phân
		for (int i = 0; i < precision; i++) {
 8002dee:	2300      	movs	r3, #0
 8002df0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002df2:	e022      	b.n	8002e3a <float_to_str+0x12e>
			frac_part *= 10;
 8002df4:	4925      	ldr	r1, [pc, #148]	@ (8002e8c <float_to_str+0x180>)
 8002df6:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002df8:	f7fd ff3c 	bl	8000c74 <__aeabi_fmul>
 8002dfc:	1c03      	adds	r3, r0, #0
 8002dfe:	637b      	str	r3, [r7, #52]	@ 0x34
			int digit = (int) frac_part;
 8002e00:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002e02:	f7fe faf5 	bl	80013f0 <__aeabi_f2iz>
 8002e06:	0003      	movs	r3, r0
 8002e08:	627b      	str	r3, [r7, #36]	@ 0x24
			buffer[idx++] = digit + '0';
 8002e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e0c:	b2da      	uxtb	r2, r3
 8002e0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e10:	1c59      	adds	r1, r3, #1
 8002e12:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8002e14:	0019      	movs	r1, r3
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	185b      	adds	r3, r3, r1
 8002e1a:	3230      	adds	r2, #48	@ 0x30
 8002e1c:	b2d2      	uxtb	r2, r2
 8002e1e:	701a      	strb	r2, [r3, #0]
			frac_part -= digit;
 8002e20:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002e22:	f7fe fb05 	bl	8001430 <__aeabi_i2f>
 8002e26:	1c03      	adds	r3, r0, #0
 8002e28:	1c19      	adds	r1, r3, #0
 8002e2a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002e2c:	f7fe f87c 	bl	8000f28 <__aeabi_fsub>
 8002e30:	1c03      	adds	r3, r0, #0
 8002e32:	637b      	str	r3, [r7, #52]	@ 0x34
		for (int i = 0; i < precision; i++) {
 8002e34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e36:	3301      	adds	r3, #1
 8002e38:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e3a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	dbd8      	blt.n	8002df4 <float_to_str+0xe8>
		}

		// Bỏ bớt số 0 dư ở cuối
		while (precision > 0 && buffer[idx - 1] == '0') {
 8002e42:	e005      	b.n	8002e50 <float_to_str+0x144>
			idx--;
 8002e44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e46:	3b01      	subs	r3, #1
 8002e48:	63fb      	str	r3, [r7, #60]	@ 0x3c
			precision--;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	3b01      	subs	r3, #1
 8002e4e:	607b      	str	r3, [r7, #4]
		while (precision > 0 && buffer[idx - 1] == '0') {
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	dd06      	ble.n	8002e64 <float_to_str+0x158>
 8002e56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e58:	3b01      	subs	r3, #1
 8002e5a:	68ba      	ldr	r2, [r7, #8]
 8002e5c:	18d3      	adds	r3, r2, r3
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	2b30      	cmp	r3, #48	@ 0x30
 8002e62:	d0ef      	beq.n	8002e44 <float_to_str+0x138>
		}
		if (buffer[idx - 1] == '.')
 8002e64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e66:	3b01      	subs	r3, #1
 8002e68:	68ba      	ldr	r2, [r7, #8]
 8002e6a:	18d3      	adds	r3, r2, r3
 8002e6c:	781b      	ldrb	r3, [r3, #0]
 8002e6e:	2b2e      	cmp	r3, #46	@ 0x2e
 8002e70:	d102      	bne.n	8002e78 <float_to_str+0x16c>
			idx--; // bỏ dấu "." nếu ko còn số thập phân
 8002e72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e74:	3b01      	subs	r3, #1
 8002e76:	63fb      	str	r3, [r7, #60]	@ 0x3c
	}

	buffer[idx] = '\0';
 8002e78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e7a:	68ba      	ldr	r2, [r7, #8]
 8002e7c:	18d3      	adds	r3, r2, r3
 8002e7e:	2200      	movs	r2, #0
 8002e80:	701a      	strb	r2, [r3, #0]
}
 8002e82:	46c0      	nop			@ (mov r8, r8)
 8002e84:	46bd      	mov	sp, r7
 8002e86:	b010      	add	sp, #64	@ 0x40
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	46c0      	nop			@ (mov r8, r8)
 8002e8c:	41200000 	.word	0x41200000

08002e90 <set_all_row_high>:

static GPIO_TypeDef *rowPort[4] = { GPIOA, GPIOA, GPIOA, GPIOA };
static uint16_t rowPin[4] = { PA5_Pin, PA6_Pin, PA7_Pin, PA8_Pin };

//Private function
static void set_all_row_high() {
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0
	for (int i = 0; i < 4; i++) {
 8002e96:	2300      	movs	r3, #0
 8002e98:	607b      	str	r3, [r7, #4]
 8002e9a:	e00e      	b.n	8002eba <set_all_row_high+0x2a>
		HAL_GPIO_WritePin(rowPort[i], rowPin[i], GPIO_PIN_SET);
 8002e9c:	4b0b      	ldr	r3, [pc, #44]	@ (8002ecc <set_all_row_high+0x3c>)
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	0092      	lsls	r2, r2, #2
 8002ea2:	58d0      	ldr	r0, [r2, r3]
 8002ea4:	4b0a      	ldr	r3, [pc, #40]	@ (8002ed0 <set_all_row_high+0x40>)
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	0052      	lsls	r2, r2, #1
 8002eaa:	5ad3      	ldrh	r3, [r2, r3]
 8002eac:	2201      	movs	r2, #1
 8002eae:	0019      	movs	r1, r3
 8002eb0:	f000 fd5f 	bl	8003972 <HAL_GPIO_WritePin>
	for (int i = 0; i < 4; i++) {
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	607b      	str	r3, [r7, #4]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2b03      	cmp	r3, #3
 8002ebe:	dded      	ble.n	8002e9c <set_all_row_high+0xc>
	}
}
 8002ec0:	46c0      	nop			@ (mov r8, r8)
 8002ec2:	46c0      	nop			@ (mov r8, r8)
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	b002      	add	sp, #8
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	46c0      	nop			@ (mov r8, r8)
 8002ecc:	20000034 	.word	0x20000034
 8002ed0:	20000044 	.word	0x20000044

08002ed4 <keyPad_scan>:

//Public function
char keyPad_scan(void) {
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b082      	sub	sp, #8
 8002ed8:	af00      	add	r7, sp, #0
	for (int i = 0; i < 4; i++) {
 8002eda:	2300      	movs	r3, #0
 8002edc:	607b      	str	r3, [r7, #4]
 8002ede:	e051      	b.n	8002f84 <keyPad_scan+0xb0>
		set_all_row_high();
 8002ee0:	f7ff ffd6 	bl	8002e90 <set_all_row_high>
		HAL_GPIO_WritePin(rowPort[i], rowPin[i], GPIO_PIN_RESET);
 8002ee4:	4b2b      	ldr	r3, [pc, #172]	@ (8002f94 <keyPad_scan+0xc0>)
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	0092      	lsls	r2, r2, #2
 8002eea:	58d0      	ldr	r0, [r2, r3]
 8002eec:	4b2a      	ldr	r3, [pc, #168]	@ (8002f98 <keyPad_scan+0xc4>)
 8002eee:	687a      	ldr	r2, [r7, #4]
 8002ef0:	0052      	lsls	r2, r2, #1
 8002ef2:	5ad3      	ldrh	r3, [r2, r3]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	0019      	movs	r1, r3
 8002ef8:	f000 fd3b 	bl	8003972 <HAL_GPIO_WritePin>

		for (int j = 0; j < 5; j++) {
 8002efc:	2300      	movs	r3, #0
 8002efe:	603b      	str	r3, [r7, #0]
 8002f00:	e03a      	b.n	8002f78 <keyPad_scan+0xa4>
			if (HAL_GPIO_ReadPin(colPort[j], colPin[j]) == GPIO_PIN_RESET) {
 8002f02:	4b26      	ldr	r3, [pc, #152]	@ (8002f9c <keyPad_scan+0xc8>)
 8002f04:	683a      	ldr	r2, [r7, #0]
 8002f06:	0092      	lsls	r2, r2, #2
 8002f08:	58d0      	ldr	r0, [r2, r3]
 8002f0a:	4b25      	ldr	r3, [pc, #148]	@ (8002fa0 <keyPad_scan+0xcc>)
 8002f0c:	683a      	ldr	r2, [r7, #0]
 8002f0e:	0052      	lsls	r2, r2, #1
 8002f10:	5ad3      	ldrh	r3, [r2, r3]
 8002f12:	0019      	movs	r1, r3
 8002f14:	f000 fd10 	bl	8003938 <HAL_GPIO_ReadPin>
 8002f18:	1e03      	subs	r3, r0, #0
 8002f1a:	d12a      	bne.n	8002f72 <keyPad_scan+0x9e>
				vTaskDelay(pdMS_TO_TICKS(20));
 8002f1c:	2014      	movs	r0, #20
 8002f1e:	f002 fbad 	bl	800567c <vTaskDelay>
				if (HAL_GPIO_ReadPin(colPort[j], colPin[j]) == GPIO_PIN_RESET) {
 8002f22:	4b1e      	ldr	r3, [pc, #120]	@ (8002f9c <keyPad_scan+0xc8>)
 8002f24:	683a      	ldr	r2, [r7, #0]
 8002f26:	0092      	lsls	r2, r2, #2
 8002f28:	58d0      	ldr	r0, [r2, r3]
 8002f2a:	4b1d      	ldr	r3, [pc, #116]	@ (8002fa0 <keyPad_scan+0xcc>)
 8002f2c:	683a      	ldr	r2, [r7, #0]
 8002f2e:	0052      	lsls	r2, r2, #1
 8002f30:	5ad3      	ldrh	r3, [r2, r3]
 8002f32:	0019      	movs	r1, r3
 8002f34:	f000 fd00 	bl	8003938 <HAL_GPIO_ReadPin>
 8002f38:	1e03      	subs	r3, r0, #0
 8002f3a:	d11a      	bne.n	8002f72 <keyPad_scan+0x9e>
					while (HAL_GPIO_ReadPin(colPort[j], colPin[j])
 8002f3c:	e002      	b.n	8002f44 <keyPad_scan+0x70>
							== GPIO_PIN_RESET) {
						vTaskDelay(pdMS_TO_TICKS(5));
 8002f3e:	2005      	movs	r0, #5
 8002f40:	f002 fb9c 	bl	800567c <vTaskDelay>
					while (HAL_GPIO_ReadPin(colPort[j], colPin[j])
 8002f44:	4b15      	ldr	r3, [pc, #84]	@ (8002f9c <keyPad_scan+0xc8>)
 8002f46:	683a      	ldr	r2, [r7, #0]
 8002f48:	0092      	lsls	r2, r2, #2
 8002f4a:	58d0      	ldr	r0, [r2, r3]
 8002f4c:	4b14      	ldr	r3, [pc, #80]	@ (8002fa0 <keyPad_scan+0xcc>)
 8002f4e:	683a      	ldr	r2, [r7, #0]
 8002f50:	0052      	lsls	r2, r2, #1
 8002f52:	5ad3      	ldrh	r3, [r2, r3]
 8002f54:	0019      	movs	r1, r3
 8002f56:	f000 fcef 	bl	8003938 <HAL_GPIO_ReadPin>
 8002f5a:	1e03      	subs	r3, r0, #0
							== GPIO_PIN_RESET) {
 8002f5c:	d0ef      	beq.n	8002f3e <keyPad_scan+0x6a>
					}
					return keypad[i][j];
 8002f5e:	4911      	ldr	r1, [pc, #68]	@ (8002fa4 <keyPad_scan+0xd0>)
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	0013      	movs	r3, r2
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	189b      	adds	r3, r3, r2
 8002f68:	18ca      	adds	r2, r1, r3
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	18d3      	adds	r3, r2, r3
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	e00c      	b.n	8002f8c <keyPad_scan+0xb8>
		for (int j = 0; j < 5; j++) {
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	3301      	adds	r3, #1
 8002f76:	603b      	str	r3, [r7, #0]
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	2b04      	cmp	r3, #4
 8002f7c:	ddc1      	ble.n	8002f02 <keyPad_scan+0x2e>
	for (int i = 0; i < 4; i++) {
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	3301      	adds	r3, #1
 8002f82:	607b      	str	r3, [r7, #4]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2b03      	cmp	r3, #3
 8002f88:	ddaa      	ble.n	8002ee0 <keyPad_scan+0xc>
				}
			}
		}
	}
	return 'c';
 8002f8a:	2363      	movs	r3, #99	@ 0x63
}
 8002f8c:	0018      	movs	r0, r3
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	b002      	add	sp, #8
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	20000034 	.word	0x20000034
 8002f98:	20000044 	.word	0x20000044
 8002f9c:	20000014 	.word	0x20000014
 8002fa0:	20000028 	.word	0x20000028
 8002fa4:	20000000 	.word	0x20000000

08002fa8 <vApplicationMallocFailedHook>:
/* USER CODE BEGIN PFP */
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void vApplicationMallocFailedHook(void) {
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	af00      	add	r7, sp, #0
	taskDISABLE_INTERRUPTS();
 8002fac:	b672      	cpsid	i
	for (;;)
 8002fae:	46c0      	nop			@ (mov r8, r8)
 8002fb0:	e7fd      	b.n	8002fae <vApplicationMallocFailedHook+0x6>

08002fb2 <vApplicationStackOverflowHook>:
		;
}

void vApplicationStackOverflowHook(TaskHandle_t xTask, char *pcTaskName) {
 8002fb2:	b580      	push	{r7, lr}
 8002fb4:	b082      	sub	sp, #8
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6078      	str	r0, [r7, #4]
 8002fba:	6039      	str	r1, [r7, #0]
	(void) xTask;
	(void) pcTaskName;
	taskDISABLE_INTERRUPTS();
 8002fbc:	b672      	cpsid	i
	for (;;)
 8002fbe:	46c0      	nop			@ (mov r8, r8)
 8002fc0:	e7fd      	b.n	8002fbe <vApplicationStackOverflowHook+0xc>
	...

08002fc4 <vTask_UpdateDisplay>:
		;
}

void vTask_UpdateDisplay(void *parameters) {
 8002fc4:	b5b0      	push	{r4, r5, r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
	char choice;
	LCD_setCursor(0, 0);
 8002fcc:	2100      	movs	r1, #0
 8002fce:	2000      	movs	r0, #0
 8002fd0:	f7ff f87b 	bl	80020ca <LCD_setCursor>
	LCD_puts("1.Tinh toan");
 8002fd4:	4b31      	ldr	r3, [pc, #196]	@ (800309c <vTask_UpdateDisplay+0xd8>)
 8002fd6:	0018      	movs	r0, r3
 8002fd8:	f7ff f8b4 	bl	8002144 <LCD_puts>
	LCD_setCursor(1, 0);
 8002fdc:	2100      	movs	r1, #0
 8002fde:	2001      	movs	r0, #1
 8002fe0:	f7ff f873 	bl	80020ca <LCD_setCursor>
	LCD_puts("2.Giai pt");
 8002fe4:	4b2e      	ldr	r3, [pc, #184]	@ (80030a0 <vTask_UpdateDisplay+0xdc>)
 8002fe6:	0018      	movs	r0, r3
 8002fe8:	f7ff f8ac 	bl	8002144 <LCD_puts>
	while (1) {
		choice = keyPad_scan();
 8002fec:	250f      	movs	r5, #15
 8002fee:	197c      	adds	r4, r7, r5
 8002ff0:	f7ff ff70 	bl	8002ed4 <keyPad_scan>
 8002ff4:	0003      	movs	r3, r0
 8002ff6:	7023      	strb	r3, [r4, #0]
		if (choice != 'c') {
 8002ff8:	197b      	adds	r3, r7, r5
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	2b63      	cmp	r3, #99	@ 0x63
 8002ffe:	d0f5      	beq.n	8002fec <vTask_UpdateDisplay+0x28>
			if (choice == '1') {
 8003000:	197b      	adds	r3, r7, r5
 8003002:	781b      	ldrb	r3, [r3, #0]
 8003004:	2b31      	cmp	r3, #49	@ 0x31
 8003006:	d121      	bne.n	800304c <vTask_UpdateDisplay+0x88>
				LCD_setCursor(0, 15);
 8003008:	210f      	movs	r1, #15
 800300a:	2000      	movs	r0, #0
 800300c:	f7ff f85d 	bl	80020ca <LCD_setCursor>
				LCD_puts(".");
 8003010:	4b24      	ldr	r3, [pc, #144]	@ (80030a4 <vTask_UpdateDisplay+0xe0>)
 8003012:	0018      	movs	r0, r3
 8003014:	f7ff f896 	bl	8002144 <LCD_puts>
				vTaskDelay(pdMS_TO_TICKS(500));
 8003018:	23fa      	movs	r3, #250	@ 0xfa
 800301a:	005b      	lsls	r3, r3, #1
 800301c:	0018      	movs	r0, r3
 800301e:	f002 fb2d 	bl	800567c <vTaskDelay>
				LCD_clear();
 8003022:	f7ff f847 	bl	80020b4 <LCD_clear>
				App_RunCalculatorMode();
 8003026:	f7ff f8a3 	bl	8002170 <App_RunCalculatorMode>
				LCD_setCursor(0, 0);
 800302a:	2100      	movs	r1, #0
 800302c:	2000      	movs	r0, #0
 800302e:	f7ff f84c 	bl	80020ca <LCD_setCursor>
				LCD_puts("1.Tinh toan");
 8003032:	4b1a      	ldr	r3, [pc, #104]	@ (800309c <vTask_UpdateDisplay+0xd8>)
 8003034:	0018      	movs	r0, r3
 8003036:	f7ff f885 	bl	8002144 <LCD_puts>
				LCD_setCursor(1, 0);
 800303a:	2100      	movs	r1, #0
 800303c:	2001      	movs	r0, #1
 800303e:	f7ff f844 	bl	80020ca <LCD_setCursor>
				LCD_puts("2.Giai pt");
 8003042:	4b17      	ldr	r3, [pc, #92]	@ (80030a0 <vTask_UpdateDisplay+0xdc>)
 8003044:	0018      	movs	r0, r3
 8003046:	f7ff f87d 	bl	8002144 <LCD_puts>
 800304a:	e7cf      	b.n	8002fec <vTask_UpdateDisplay+0x28>

			} else if (choice == '2') {
 800304c:	230f      	movs	r3, #15
 800304e:	18fb      	adds	r3, r7, r3
 8003050:	781b      	ldrb	r3, [r3, #0]
 8003052:	2b32      	cmp	r3, #50	@ 0x32
 8003054:	d1ca      	bne.n	8002fec <vTask_UpdateDisplay+0x28>
				LCD_setCursor(1, 15);
 8003056:	210f      	movs	r1, #15
 8003058:	2001      	movs	r0, #1
 800305a:	f7ff f836 	bl	80020ca <LCD_setCursor>
				LCD_puts(".");
 800305e:	4b11      	ldr	r3, [pc, #68]	@ (80030a4 <vTask_UpdateDisplay+0xe0>)
 8003060:	0018      	movs	r0, r3
 8003062:	f7ff f86f 	bl	8002144 <LCD_puts>
				vTaskDelay(pdMS_TO_TICKS(500));
 8003066:	23fa      	movs	r3, #250	@ 0xfa
 8003068:	005b      	lsls	r3, r3, #1
 800306a:	0018      	movs	r0, r3
 800306c:	f002 fb06 	bl	800567c <vTaskDelay>
				LCD_clear();
 8003070:	f7ff f820 	bl	80020b4 <LCD_clear>
				App_RunSolverMode();
 8003074:	f7ff f97c 	bl	8002370 <App_RunSolverMode>
				LCD_setCursor(0, 0);
 8003078:	2100      	movs	r1, #0
 800307a:	2000      	movs	r0, #0
 800307c:	f7ff f825 	bl	80020ca <LCD_setCursor>
				LCD_puts("1.Tinh toan");
 8003080:	4b06      	ldr	r3, [pc, #24]	@ (800309c <vTask_UpdateDisplay+0xd8>)
 8003082:	0018      	movs	r0, r3
 8003084:	f7ff f85e 	bl	8002144 <LCD_puts>
				LCD_setCursor(1, 0);
 8003088:	2100      	movs	r1, #0
 800308a:	2001      	movs	r0, #1
 800308c:	f7ff f81d 	bl	80020ca <LCD_setCursor>
				LCD_puts("2.Giai pt");
 8003090:	4b03      	ldr	r3, [pc, #12]	@ (80030a0 <vTask_UpdateDisplay+0xdc>)
 8003092:	0018      	movs	r0, r3
 8003094:	f7ff f856 	bl	8002144 <LCD_puts>
		choice = keyPad_scan();
 8003098:	e7a8      	b.n	8002fec <vTask_UpdateDisplay+0x28>
 800309a:	46c0      	nop			@ (mov r8, r8)
 800309c:	08006810 	.word	0x08006810
 80030a0:	0800681c 	.word	0x0800681c
 80030a4:	08006828 	.word	0x08006828

080030a8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80030ae:	f000 f9d1 	bl	8003454 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80030b2:	f000 f817 	bl	80030e4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80030b6:	f000 f855 	bl	8003164 <MX_GPIO_Init>
	/* USER CODE BEGIN 2 */
	LCD_init();
 80030ba:	f7fe ffd7 	bl	800206c <LCD_init>
	xTaskCreate(vTask_UpdateDisplay, "OUTPUT", 280, NULL, 1, NULL);
 80030be:	238c      	movs	r3, #140	@ 0x8c
 80030c0:	005a      	lsls	r2, r3, #1
 80030c2:	4906      	ldr	r1, [pc, #24]	@ (80030dc <main+0x34>)
 80030c4:	4806      	ldr	r0, [pc, #24]	@ (80030e0 <main+0x38>)
 80030c6:	2300      	movs	r3, #0
 80030c8:	9301      	str	r3, [sp, #4]
 80030ca:	2301      	movs	r3, #1
 80030cc:	9300      	str	r3, [sp, #0]
 80030ce:	2300      	movs	r3, #0
 80030d0:	f002 f9ae 	bl	8005430 <xTaskCreate>
	vTaskStartScheduler();
 80030d4:	f002 fb3c 	bl	8005750 <vTaskStartScheduler>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80030d8:	46c0      	nop			@ (mov r8, r8)
 80030da:	e7fd      	b.n	80030d8 <main+0x30>
 80030dc:	0800682c 	.word	0x0800682c
 80030e0:	08002fc5 	.word	0x08002fc5

080030e4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80030e4:	b590      	push	{r4, r7, lr}
 80030e6:	b091      	sub	sp, #68	@ 0x44
 80030e8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80030ea:	2410      	movs	r4, #16
 80030ec:	193b      	adds	r3, r7, r4
 80030ee:	0018      	movs	r0, r3
 80030f0:	2330      	movs	r3, #48	@ 0x30
 80030f2:	001a      	movs	r2, r3
 80030f4:	2100      	movs	r1, #0
 80030f6:	f003 fb05 	bl	8006704 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80030fa:	003b      	movs	r3, r7
 80030fc:	0018      	movs	r0, r3
 80030fe:	2310      	movs	r3, #16
 8003100:	001a      	movs	r2, r3
 8003102:	2100      	movs	r1, #0
 8003104:	f003 fafe 	bl	8006704 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003108:	0021      	movs	r1, r4
 800310a:	187b      	adds	r3, r7, r1
 800310c:	2202      	movs	r2, #2
 800310e:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003110:	187b      	adds	r3, r7, r1
 8003112:	2201      	movs	r2, #1
 8003114:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003116:	187b      	adds	r3, r7, r1
 8003118:	2210      	movs	r2, #16
 800311a:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800311c:	187b      	adds	r3, r7, r1
 800311e:	2200      	movs	r2, #0
 8003120:	621a      	str	r2, [r3, #32]
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8003122:	187b      	adds	r3, r7, r1
 8003124:	0018      	movs	r0, r3
 8003126:	f000 fc41 	bl	80039ac <HAL_RCC_OscConfig>
 800312a:	1e03      	subs	r3, r0, #0
 800312c:	d001      	beq.n	8003132 <SystemClock_Config+0x4e>
		Error_Handler();
 800312e:	f000 f89f 	bl	8003270 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8003132:	003b      	movs	r3, r7
 8003134:	2207      	movs	r2, #7
 8003136:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8003138:	003b      	movs	r3, r7
 800313a:	2200      	movs	r2, #0
 800313c:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800313e:	003b      	movs	r3, r7
 8003140:	2200      	movs	r2, #0
 8003142:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003144:	003b      	movs	r3, r7
 8003146:	2200      	movs	r2, #0
 8003148:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 800314a:	003b      	movs	r3, r7
 800314c:	2100      	movs	r1, #0
 800314e:	0018      	movs	r0, r3
 8003150:	f000 ff46 	bl	8003fe0 <HAL_RCC_ClockConfig>
 8003154:	1e03      	subs	r3, r0, #0
 8003156:	d001      	beq.n	800315c <SystemClock_Config+0x78>
		Error_Handler();
 8003158:	f000 f88a 	bl	8003270 <Error_Handler>
	}
}
 800315c:	46c0      	nop			@ (mov r8, r8)
 800315e:	46bd      	mov	sp, r7
 8003160:	b011      	add	sp, #68	@ 0x44
 8003162:	bd90      	pop	{r4, r7, pc}

08003164 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8003164:	b590      	push	{r4, r7, lr}
 8003166:	b089      	sub	sp, #36	@ 0x24
 8003168:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800316a:	240c      	movs	r4, #12
 800316c:	193b      	adds	r3, r7, r4
 800316e:	0018      	movs	r0, r3
 8003170:	2314      	movs	r3, #20
 8003172:	001a      	movs	r2, r3
 8003174:	2100      	movs	r1, #0
 8003176:	f003 fac5 	bl	8006704 <memset>
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800317a:	4b31      	ldr	r3, [pc, #196]	@ (8003240 <MX_GPIO_Init+0xdc>)
 800317c:	695a      	ldr	r2, [r3, #20]
 800317e:	4b30      	ldr	r3, [pc, #192]	@ (8003240 <MX_GPIO_Init+0xdc>)
 8003180:	2180      	movs	r1, #128	@ 0x80
 8003182:	0289      	lsls	r1, r1, #10
 8003184:	430a      	orrs	r2, r1
 8003186:	615a      	str	r2, [r3, #20]
 8003188:	4b2d      	ldr	r3, [pc, #180]	@ (8003240 <MX_GPIO_Init+0xdc>)
 800318a:	695a      	ldr	r2, [r3, #20]
 800318c:	2380      	movs	r3, #128	@ 0x80
 800318e:	029b      	lsls	r3, r3, #10
 8003190:	4013      	ands	r3, r2
 8003192:	60bb      	str	r3, [r7, #8]
 8003194:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8003196:	4b2a      	ldr	r3, [pc, #168]	@ (8003240 <MX_GPIO_Init+0xdc>)
 8003198:	695a      	ldr	r2, [r3, #20]
 800319a:	4b29      	ldr	r3, [pc, #164]	@ (8003240 <MX_GPIO_Init+0xdc>)
 800319c:	2180      	movs	r1, #128	@ 0x80
 800319e:	02c9      	lsls	r1, r1, #11
 80031a0:	430a      	orrs	r2, r1
 80031a2:	615a      	str	r2, [r3, #20]
 80031a4:	4b26      	ldr	r3, [pc, #152]	@ (8003240 <MX_GPIO_Init+0xdc>)
 80031a6:	695a      	ldr	r2, [r3, #20]
 80031a8:	2380      	movs	r3, #128	@ 0x80
 80031aa:	02db      	lsls	r3, r3, #11
 80031ac:	4013      	ands	r3, r2
 80031ae:	607b      	str	r3, [r7, #4]
 80031b0:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA,
 80031b2:	4924      	ldr	r1, [pc, #144]	@ (8003244 <MX_GPIO_Init+0xe0>)
 80031b4:	2390      	movs	r3, #144	@ 0x90
 80031b6:	05db      	lsls	r3, r3, #23
 80031b8:	2200      	movs	r2, #0
 80031ba:	0018      	movs	r0, r3
 80031bc:	f000 fbd9 	bl	8003972 <HAL_GPIO_WritePin>
			PA6_Pin | PA7_Pin | PA8_Pin | RS_Pin | EN_Pin | D4_Pin | D5_Pin
					| D6_Pin | PA5_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, GPIO_PIN_RESET);
 80031c0:	4b21      	ldr	r3, [pc, #132]	@ (8003248 <MX_GPIO_Init+0xe4>)
 80031c2:	2200      	movs	r2, #0
 80031c4:	2101      	movs	r1, #1
 80031c6:	0018      	movs	r0, r3
 80031c8:	f000 fbd3 	bl	8003972 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PA6_Pin PA7_Pin PA8_Pin RS_Pin
	 EN_Pin D4_Pin D5_Pin D6_Pin
	 PA5_Pin */
	GPIO_InitStruct.Pin = PA6_Pin | PA7_Pin | PA8_Pin | RS_Pin | EN_Pin | D4_Pin
 80031cc:	193b      	adds	r3, r7, r4
 80031ce:	4a1d      	ldr	r2, [pc, #116]	@ (8003244 <MX_GPIO_Init+0xe0>)
 80031d0:	601a      	str	r2, [r3, #0]
			| D5_Pin | D6_Pin | PA5_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031d2:	193b      	adds	r3, r7, r4
 80031d4:	2201      	movs	r2, #1
 80031d6:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031d8:	193b      	adds	r3, r7, r4
 80031da:	2200      	movs	r2, #0
 80031dc:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031de:	193b      	adds	r3, r7, r4
 80031e0:	2200      	movs	r2, #0
 80031e2:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031e4:	193a      	adds	r2, r7, r4
 80031e6:	2390      	movs	r3, #144	@ 0x90
 80031e8:	05db      	lsls	r3, r3, #23
 80031ea:	0011      	movs	r1, r2
 80031ec:	0018      	movs	r0, r3
 80031ee:	f000 fa33 	bl	8003658 <HAL_GPIO_Init>

	/*Configure GPIO pin : D7_Pin */
	GPIO_InitStruct.Pin = D7_Pin;
 80031f2:	193b      	adds	r3, r7, r4
 80031f4:	2201      	movs	r2, #1
 80031f6:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031f8:	193b      	adds	r3, r7, r4
 80031fa:	2201      	movs	r2, #1
 80031fc:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031fe:	193b      	adds	r3, r7, r4
 8003200:	2200      	movs	r2, #0
 8003202:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003204:	193b      	adds	r3, r7, r4
 8003206:	2200      	movs	r2, #0
 8003208:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(D7_GPIO_Port, &GPIO_InitStruct);
 800320a:	193b      	adds	r3, r7, r4
 800320c:	4a0e      	ldr	r2, [pc, #56]	@ (8003248 <MX_GPIO_Init+0xe4>)
 800320e:	0019      	movs	r1, r3
 8003210:	0010      	movs	r0, r2
 8003212:	f000 fa21 	bl	8003658 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA4_Pin PA3_Pin PA2_Pin PA1_Pin
	 PA0_Pin */
	GPIO_InitStruct.Pin = PA4_Pin | PA3_Pin | PA2_Pin | PA1_Pin | PA0_Pin;
 8003216:	0021      	movs	r1, r4
 8003218:	187b      	adds	r3, r7, r1
 800321a:	22f8      	movs	r2, #248	@ 0xf8
 800321c:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800321e:	187b      	adds	r3, r7, r1
 8003220:	2200      	movs	r2, #0
 8003222:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003224:	187b      	adds	r3, r7, r1
 8003226:	2201      	movs	r2, #1
 8003228:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800322a:	187b      	adds	r3, r7, r1
 800322c:	4a06      	ldr	r2, [pc, #24]	@ (8003248 <MX_GPIO_Init+0xe4>)
 800322e:	0019      	movs	r1, r3
 8003230:	0010      	movs	r0, r2
 8003232:	f000 fa11 	bl	8003658 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 8003236:	46c0      	nop			@ (mov r8, r8)
 8003238:	46bd      	mov	sp, r7
 800323a:	b009      	add	sp, #36	@ 0x24
 800323c:	bd90      	pop	{r4, r7, pc}
 800323e:	46c0      	nop			@ (mov r8, r8)
 8003240:	40021000 	.word	0x40021000
 8003244:	000080ff 	.word	0x000080ff
 8003248:	48000400 	.word	0x48000400

0800324c <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800324c:	b580      	push	{r7, lr}
 800324e:	b082      	sub	sp, #8
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM3) {
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a04      	ldr	r2, [pc, #16]	@ (800326c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d101      	bne.n	8003262 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 800325e:	f000 f90d 	bl	800347c <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8003262:	46c0      	nop			@ (mov r8, r8)
 8003264:	46bd      	mov	sp, r7
 8003266:	b002      	add	sp, #8
 8003268:	bd80      	pop	{r7, pc}
 800326a:	46c0      	nop			@ (mov r8, r8)
 800326c:	40000400 	.word	0x40000400

08003270 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8003270:	b580      	push	{r7, lr}
 8003272:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003274:	b672      	cpsid	i
}
 8003276:	46c0      	nop			@ (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003278:	46c0      	nop			@ (mov r8, r8)
 800327a:	e7fd      	b.n	8003278 <Error_Handler+0x8>

0800327c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b082      	sub	sp, #8
 8003280:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003282:	4b0f      	ldr	r3, [pc, #60]	@ (80032c0 <HAL_MspInit+0x44>)
 8003284:	699a      	ldr	r2, [r3, #24]
 8003286:	4b0e      	ldr	r3, [pc, #56]	@ (80032c0 <HAL_MspInit+0x44>)
 8003288:	2101      	movs	r1, #1
 800328a:	430a      	orrs	r2, r1
 800328c:	619a      	str	r2, [r3, #24]
 800328e:	4b0c      	ldr	r3, [pc, #48]	@ (80032c0 <HAL_MspInit+0x44>)
 8003290:	699b      	ldr	r3, [r3, #24]
 8003292:	2201      	movs	r2, #1
 8003294:	4013      	ands	r3, r2
 8003296:	607b      	str	r3, [r7, #4]
 8003298:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800329a:	4b09      	ldr	r3, [pc, #36]	@ (80032c0 <HAL_MspInit+0x44>)
 800329c:	69da      	ldr	r2, [r3, #28]
 800329e:	4b08      	ldr	r3, [pc, #32]	@ (80032c0 <HAL_MspInit+0x44>)
 80032a0:	2180      	movs	r1, #128	@ 0x80
 80032a2:	0549      	lsls	r1, r1, #21
 80032a4:	430a      	orrs	r2, r1
 80032a6:	61da      	str	r2, [r3, #28]
 80032a8:	4b05      	ldr	r3, [pc, #20]	@ (80032c0 <HAL_MspInit+0x44>)
 80032aa:	69da      	ldr	r2, [r3, #28]
 80032ac:	2380      	movs	r3, #128	@ 0x80
 80032ae:	055b      	lsls	r3, r3, #21
 80032b0:	4013      	ands	r3, r2
 80032b2:	603b      	str	r3, [r7, #0]
 80032b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032b6:	46c0      	nop			@ (mov r8, r8)
 80032b8:	46bd      	mov	sp, r7
 80032ba:	b002      	add	sp, #8
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	46c0      	nop			@ (mov r8, r8)
 80032c0:	40021000 	.word	0x40021000

080032c4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032c4:	b5b0      	push	{r4, r5, r7, lr}
 80032c6:	b08c      	sub	sp, #48	@ 0x30
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80032cc:	2300      	movs	r3, #0
 80032ce:	627b      	str	r3, [r7, #36]	@ 0x24

  uint32_t              uwPrescalerValue = 0U;
 80032d0:	2300      	movs	r3, #0
 80032d2:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 80032d4:	4b37      	ldr	r3, [pc, #220]	@ (80033b4 <HAL_InitTick+0xf0>)
 80032d6:	69da      	ldr	r2, [r3, #28]
 80032d8:	4b36      	ldr	r3, [pc, #216]	@ (80033b4 <HAL_InitTick+0xf0>)
 80032da:	2102      	movs	r1, #2
 80032dc:	430a      	orrs	r2, r1
 80032de:	61da      	str	r2, [r3, #28]
 80032e0:	4b34      	ldr	r3, [pc, #208]	@ (80033b4 <HAL_InitTick+0xf0>)
 80032e2:	69db      	ldr	r3, [r3, #28]
 80032e4:	2202      	movs	r2, #2
 80032e6:	4013      	ands	r3, r2
 80032e8:	60bb      	str	r3, [r7, #8]
 80032ea:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80032ec:	230c      	movs	r3, #12
 80032ee:	18fa      	adds	r2, r7, r3
 80032f0:	2410      	movs	r4, #16
 80032f2:	193b      	adds	r3, r7, r4
 80032f4:	0011      	movs	r1, r2
 80032f6:	0018      	movs	r0, r3
 80032f8:	f000 ffb6 	bl	8004268 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80032fc:	193b      	adds	r3, r7, r4
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003304:	2b00      	cmp	r3, #0
 8003306:	d104      	bne.n	8003312 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003308:	f000 ff98 	bl	800423c <HAL_RCC_GetPCLK1Freq>
 800330c:	0003      	movs	r3, r0
 800330e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003310:	e004      	b.n	800331c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003312:	f000 ff93 	bl	800423c <HAL_RCC_GetPCLK1Freq>
 8003316:	0003      	movs	r3, r0
 8003318:	005b      	lsls	r3, r3, #1
 800331a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800331c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800331e:	4926      	ldr	r1, [pc, #152]	@ (80033b8 <HAL_InitTick+0xf4>)
 8003320:	0018      	movs	r0, r3
 8003322:	f7fc fef9 	bl	8000118 <__udivsi3>
 8003326:	0003      	movs	r3, r0
 8003328:	3b01      	subs	r3, #1
 800332a:	623b      	str	r3, [r7, #32]

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 800332c:	4b23      	ldr	r3, [pc, #140]	@ (80033bc <HAL_InitTick+0xf8>)
 800332e:	4a24      	ldr	r2, [pc, #144]	@ (80033c0 <HAL_InitTick+0xfc>)
 8003330:	601a      	str	r2, [r3, #0]
   * Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8003332:	4b22      	ldr	r3, [pc, #136]	@ (80033bc <HAL_InitTick+0xf8>)
 8003334:	4a23      	ldr	r2, [pc, #140]	@ (80033c4 <HAL_InitTick+0x100>)
 8003336:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8003338:	4b20      	ldr	r3, [pc, #128]	@ (80033bc <HAL_InitTick+0xf8>)
 800333a:	6a3a      	ldr	r2, [r7, #32]
 800333c:	605a      	str	r2, [r3, #4]
  htim3.Init.ClockDivision = 0;
 800333e:	4b1f      	ldr	r3, [pc, #124]	@ (80033bc <HAL_InitTick+0xf8>)
 8003340:	2200      	movs	r2, #0
 8003342:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003344:	4b1d      	ldr	r3, [pc, #116]	@ (80033bc <HAL_InitTick+0xf8>)
 8003346:	2200      	movs	r2, #0
 8003348:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800334a:	4b1c      	ldr	r3, [pc, #112]	@ (80033bc <HAL_InitTick+0xf8>)
 800334c:	2200      	movs	r2, #0
 800334e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 8003350:	252b      	movs	r5, #43	@ 0x2b
 8003352:	197c      	adds	r4, r7, r5
 8003354:	4b19      	ldr	r3, [pc, #100]	@ (80033bc <HAL_InitTick+0xf8>)
 8003356:	0018      	movs	r0, r3
 8003358:	f000 ffb0 	bl	80042bc <HAL_TIM_Base_Init>
 800335c:	0003      	movs	r3, r0
 800335e:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 8003360:	197b      	adds	r3, r7, r5
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d11e      	bne.n	80033a6 <HAL_InitTick+0xe2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8003368:	197c      	adds	r4, r7, r5
 800336a:	4b14      	ldr	r3, [pc, #80]	@ (80033bc <HAL_InitTick+0xf8>)
 800336c:	0018      	movs	r0, r3
 800336e:	f000 fffd 	bl	800436c <HAL_TIM_Base_Start_IT>
 8003372:	0003      	movs	r3, r0
 8003374:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 8003376:	197b      	adds	r3, r7, r5
 8003378:	781b      	ldrb	r3, [r3, #0]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d113      	bne.n	80033a6 <HAL_InitTick+0xe2>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800337e:	2010      	movs	r0, #16
 8003380:	f000 f959 	bl	8003636 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2b03      	cmp	r3, #3
 8003388:	d809      	bhi.n	800339e <HAL_InitTick+0xda>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2200      	movs	r2, #0
 800338e:	0019      	movs	r1, r3
 8003390:	2010      	movs	r0, #16
 8003392:	f000 f93b 	bl	800360c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003396:	4b0c      	ldr	r3, [pc, #48]	@ (80033c8 <HAL_InitTick+0x104>)
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	601a      	str	r2, [r3, #0]
 800339c:	e003      	b.n	80033a6 <HAL_InitTick+0xe2>
      }
      else
      {
        status = HAL_ERROR;
 800339e:	232b      	movs	r3, #43	@ 0x2b
 80033a0:	18fb      	adds	r3, r7, r3
 80033a2:	2201      	movs	r2, #1
 80033a4:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 80033a6:	232b      	movs	r3, #43	@ 0x2b
 80033a8:	18fb      	adds	r3, r7, r3
 80033aa:	781b      	ldrb	r3, [r3, #0]
}
 80033ac:	0018      	movs	r0, r3
 80033ae:	46bd      	mov	sp, r7
 80033b0:	b00c      	add	sp, #48	@ 0x30
 80033b2:	bdb0      	pop	{r4, r5, r7, pc}
 80033b4:	40021000 	.word	0x40021000
 80033b8:	000f4240 	.word	0x000f4240
 80033bc:	20000080 	.word	0x20000080
 80033c0:	40000400 	.word	0x40000400
 80033c4:	000003e7 	.word	0x000003e7
 80033c8:	20000050 	.word	0x20000050

080033cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80033d0:	46c0      	nop			@ (mov r8, r8)
 80033d2:	e7fd      	b.n	80033d0 <NMI_Handler+0x4>

080033d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80033d8:	46c0      	nop			@ (mov r8, r8)
 80033da:	e7fd      	b.n	80033d8 <HardFault_Handler+0x4>

080033dc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80033e0:	4b03      	ldr	r3, [pc, #12]	@ (80033f0 <TIM3_IRQHandler+0x14>)
 80033e2:	0018      	movs	r0, r3
 80033e4:	f001 f808 	bl	80043f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80033e8:	46c0      	nop			@ (mov r8, r8)
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	46c0      	nop			@ (mov r8, r8)
 80033f0:	20000080 	.word	0x20000080

080033f4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80033f8:	46c0      	nop			@ (mov r8, r8)
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
	...

08003400 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003400:	480d      	ldr	r0, [pc, #52]	@ (8003438 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003402:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003404:	f7ff fff6 	bl	80033f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003408:	480c      	ldr	r0, [pc, #48]	@ (800343c <LoopForever+0x6>)
  ldr r1, =_edata
 800340a:	490d      	ldr	r1, [pc, #52]	@ (8003440 <LoopForever+0xa>)
  ldr r2, =_sidata
 800340c:	4a0d      	ldr	r2, [pc, #52]	@ (8003444 <LoopForever+0xe>)
  movs r3, #0
 800340e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003410:	e002      	b.n	8003418 <LoopCopyDataInit>

08003412 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003412:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003414:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003416:	3304      	adds	r3, #4

08003418 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003418:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800341a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800341c:	d3f9      	bcc.n	8003412 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800341e:	4a0a      	ldr	r2, [pc, #40]	@ (8003448 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003420:	4c0a      	ldr	r4, [pc, #40]	@ (800344c <LoopForever+0x16>)
  movs r3, #0
 8003422:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003424:	e001      	b.n	800342a <LoopFillZerobss>

08003426 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003426:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003428:	3204      	adds	r2, #4

0800342a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800342a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800342c:	d3fb      	bcc.n	8003426 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800342e:	f003 f9a1 	bl	8006774 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003432:	f7ff fe39 	bl	80030a8 <main>

08003436 <LoopForever>:

LoopForever:
    b LoopForever
 8003436:	e7fe      	b.n	8003436 <LoopForever>
  ldr   r0, =_estack
 8003438:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 800343c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003440:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8003444:	08006a30 	.word	0x08006a30
  ldr r2, =_sbss
 8003448:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800344c:	200009fc 	.word	0x200009fc

08003450 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003450:	e7fe      	b.n	8003450 <ADC1_IRQHandler>
	...

08003454 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003458:	4b07      	ldr	r3, [pc, #28]	@ (8003478 <HAL_Init+0x24>)
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	4b06      	ldr	r3, [pc, #24]	@ (8003478 <HAL_Init+0x24>)
 800345e:	2110      	movs	r1, #16
 8003460:	430a      	orrs	r2, r1
 8003462:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8003464:	2003      	movs	r0, #3
 8003466:	f7ff ff2d 	bl	80032c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800346a:	f7ff ff07 	bl	800327c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800346e:	2300      	movs	r3, #0
}
 8003470:	0018      	movs	r0, r3
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	46c0      	nop			@ (mov r8, r8)
 8003478:	40022000 	.word	0x40022000

0800347c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003480:	4b05      	ldr	r3, [pc, #20]	@ (8003498 <HAL_IncTick+0x1c>)
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	001a      	movs	r2, r3
 8003486:	4b05      	ldr	r3, [pc, #20]	@ (800349c <HAL_IncTick+0x20>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	18d2      	adds	r2, r2, r3
 800348c:	4b03      	ldr	r3, [pc, #12]	@ (800349c <HAL_IncTick+0x20>)
 800348e:	601a      	str	r2, [r3, #0]
}
 8003490:	46c0      	nop			@ (mov r8, r8)
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	46c0      	nop			@ (mov r8, r8)
 8003498:	20000054 	.word	0x20000054
 800349c:	200000c8 	.word	0x200000c8

080034a0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	af00      	add	r7, sp, #0
  return uwTick;
 80034a4:	4b02      	ldr	r3, [pc, #8]	@ (80034b0 <HAL_GetTick+0x10>)
 80034a6:	681b      	ldr	r3, [r3, #0]
}
 80034a8:	0018      	movs	r0, r3
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	46c0      	nop			@ (mov r8, r8)
 80034b0:	200000c8 	.word	0x200000c8

080034b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b084      	sub	sp, #16
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80034bc:	f7ff fff0 	bl	80034a0 <HAL_GetTick>
 80034c0:	0003      	movs	r3, r0
 80034c2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	3301      	adds	r3, #1
 80034cc:	d005      	beq.n	80034da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80034ce:	4b0a      	ldr	r3, [pc, #40]	@ (80034f8 <HAL_Delay+0x44>)
 80034d0:	781b      	ldrb	r3, [r3, #0]
 80034d2:	001a      	movs	r2, r3
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	189b      	adds	r3, r3, r2
 80034d8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80034da:	46c0      	nop			@ (mov r8, r8)
 80034dc:	f7ff ffe0 	bl	80034a0 <HAL_GetTick>
 80034e0:	0002      	movs	r2, r0
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	68fa      	ldr	r2, [r7, #12]
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d8f7      	bhi.n	80034dc <HAL_Delay+0x28>
  {
  }
}
 80034ec:	46c0      	nop			@ (mov r8, r8)
 80034ee:	46c0      	nop			@ (mov r8, r8)
 80034f0:	46bd      	mov	sp, r7
 80034f2:	b004      	add	sp, #16
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	46c0      	nop			@ (mov r8, r8)
 80034f8:	20000054 	.word	0x20000054

080034fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b082      	sub	sp, #8
 8003500:	af00      	add	r7, sp, #0
 8003502:	0002      	movs	r2, r0
 8003504:	1dfb      	adds	r3, r7, #7
 8003506:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003508:	1dfb      	adds	r3, r7, #7
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	2b7f      	cmp	r3, #127	@ 0x7f
 800350e:	d809      	bhi.n	8003524 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003510:	1dfb      	adds	r3, r7, #7
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	001a      	movs	r2, r3
 8003516:	231f      	movs	r3, #31
 8003518:	401a      	ands	r2, r3
 800351a:	4b04      	ldr	r3, [pc, #16]	@ (800352c <__NVIC_EnableIRQ+0x30>)
 800351c:	2101      	movs	r1, #1
 800351e:	4091      	lsls	r1, r2
 8003520:	000a      	movs	r2, r1
 8003522:	601a      	str	r2, [r3, #0]
  }
}
 8003524:	46c0      	nop			@ (mov r8, r8)
 8003526:	46bd      	mov	sp, r7
 8003528:	b002      	add	sp, #8
 800352a:	bd80      	pop	{r7, pc}
 800352c:	e000e100 	.word	0xe000e100

08003530 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003530:	b590      	push	{r4, r7, lr}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	0002      	movs	r2, r0
 8003538:	6039      	str	r1, [r7, #0]
 800353a:	1dfb      	adds	r3, r7, #7
 800353c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800353e:	1dfb      	adds	r3, r7, #7
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	2b7f      	cmp	r3, #127	@ 0x7f
 8003544:	d828      	bhi.n	8003598 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003546:	4a2f      	ldr	r2, [pc, #188]	@ (8003604 <__NVIC_SetPriority+0xd4>)
 8003548:	1dfb      	adds	r3, r7, #7
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	b25b      	sxtb	r3, r3
 800354e:	089b      	lsrs	r3, r3, #2
 8003550:	33c0      	adds	r3, #192	@ 0xc0
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	589b      	ldr	r3, [r3, r2]
 8003556:	1dfa      	adds	r2, r7, #7
 8003558:	7812      	ldrb	r2, [r2, #0]
 800355a:	0011      	movs	r1, r2
 800355c:	2203      	movs	r2, #3
 800355e:	400a      	ands	r2, r1
 8003560:	00d2      	lsls	r2, r2, #3
 8003562:	21ff      	movs	r1, #255	@ 0xff
 8003564:	4091      	lsls	r1, r2
 8003566:	000a      	movs	r2, r1
 8003568:	43d2      	mvns	r2, r2
 800356a:	401a      	ands	r2, r3
 800356c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	019b      	lsls	r3, r3, #6
 8003572:	22ff      	movs	r2, #255	@ 0xff
 8003574:	401a      	ands	r2, r3
 8003576:	1dfb      	adds	r3, r7, #7
 8003578:	781b      	ldrb	r3, [r3, #0]
 800357a:	0018      	movs	r0, r3
 800357c:	2303      	movs	r3, #3
 800357e:	4003      	ands	r3, r0
 8003580:	00db      	lsls	r3, r3, #3
 8003582:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003584:	481f      	ldr	r0, [pc, #124]	@ (8003604 <__NVIC_SetPriority+0xd4>)
 8003586:	1dfb      	adds	r3, r7, #7
 8003588:	781b      	ldrb	r3, [r3, #0]
 800358a:	b25b      	sxtb	r3, r3
 800358c:	089b      	lsrs	r3, r3, #2
 800358e:	430a      	orrs	r2, r1
 8003590:	33c0      	adds	r3, #192	@ 0xc0
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003596:	e031      	b.n	80035fc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003598:	4a1b      	ldr	r2, [pc, #108]	@ (8003608 <__NVIC_SetPriority+0xd8>)
 800359a:	1dfb      	adds	r3, r7, #7
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	0019      	movs	r1, r3
 80035a0:	230f      	movs	r3, #15
 80035a2:	400b      	ands	r3, r1
 80035a4:	3b08      	subs	r3, #8
 80035a6:	089b      	lsrs	r3, r3, #2
 80035a8:	3306      	adds	r3, #6
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	18d3      	adds	r3, r2, r3
 80035ae:	3304      	adds	r3, #4
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	1dfa      	adds	r2, r7, #7
 80035b4:	7812      	ldrb	r2, [r2, #0]
 80035b6:	0011      	movs	r1, r2
 80035b8:	2203      	movs	r2, #3
 80035ba:	400a      	ands	r2, r1
 80035bc:	00d2      	lsls	r2, r2, #3
 80035be:	21ff      	movs	r1, #255	@ 0xff
 80035c0:	4091      	lsls	r1, r2
 80035c2:	000a      	movs	r2, r1
 80035c4:	43d2      	mvns	r2, r2
 80035c6:	401a      	ands	r2, r3
 80035c8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	019b      	lsls	r3, r3, #6
 80035ce:	22ff      	movs	r2, #255	@ 0xff
 80035d0:	401a      	ands	r2, r3
 80035d2:	1dfb      	adds	r3, r7, #7
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	0018      	movs	r0, r3
 80035d8:	2303      	movs	r3, #3
 80035da:	4003      	ands	r3, r0
 80035dc:	00db      	lsls	r3, r3, #3
 80035de:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80035e0:	4809      	ldr	r0, [pc, #36]	@ (8003608 <__NVIC_SetPriority+0xd8>)
 80035e2:	1dfb      	adds	r3, r7, #7
 80035e4:	781b      	ldrb	r3, [r3, #0]
 80035e6:	001c      	movs	r4, r3
 80035e8:	230f      	movs	r3, #15
 80035ea:	4023      	ands	r3, r4
 80035ec:	3b08      	subs	r3, #8
 80035ee:	089b      	lsrs	r3, r3, #2
 80035f0:	430a      	orrs	r2, r1
 80035f2:	3306      	adds	r3, #6
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	18c3      	adds	r3, r0, r3
 80035f8:	3304      	adds	r3, #4
 80035fa:	601a      	str	r2, [r3, #0]
}
 80035fc:	46c0      	nop			@ (mov r8, r8)
 80035fe:	46bd      	mov	sp, r7
 8003600:	b003      	add	sp, #12
 8003602:	bd90      	pop	{r4, r7, pc}
 8003604:	e000e100 	.word	0xe000e100
 8003608:	e000ed00 	.word	0xe000ed00

0800360c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b084      	sub	sp, #16
 8003610:	af00      	add	r7, sp, #0
 8003612:	60b9      	str	r1, [r7, #8]
 8003614:	607a      	str	r2, [r7, #4]
 8003616:	210f      	movs	r1, #15
 8003618:	187b      	adds	r3, r7, r1
 800361a:	1c02      	adds	r2, r0, #0
 800361c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800361e:	68ba      	ldr	r2, [r7, #8]
 8003620:	187b      	adds	r3, r7, r1
 8003622:	781b      	ldrb	r3, [r3, #0]
 8003624:	b25b      	sxtb	r3, r3
 8003626:	0011      	movs	r1, r2
 8003628:	0018      	movs	r0, r3
 800362a:	f7ff ff81 	bl	8003530 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 800362e:	46c0      	nop			@ (mov r8, r8)
 8003630:	46bd      	mov	sp, r7
 8003632:	b004      	add	sp, #16
 8003634:	bd80      	pop	{r7, pc}

08003636 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003636:	b580      	push	{r7, lr}
 8003638:	b082      	sub	sp, #8
 800363a:	af00      	add	r7, sp, #0
 800363c:	0002      	movs	r2, r0
 800363e:	1dfb      	adds	r3, r7, #7
 8003640:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003642:	1dfb      	adds	r3, r7, #7
 8003644:	781b      	ldrb	r3, [r3, #0]
 8003646:	b25b      	sxtb	r3, r3
 8003648:	0018      	movs	r0, r3
 800364a:	f7ff ff57 	bl	80034fc <__NVIC_EnableIRQ>
}
 800364e:	46c0      	nop			@ (mov r8, r8)
 8003650:	46bd      	mov	sp, r7
 8003652:	b002      	add	sp, #8
 8003654:	bd80      	pop	{r7, pc}
	...

08003658 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b086      	sub	sp, #24
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
 8003660:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003662:	2300      	movs	r3, #0
 8003664:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003666:	e14f      	b.n	8003908 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	2101      	movs	r1, #1
 800366e:	697a      	ldr	r2, [r7, #20]
 8003670:	4091      	lsls	r1, r2
 8003672:	000a      	movs	r2, r1
 8003674:	4013      	ands	r3, r2
 8003676:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d100      	bne.n	8003680 <HAL_GPIO_Init+0x28>
 800367e:	e140      	b.n	8003902 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	2203      	movs	r2, #3
 8003686:	4013      	ands	r3, r2
 8003688:	2b01      	cmp	r3, #1
 800368a:	d005      	beq.n	8003698 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	2203      	movs	r2, #3
 8003692:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003694:	2b02      	cmp	r3, #2
 8003696:	d130      	bne.n	80036fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	005b      	lsls	r3, r3, #1
 80036a2:	2203      	movs	r2, #3
 80036a4:	409a      	lsls	r2, r3
 80036a6:	0013      	movs	r3, r2
 80036a8:	43da      	mvns	r2, r3
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	4013      	ands	r3, r2
 80036ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	68da      	ldr	r2, [r3, #12]
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	005b      	lsls	r3, r3, #1
 80036b8:	409a      	lsls	r2, r3
 80036ba:	0013      	movs	r3, r2
 80036bc:	693a      	ldr	r2, [r7, #16]
 80036be:	4313      	orrs	r3, r2
 80036c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	693a      	ldr	r2, [r7, #16]
 80036c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036ce:	2201      	movs	r2, #1
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	409a      	lsls	r2, r3
 80036d4:	0013      	movs	r3, r2
 80036d6:	43da      	mvns	r2, r3
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	4013      	ands	r3, r2
 80036dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	091b      	lsrs	r3, r3, #4
 80036e4:	2201      	movs	r2, #1
 80036e6:	401a      	ands	r2, r3
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	409a      	lsls	r2, r3
 80036ec:	0013      	movs	r3, r2
 80036ee:	693a      	ldr	r2, [r7, #16]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	693a      	ldr	r2, [r7, #16]
 80036f8:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	2203      	movs	r2, #3
 8003700:	4013      	ands	r3, r2
 8003702:	2b03      	cmp	r3, #3
 8003704:	d017      	beq.n	8003736 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	68db      	ldr	r3, [r3, #12]
 800370a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	005b      	lsls	r3, r3, #1
 8003710:	2203      	movs	r2, #3
 8003712:	409a      	lsls	r2, r3
 8003714:	0013      	movs	r3, r2
 8003716:	43da      	mvns	r2, r3
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	4013      	ands	r3, r2
 800371c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	689a      	ldr	r2, [r3, #8]
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	005b      	lsls	r3, r3, #1
 8003726:	409a      	lsls	r2, r3
 8003728:	0013      	movs	r3, r2
 800372a:	693a      	ldr	r2, [r7, #16]
 800372c:	4313      	orrs	r3, r2
 800372e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	693a      	ldr	r2, [r7, #16]
 8003734:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	2203      	movs	r2, #3
 800373c:	4013      	ands	r3, r2
 800373e:	2b02      	cmp	r3, #2
 8003740:	d123      	bne.n	800378a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	08da      	lsrs	r2, r3, #3
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	3208      	adds	r2, #8
 800374a:	0092      	lsls	r2, r2, #2
 800374c:	58d3      	ldr	r3, [r2, r3]
 800374e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	2207      	movs	r2, #7
 8003754:	4013      	ands	r3, r2
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	220f      	movs	r2, #15
 800375a:	409a      	lsls	r2, r3
 800375c:	0013      	movs	r3, r2
 800375e:	43da      	mvns	r2, r3
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	4013      	ands	r3, r2
 8003764:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	691a      	ldr	r2, [r3, #16]
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	2107      	movs	r1, #7
 800376e:	400b      	ands	r3, r1
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	409a      	lsls	r2, r3
 8003774:	0013      	movs	r3, r2
 8003776:	693a      	ldr	r2, [r7, #16]
 8003778:	4313      	orrs	r3, r2
 800377a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	08da      	lsrs	r2, r3, #3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	3208      	adds	r2, #8
 8003784:	0092      	lsls	r2, r2, #2
 8003786:	6939      	ldr	r1, [r7, #16]
 8003788:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	005b      	lsls	r3, r3, #1
 8003794:	2203      	movs	r2, #3
 8003796:	409a      	lsls	r2, r3
 8003798:	0013      	movs	r3, r2
 800379a:	43da      	mvns	r2, r3
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	4013      	ands	r3, r2
 80037a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	2203      	movs	r2, #3
 80037a8:	401a      	ands	r2, r3
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	005b      	lsls	r3, r3, #1
 80037ae:	409a      	lsls	r2, r3
 80037b0:	0013      	movs	r3, r2
 80037b2:	693a      	ldr	r2, [r7, #16]
 80037b4:	4313      	orrs	r3, r2
 80037b6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	693a      	ldr	r2, [r7, #16]
 80037bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	685a      	ldr	r2, [r3, #4]
 80037c2:	23c0      	movs	r3, #192	@ 0xc0
 80037c4:	029b      	lsls	r3, r3, #10
 80037c6:	4013      	ands	r3, r2
 80037c8:	d100      	bne.n	80037cc <HAL_GPIO_Init+0x174>
 80037ca:	e09a      	b.n	8003902 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037cc:	4b54      	ldr	r3, [pc, #336]	@ (8003920 <HAL_GPIO_Init+0x2c8>)
 80037ce:	699a      	ldr	r2, [r3, #24]
 80037d0:	4b53      	ldr	r3, [pc, #332]	@ (8003920 <HAL_GPIO_Init+0x2c8>)
 80037d2:	2101      	movs	r1, #1
 80037d4:	430a      	orrs	r2, r1
 80037d6:	619a      	str	r2, [r3, #24]
 80037d8:	4b51      	ldr	r3, [pc, #324]	@ (8003920 <HAL_GPIO_Init+0x2c8>)
 80037da:	699b      	ldr	r3, [r3, #24]
 80037dc:	2201      	movs	r2, #1
 80037de:	4013      	ands	r3, r2
 80037e0:	60bb      	str	r3, [r7, #8]
 80037e2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80037e4:	4a4f      	ldr	r2, [pc, #316]	@ (8003924 <HAL_GPIO_Init+0x2cc>)
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	089b      	lsrs	r3, r3, #2
 80037ea:	3302      	adds	r3, #2
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	589b      	ldr	r3, [r3, r2]
 80037f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	2203      	movs	r2, #3
 80037f6:	4013      	ands	r3, r2
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	220f      	movs	r2, #15
 80037fc:	409a      	lsls	r2, r3
 80037fe:	0013      	movs	r3, r2
 8003800:	43da      	mvns	r2, r3
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	4013      	ands	r3, r2
 8003806:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	2390      	movs	r3, #144	@ 0x90
 800380c:	05db      	lsls	r3, r3, #23
 800380e:	429a      	cmp	r2, r3
 8003810:	d013      	beq.n	800383a <HAL_GPIO_Init+0x1e2>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4a44      	ldr	r2, [pc, #272]	@ (8003928 <HAL_GPIO_Init+0x2d0>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d00d      	beq.n	8003836 <HAL_GPIO_Init+0x1de>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	4a43      	ldr	r2, [pc, #268]	@ (800392c <HAL_GPIO_Init+0x2d4>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d007      	beq.n	8003832 <HAL_GPIO_Init+0x1da>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4a42      	ldr	r2, [pc, #264]	@ (8003930 <HAL_GPIO_Init+0x2d8>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d101      	bne.n	800382e <HAL_GPIO_Init+0x1d6>
 800382a:	2303      	movs	r3, #3
 800382c:	e006      	b.n	800383c <HAL_GPIO_Init+0x1e4>
 800382e:	2305      	movs	r3, #5
 8003830:	e004      	b.n	800383c <HAL_GPIO_Init+0x1e4>
 8003832:	2302      	movs	r3, #2
 8003834:	e002      	b.n	800383c <HAL_GPIO_Init+0x1e4>
 8003836:	2301      	movs	r3, #1
 8003838:	e000      	b.n	800383c <HAL_GPIO_Init+0x1e4>
 800383a:	2300      	movs	r3, #0
 800383c:	697a      	ldr	r2, [r7, #20]
 800383e:	2103      	movs	r1, #3
 8003840:	400a      	ands	r2, r1
 8003842:	0092      	lsls	r2, r2, #2
 8003844:	4093      	lsls	r3, r2
 8003846:	693a      	ldr	r2, [r7, #16]
 8003848:	4313      	orrs	r3, r2
 800384a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800384c:	4935      	ldr	r1, [pc, #212]	@ (8003924 <HAL_GPIO_Init+0x2cc>)
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	089b      	lsrs	r3, r3, #2
 8003852:	3302      	adds	r3, #2
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	693a      	ldr	r2, [r7, #16]
 8003858:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800385a:	4b36      	ldr	r3, [pc, #216]	@ (8003934 <HAL_GPIO_Init+0x2dc>)
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	43da      	mvns	r2, r3
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	4013      	ands	r3, r2
 8003868:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	685a      	ldr	r2, [r3, #4]
 800386e:	2380      	movs	r3, #128	@ 0x80
 8003870:	035b      	lsls	r3, r3, #13
 8003872:	4013      	ands	r3, r2
 8003874:	d003      	beq.n	800387e <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8003876:	693a      	ldr	r2, [r7, #16]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	4313      	orrs	r3, r2
 800387c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800387e:	4b2d      	ldr	r3, [pc, #180]	@ (8003934 <HAL_GPIO_Init+0x2dc>)
 8003880:	693a      	ldr	r2, [r7, #16]
 8003882:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003884:	4b2b      	ldr	r3, [pc, #172]	@ (8003934 <HAL_GPIO_Init+0x2dc>)
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	43da      	mvns	r2, r3
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	4013      	ands	r3, r2
 8003892:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	685a      	ldr	r2, [r3, #4]
 8003898:	2380      	movs	r3, #128	@ 0x80
 800389a:	039b      	lsls	r3, r3, #14
 800389c:	4013      	ands	r3, r2
 800389e:	d003      	beq.n	80038a8 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80038a0:	693a      	ldr	r2, [r7, #16]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	4313      	orrs	r3, r2
 80038a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80038a8:	4b22      	ldr	r3, [pc, #136]	@ (8003934 <HAL_GPIO_Init+0x2dc>)
 80038aa:	693a      	ldr	r2, [r7, #16]
 80038ac:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80038ae:	4b21      	ldr	r3, [pc, #132]	@ (8003934 <HAL_GPIO_Init+0x2dc>)
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	43da      	mvns	r2, r3
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	4013      	ands	r3, r2
 80038bc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	685a      	ldr	r2, [r3, #4]
 80038c2:	2380      	movs	r3, #128	@ 0x80
 80038c4:	029b      	lsls	r3, r3, #10
 80038c6:	4013      	ands	r3, r2
 80038c8:	d003      	beq.n	80038d2 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80038ca:	693a      	ldr	r2, [r7, #16]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80038d2:	4b18      	ldr	r3, [pc, #96]	@ (8003934 <HAL_GPIO_Init+0x2dc>)
 80038d4:	693a      	ldr	r2, [r7, #16]
 80038d6:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80038d8:	4b16      	ldr	r3, [pc, #88]	@ (8003934 <HAL_GPIO_Init+0x2dc>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	43da      	mvns	r2, r3
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	4013      	ands	r3, r2
 80038e6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	685a      	ldr	r2, [r3, #4]
 80038ec:	2380      	movs	r3, #128	@ 0x80
 80038ee:	025b      	lsls	r3, r3, #9
 80038f0:	4013      	ands	r3, r2
 80038f2:	d003      	beq.n	80038fc <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80038f4:	693a      	ldr	r2, [r7, #16]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	4313      	orrs	r3, r2
 80038fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80038fc:	4b0d      	ldr	r3, [pc, #52]	@ (8003934 <HAL_GPIO_Init+0x2dc>)
 80038fe:	693a      	ldr	r2, [r7, #16]
 8003900:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	3301      	adds	r3, #1
 8003906:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	40da      	lsrs	r2, r3
 8003910:	1e13      	subs	r3, r2, #0
 8003912:	d000      	beq.n	8003916 <HAL_GPIO_Init+0x2be>
 8003914:	e6a8      	b.n	8003668 <HAL_GPIO_Init+0x10>
  } 
}
 8003916:	46c0      	nop			@ (mov r8, r8)
 8003918:	46c0      	nop			@ (mov r8, r8)
 800391a:	46bd      	mov	sp, r7
 800391c:	b006      	add	sp, #24
 800391e:	bd80      	pop	{r7, pc}
 8003920:	40021000 	.word	0x40021000
 8003924:	40010000 	.word	0x40010000
 8003928:	48000400 	.word	0x48000400
 800392c:	48000800 	.word	0x48000800
 8003930:	48000c00 	.word	0x48000c00
 8003934:	40010400 	.word	0x40010400

08003938 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	000a      	movs	r2, r1
 8003942:	1cbb      	adds	r3, r7, #2
 8003944:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	691b      	ldr	r3, [r3, #16]
 800394a:	1cba      	adds	r2, r7, #2
 800394c:	8812      	ldrh	r2, [r2, #0]
 800394e:	4013      	ands	r3, r2
 8003950:	d004      	beq.n	800395c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003952:	230f      	movs	r3, #15
 8003954:	18fb      	adds	r3, r7, r3
 8003956:	2201      	movs	r2, #1
 8003958:	701a      	strb	r2, [r3, #0]
 800395a:	e003      	b.n	8003964 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800395c:	230f      	movs	r3, #15
 800395e:	18fb      	adds	r3, r7, r3
 8003960:	2200      	movs	r2, #0
 8003962:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003964:	230f      	movs	r3, #15
 8003966:	18fb      	adds	r3, r7, r3
 8003968:	781b      	ldrb	r3, [r3, #0]
  }
 800396a:	0018      	movs	r0, r3
 800396c:	46bd      	mov	sp, r7
 800396e:	b004      	add	sp, #16
 8003970:	bd80      	pop	{r7, pc}

08003972 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003972:	b580      	push	{r7, lr}
 8003974:	b082      	sub	sp, #8
 8003976:	af00      	add	r7, sp, #0
 8003978:	6078      	str	r0, [r7, #4]
 800397a:	0008      	movs	r0, r1
 800397c:	0011      	movs	r1, r2
 800397e:	1cbb      	adds	r3, r7, #2
 8003980:	1c02      	adds	r2, r0, #0
 8003982:	801a      	strh	r2, [r3, #0]
 8003984:	1c7b      	adds	r3, r7, #1
 8003986:	1c0a      	adds	r2, r1, #0
 8003988:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800398a:	1c7b      	adds	r3, r7, #1
 800398c:	781b      	ldrb	r3, [r3, #0]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d004      	beq.n	800399c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003992:	1cbb      	adds	r3, r7, #2
 8003994:	881a      	ldrh	r2, [r3, #0]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800399a:	e003      	b.n	80039a4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800399c:	1cbb      	adds	r3, r7, #2
 800399e:	881a      	ldrh	r2, [r3, #0]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80039a4:	46c0      	nop			@ (mov r8, r8)
 80039a6:	46bd      	mov	sp, r7
 80039a8:	b002      	add	sp, #8
 80039aa:	bd80      	pop	{r7, pc}

080039ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b088      	sub	sp, #32
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d101      	bne.n	80039be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e301      	b.n	8003fc2 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	2201      	movs	r2, #1
 80039c4:	4013      	ands	r3, r2
 80039c6:	d100      	bne.n	80039ca <HAL_RCC_OscConfig+0x1e>
 80039c8:	e08d      	b.n	8003ae6 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80039ca:	4bc3      	ldr	r3, [pc, #780]	@ (8003cd8 <HAL_RCC_OscConfig+0x32c>)
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	220c      	movs	r2, #12
 80039d0:	4013      	ands	r3, r2
 80039d2:	2b04      	cmp	r3, #4
 80039d4:	d00e      	beq.n	80039f4 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80039d6:	4bc0      	ldr	r3, [pc, #768]	@ (8003cd8 <HAL_RCC_OscConfig+0x32c>)
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	220c      	movs	r2, #12
 80039dc:	4013      	ands	r3, r2
 80039de:	2b08      	cmp	r3, #8
 80039e0:	d116      	bne.n	8003a10 <HAL_RCC_OscConfig+0x64>
 80039e2:	4bbd      	ldr	r3, [pc, #756]	@ (8003cd8 <HAL_RCC_OscConfig+0x32c>)
 80039e4:	685a      	ldr	r2, [r3, #4]
 80039e6:	2380      	movs	r3, #128	@ 0x80
 80039e8:	025b      	lsls	r3, r3, #9
 80039ea:	401a      	ands	r2, r3
 80039ec:	2380      	movs	r3, #128	@ 0x80
 80039ee:	025b      	lsls	r3, r3, #9
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d10d      	bne.n	8003a10 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039f4:	4bb8      	ldr	r3, [pc, #736]	@ (8003cd8 <HAL_RCC_OscConfig+0x32c>)
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	2380      	movs	r3, #128	@ 0x80
 80039fa:	029b      	lsls	r3, r3, #10
 80039fc:	4013      	ands	r3, r2
 80039fe:	d100      	bne.n	8003a02 <HAL_RCC_OscConfig+0x56>
 8003a00:	e070      	b.n	8003ae4 <HAL_RCC_OscConfig+0x138>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d000      	beq.n	8003a0c <HAL_RCC_OscConfig+0x60>
 8003a0a:	e06b      	b.n	8003ae4 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e2d8      	b.n	8003fc2 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d107      	bne.n	8003a28 <HAL_RCC_OscConfig+0x7c>
 8003a18:	4baf      	ldr	r3, [pc, #700]	@ (8003cd8 <HAL_RCC_OscConfig+0x32c>)
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	4bae      	ldr	r3, [pc, #696]	@ (8003cd8 <HAL_RCC_OscConfig+0x32c>)
 8003a1e:	2180      	movs	r1, #128	@ 0x80
 8003a20:	0249      	lsls	r1, r1, #9
 8003a22:	430a      	orrs	r2, r1
 8003a24:	601a      	str	r2, [r3, #0]
 8003a26:	e02f      	b.n	8003a88 <HAL_RCC_OscConfig+0xdc>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d10c      	bne.n	8003a4a <HAL_RCC_OscConfig+0x9e>
 8003a30:	4ba9      	ldr	r3, [pc, #676]	@ (8003cd8 <HAL_RCC_OscConfig+0x32c>)
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	4ba8      	ldr	r3, [pc, #672]	@ (8003cd8 <HAL_RCC_OscConfig+0x32c>)
 8003a36:	49a9      	ldr	r1, [pc, #676]	@ (8003cdc <HAL_RCC_OscConfig+0x330>)
 8003a38:	400a      	ands	r2, r1
 8003a3a:	601a      	str	r2, [r3, #0]
 8003a3c:	4ba6      	ldr	r3, [pc, #664]	@ (8003cd8 <HAL_RCC_OscConfig+0x32c>)
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	4ba5      	ldr	r3, [pc, #660]	@ (8003cd8 <HAL_RCC_OscConfig+0x32c>)
 8003a42:	49a7      	ldr	r1, [pc, #668]	@ (8003ce0 <HAL_RCC_OscConfig+0x334>)
 8003a44:	400a      	ands	r2, r1
 8003a46:	601a      	str	r2, [r3, #0]
 8003a48:	e01e      	b.n	8003a88 <HAL_RCC_OscConfig+0xdc>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	2b05      	cmp	r3, #5
 8003a50:	d10e      	bne.n	8003a70 <HAL_RCC_OscConfig+0xc4>
 8003a52:	4ba1      	ldr	r3, [pc, #644]	@ (8003cd8 <HAL_RCC_OscConfig+0x32c>)
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	4ba0      	ldr	r3, [pc, #640]	@ (8003cd8 <HAL_RCC_OscConfig+0x32c>)
 8003a58:	2180      	movs	r1, #128	@ 0x80
 8003a5a:	02c9      	lsls	r1, r1, #11
 8003a5c:	430a      	orrs	r2, r1
 8003a5e:	601a      	str	r2, [r3, #0]
 8003a60:	4b9d      	ldr	r3, [pc, #628]	@ (8003cd8 <HAL_RCC_OscConfig+0x32c>)
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	4b9c      	ldr	r3, [pc, #624]	@ (8003cd8 <HAL_RCC_OscConfig+0x32c>)
 8003a66:	2180      	movs	r1, #128	@ 0x80
 8003a68:	0249      	lsls	r1, r1, #9
 8003a6a:	430a      	orrs	r2, r1
 8003a6c:	601a      	str	r2, [r3, #0]
 8003a6e:	e00b      	b.n	8003a88 <HAL_RCC_OscConfig+0xdc>
 8003a70:	4b99      	ldr	r3, [pc, #612]	@ (8003cd8 <HAL_RCC_OscConfig+0x32c>)
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	4b98      	ldr	r3, [pc, #608]	@ (8003cd8 <HAL_RCC_OscConfig+0x32c>)
 8003a76:	4999      	ldr	r1, [pc, #612]	@ (8003cdc <HAL_RCC_OscConfig+0x330>)
 8003a78:	400a      	ands	r2, r1
 8003a7a:	601a      	str	r2, [r3, #0]
 8003a7c:	4b96      	ldr	r3, [pc, #600]	@ (8003cd8 <HAL_RCC_OscConfig+0x32c>)
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	4b95      	ldr	r3, [pc, #596]	@ (8003cd8 <HAL_RCC_OscConfig+0x32c>)
 8003a82:	4997      	ldr	r1, [pc, #604]	@ (8003ce0 <HAL_RCC_OscConfig+0x334>)
 8003a84:	400a      	ands	r2, r1
 8003a86:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d014      	beq.n	8003aba <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a90:	f7ff fd06 	bl	80034a0 <HAL_GetTick>
 8003a94:	0003      	movs	r3, r0
 8003a96:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a98:	e008      	b.n	8003aac <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a9a:	f7ff fd01 	bl	80034a0 <HAL_GetTick>
 8003a9e:	0002      	movs	r2, r0
 8003aa0:	69bb      	ldr	r3, [r7, #24]
 8003aa2:	1ad3      	subs	r3, r2, r3
 8003aa4:	2b64      	cmp	r3, #100	@ 0x64
 8003aa6:	d901      	bls.n	8003aac <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8003aa8:	2303      	movs	r3, #3
 8003aaa:	e28a      	b.n	8003fc2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aac:	4b8a      	ldr	r3, [pc, #552]	@ (8003cd8 <HAL_RCC_OscConfig+0x32c>)
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	2380      	movs	r3, #128	@ 0x80
 8003ab2:	029b      	lsls	r3, r3, #10
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	d0f0      	beq.n	8003a9a <HAL_RCC_OscConfig+0xee>
 8003ab8:	e015      	b.n	8003ae6 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aba:	f7ff fcf1 	bl	80034a0 <HAL_GetTick>
 8003abe:	0003      	movs	r3, r0
 8003ac0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ac2:	e008      	b.n	8003ad6 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ac4:	f7ff fcec 	bl	80034a0 <HAL_GetTick>
 8003ac8:	0002      	movs	r2, r0
 8003aca:	69bb      	ldr	r3, [r7, #24]
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	2b64      	cmp	r3, #100	@ 0x64
 8003ad0:	d901      	bls.n	8003ad6 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	e275      	b.n	8003fc2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ad6:	4b80      	ldr	r3, [pc, #512]	@ (8003cd8 <HAL_RCC_OscConfig+0x32c>)
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	2380      	movs	r3, #128	@ 0x80
 8003adc:	029b      	lsls	r3, r3, #10
 8003ade:	4013      	ands	r3, r2
 8003ae0:	d1f0      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x118>
 8003ae2:	e000      	b.n	8003ae6 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ae4:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	2202      	movs	r2, #2
 8003aec:	4013      	ands	r3, r2
 8003aee:	d100      	bne.n	8003af2 <HAL_RCC_OscConfig+0x146>
 8003af0:	e069      	b.n	8003bc6 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003af2:	4b79      	ldr	r3, [pc, #484]	@ (8003cd8 <HAL_RCC_OscConfig+0x32c>)
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	220c      	movs	r2, #12
 8003af8:	4013      	ands	r3, r2
 8003afa:	d00b      	beq.n	8003b14 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003afc:	4b76      	ldr	r3, [pc, #472]	@ (8003cd8 <HAL_RCC_OscConfig+0x32c>)
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	220c      	movs	r2, #12
 8003b02:	4013      	ands	r3, r2
 8003b04:	2b08      	cmp	r3, #8
 8003b06:	d11c      	bne.n	8003b42 <HAL_RCC_OscConfig+0x196>
 8003b08:	4b73      	ldr	r3, [pc, #460]	@ (8003cd8 <HAL_RCC_OscConfig+0x32c>)
 8003b0a:	685a      	ldr	r2, [r3, #4]
 8003b0c:	2380      	movs	r3, #128	@ 0x80
 8003b0e:	025b      	lsls	r3, r3, #9
 8003b10:	4013      	ands	r3, r2
 8003b12:	d116      	bne.n	8003b42 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b14:	4b70      	ldr	r3, [pc, #448]	@ (8003cd8 <HAL_RCC_OscConfig+0x32c>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	2202      	movs	r2, #2
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	d005      	beq.n	8003b2a <HAL_RCC_OscConfig+0x17e>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d001      	beq.n	8003b2a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e24b      	b.n	8003fc2 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b2a:	4b6b      	ldr	r3, [pc, #428]	@ (8003cd8 <HAL_RCC_OscConfig+0x32c>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	22f8      	movs	r2, #248	@ 0xf8
 8003b30:	4393      	bics	r3, r2
 8003b32:	0019      	movs	r1, r3
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	691b      	ldr	r3, [r3, #16]
 8003b38:	00da      	lsls	r2, r3, #3
 8003b3a:	4b67      	ldr	r3, [pc, #412]	@ (8003cd8 <HAL_RCC_OscConfig+0x32c>)
 8003b3c:	430a      	orrs	r2, r1
 8003b3e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b40:	e041      	b.n	8003bc6 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d024      	beq.n	8003b94 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b4a:	4b63      	ldr	r3, [pc, #396]	@ (8003cd8 <HAL_RCC_OscConfig+0x32c>)
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	4b62      	ldr	r3, [pc, #392]	@ (8003cd8 <HAL_RCC_OscConfig+0x32c>)
 8003b50:	2101      	movs	r1, #1
 8003b52:	430a      	orrs	r2, r1
 8003b54:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b56:	f7ff fca3 	bl	80034a0 <HAL_GetTick>
 8003b5a:	0003      	movs	r3, r0
 8003b5c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b5e:	e008      	b.n	8003b72 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b60:	f7ff fc9e 	bl	80034a0 <HAL_GetTick>
 8003b64:	0002      	movs	r2, r0
 8003b66:	69bb      	ldr	r3, [r7, #24]
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d901      	bls.n	8003b72 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e227      	b.n	8003fc2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b72:	4b59      	ldr	r3, [pc, #356]	@ (8003cd8 <HAL_RCC_OscConfig+0x32c>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	2202      	movs	r2, #2
 8003b78:	4013      	ands	r3, r2
 8003b7a:	d0f1      	beq.n	8003b60 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b7c:	4b56      	ldr	r3, [pc, #344]	@ (8003cd8 <HAL_RCC_OscConfig+0x32c>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	22f8      	movs	r2, #248	@ 0xf8
 8003b82:	4393      	bics	r3, r2
 8003b84:	0019      	movs	r1, r3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	691b      	ldr	r3, [r3, #16]
 8003b8a:	00da      	lsls	r2, r3, #3
 8003b8c:	4b52      	ldr	r3, [pc, #328]	@ (8003cd8 <HAL_RCC_OscConfig+0x32c>)
 8003b8e:	430a      	orrs	r2, r1
 8003b90:	601a      	str	r2, [r3, #0]
 8003b92:	e018      	b.n	8003bc6 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b94:	4b50      	ldr	r3, [pc, #320]	@ (8003cd8 <HAL_RCC_OscConfig+0x32c>)
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	4b4f      	ldr	r3, [pc, #316]	@ (8003cd8 <HAL_RCC_OscConfig+0x32c>)
 8003b9a:	2101      	movs	r1, #1
 8003b9c:	438a      	bics	r2, r1
 8003b9e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ba0:	f7ff fc7e 	bl	80034a0 <HAL_GetTick>
 8003ba4:	0003      	movs	r3, r0
 8003ba6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ba8:	e008      	b.n	8003bbc <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003baa:	f7ff fc79 	bl	80034a0 <HAL_GetTick>
 8003bae:	0002      	movs	r2, r0
 8003bb0:	69bb      	ldr	r3, [r7, #24]
 8003bb2:	1ad3      	subs	r3, r2, r3
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	d901      	bls.n	8003bbc <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8003bb8:	2303      	movs	r3, #3
 8003bba:	e202      	b.n	8003fc2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bbc:	4b46      	ldr	r3, [pc, #280]	@ (8003cd8 <HAL_RCC_OscConfig+0x32c>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	2202      	movs	r2, #2
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	d1f1      	bne.n	8003baa <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	2208      	movs	r2, #8
 8003bcc:	4013      	ands	r3, r2
 8003bce:	d036      	beq.n	8003c3e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	69db      	ldr	r3, [r3, #28]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d019      	beq.n	8003c0c <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bd8:	4b3f      	ldr	r3, [pc, #252]	@ (8003cd8 <HAL_RCC_OscConfig+0x32c>)
 8003bda:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003bdc:	4b3e      	ldr	r3, [pc, #248]	@ (8003cd8 <HAL_RCC_OscConfig+0x32c>)
 8003bde:	2101      	movs	r1, #1
 8003be0:	430a      	orrs	r2, r1
 8003be2:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003be4:	f7ff fc5c 	bl	80034a0 <HAL_GetTick>
 8003be8:	0003      	movs	r3, r0
 8003bea:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bec:	e008      	b.n	8003c00 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bee:	f7ff fc57 	bl	80034a0 <HAL_GetTick>
 8003bf2:	0002      	movs	r2, r0
 8003bf4:	69bb      	ldr	r3, [r7, #24]
 8003bf6:	1ad3      	subs	r3, r2, r3
 8003bf8:	2b02      	cmp	r3, #2
 8003bfa:	d901      	bls.n	8003c00 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8003bfc:	2303      	movs	r3, #3
 8003bfe:	e1e0      	b.n	8003fc2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c00:	4b35      	ldr	r3, [pc, #212]	@ (8003cd8 <HAL_RCC_OscConfig+0x32c>)
 8003c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c04:	2202      	movs	r2, #2
 8003c06:	4013      	ands	r3, r2
 8003c08:	d0f1      	beq.n	8003bee <HAL_RCC_OscConfig+0x242>
 8003c0a:	e018      	b.n	8003c3e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c0c:	4b32      	ldr	r3, [pc, #200]	@ (8003cd8 <HAL_RCC_OscConfig+0x32c>)
 8003c0e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003c10:	4b31      	ldr	r3, [pc, #196]	@ (8003cd8 <HAL_RCC_OscConfig+0x32c>)
 8003c12:	2101      	movs	r1, #1
 8003c14:	438a      	bics	r2, r1
 8003c16:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c18:	f7ff fc42 	bl	80034a0 <HAL_GetTick>
 8003c1c:	0003      	movs	r3, r0
 8003c1e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c20:	e008      	b.n	8003c34 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c22:	f7ff fc3d 	bl	80034a0 <HAL_GetTick>
 8003c26:	0002      	movs	r2, r0
 8003c28:	69bb      	ldr	r3, [r7, #24]
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	d901      	bls.n	8003c34 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8003c30:	2303      	movs	r3, #3
 8003c32:	e1c6      	b.n	8003fc2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c34:	4b28      	ldr	r3, [pc, #160]	@ (8003cd8 <HAL_RCC_OscConfig+0x32c>)
 8003c36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c38:	2202      	movs	r2, #2
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	d1f1      	bne.n	8003c22 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	2204      	movs	r2, #4
 8003c44:	4013      	ands	r3, r2
 8003c46:	d100      	bne.n	8003c4a <HAL_RCC_OscConfig+0x29e>
 8003c48:	e0b4      	b.n	8003db4 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c4a:	201f      	movs	r0, #31
 8003c4c:	183b      	adds	r3, r7, r0
 8003c4e:	2200      	movs	r2, #0
 8003c50:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c52:	4b21      	ldr	r3, [pc, #132]	@ (8003cd8 <HAL_RCC_OscConfig+0x32c>)
 8003c54:	69da      	ldr	r2, [r3, #28]
 8003c56:	2380      	movs	r3, #128	@ 0x80
 8003c58:	055b      	lsls	r3, r3, #21
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	d110      	bne.n	8003c80 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c5e:	4b1e      	ldr	r3, [pc, #120]	@ (8003cd8 <HAL_RCC_OscConfig+0x32c>)
 8003c60:	69da      	ldr	r2, [r3, #28]
 8003c62:	4b1d      	ldr	r3, [pc, #116]	@ (8003cd8 <HAL_RCC_OscConfig+0x32c>)
 8003c64:	2180      	movs	r1, #128	@ 0x80
 8003c66:	0549      	lsls	r1, r1, #21
 8003c68:	430a      	orrs	r2, r1
 8003c6a:	61da      	str	r2, [r3, #28]
 8003c6c:	4b1a      	ldr	r3, [pc, #104]	@ (8003cd8 <HAL_RCC_OscConfig+0x32c>)
 8003c6e:	69da      	ldr	r2, [r3, #28]
 8003c70:	2380      	movs	r3, #128	@ 0x80
 8003c72:	055b      	lsls	r3, r3, #21
 8003c74:	4013      	ands	r3, r2
 8003c76:	60fb      	str	r3, [r7, #12]
 8003c78:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003c7a:	183b      	adds	r3, r7, r0
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c80:	4b18      	ldr	r3, [pc, #96]	@ (8003ce4 <HAL_RCC_OscConfig+0x338>)
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	2380      	movs	r3, #128	@ 0x80
 8003c86:	005b      	lsls	r3, r3, #1
 8003c88:	4013      	ands	r3, r2
 8003c8a:	d11a      	bne.n	8003cc2 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c8c:	4b15      	ldr	r3, [pc, #84]	@ (8003ce4 <HAL_RCC_OscConfig+0x338>)
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	4b14      	ldr	r3, [pc, #80]	@ (8003ce4 <HAL_RCC_OscConfig+0x338>)
 8003c92:	2180      	movs	r1, #128	@ 0x80
 8003c94:	0049      	lsls	r1, r1, #1
 8003c96:	430a      	orrs	r2, r1
 8003c98:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c9a:	f7ff fc01 	bl	80034a0 <HAL_GetTick>
 8003c9e:	0003      	movs	r3, r0
 8003ca0:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ca2:	e008      	b.n	8003cb6 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ca4:	f7ff fbfc 	bl	80034a0 <HAL_GetTick>
 8003ca8:	0002      	movs	r2, r0
 8003caa:	69bb      	ldr	r3, [r7, #24]
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	2b64      	cmp	r3, #100	@ 0x64
 8003cb0:	d901      	bls.n	8003cb6 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	e185      	b.n	8003fc2 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cb6:	4b0b      	ldr	r3, [pc, #44]	@ (8003ce4 <HAL_RCC_OscConfig+0x338>)
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	2380      	movs	r3, #128	@ 0x80
 8003cbc:	005b      	lsls	r3, r3, #1
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	d0f0      	beq.n	8003ca4 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d10e      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x33c>
 8003cca:	4b03      	ldr	r3, [pc, #12]	@ (8003cd8 <HAL_RCC_OscConfig+0x32c>)
 8003ccc:	6a1a      	ldr	r2, [r3, #32]
 8003cce:	4b02      	ldr	r3, [pc, #8]	@ (8003cd8 <HAL_RCC_OscConfig+0x32c>)
 8003cd0:	2101      	movs	r1, #1
 8003cd2:	430a      	orrs	r2, r1
 8003cd4:	621a      	str	r2, [r3, #32]
 8003cd6:	e035      	b.n	8003d44 <HAL_RCC_OscConfig+0x398>
 8003cd8:	40021000 	.word	0x40021000
 8003cdc:	fffeffff 	.word	0xfffeffff
 8003ce0:	fffbffff 	.word	0xfffbffff
 8003ce4:	40007000 	.word	0x40007000
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d10c      	bne.n	8003d0a <HAL_RCC_OscConfig+0x35e>
 8003cf0:	4bb6      	ldr	r3, [pc, #728]	@ (8003fcc <HAL_RCC_OscConfig+0x620>)
 8003cf2:	6a1a      	ldr	r2, [r3, #32]
 8003cf4:	4bb5      	ldr	r3, [pc, #724]	@ (8003fcc <HAL_RCC_OscConfig+0x620>)
 8003cf6:	2101      	movs	r1, #1
 8003cf8:	438a      	bics	r2, r1
 8003cfa:	621a      	str	r2, [r3, #32]
 8003cfc:	4bb3      	ldr	r3, [pc, #716]	@ (8003fcc <HAL_RCC_OscConfig+0x620>)
 8003cfe:	6a1a      	ldr	r2, [r3, #32]
 8003d00:	4bb2      	ldr	r3, [pc, #712]	@ (8003fcc <HAL_RCC_OscConfig+0x620>)
 8003d02:	2104      	movs	r1, #4
 8003d04:	438a      	bics	r2, r1
 8003d06:	621a      	str	r2, [r3, #32]
 8003d08:	e01c      	b.n	8003d44 <HAL_RCC_OscConfig+0x398>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	2b05      	cmp	r3, #5
 8003d10:	d10c      	bne.n	8003d2c <HAL_RCC_OscConfig+0x380>
 8003d12:	4bae      	ldr	r3, [pc, #696]	@ (8003fcc <HAL_RCC_OscConfig+0x620>)
 8003d14:	6a1a      	ldr	r2, [r3, #32]
 8003d16:	4bad      	ldr	r3, [pc, #692]	@ (8003fcc <HAL_RCC_OscConfig+0x620>)
 8003d18:	2104      	movs	r1, #4
 8003d1a:	430a      	orrs	r2, r1
 8003d1c:	621a      	str	r2, [r3, #32]
 8003d1e:	4bab      	ldr	r3, [pc, #684]	@ (8003fcc <HAL_RCC_OscConfig+0x620>)
 8003d20:	6a1a      	ldr	r2, [r3, #32]
 8003d22:	4baa      	ldr	r3, [pc, #680]	@ (8003fcc <HAL_RCC_OscConfig+0x620>)
 8003d24:	2101      	movs	r1, #1
 8003d26:	430a      	orrs	r2, r1
 8003d28:	621a      	str	r2, [r3, #32]
 8003d2a:	e00b      	b.n	8003d44 <HAL_RCC_OscConfig+0x398>
 8003d2c:	4ba7      	ldr	r3, [pc, #668]	@ (8003fcc <HAL_RCC_OscConfig+0x620>)
 8003d2e:	6a1a      	ldr	r2, [r3, #32]
 8003d30:	4ba6      	ldr	r3, [pc, #664]	@ (8003fcc <HAL_RCC_OscConfig+0x620>)
 8003d32:	2101      	movs	r1, #1
 8003d34:	438a      	bics	r2, r1
 8003d36:	621a      	str	r2, [r3, #32]
 8003d38:	4ba4      	ldr	r3, [pc, #656]	@ (8003fcc <HAL_RCC_OscConfig+0x620>)
 8003d3a:	6a1a      	ldr	r2, [r3, #32]
 8003d3c:	4ba3      	ldr	r3, [pc, #652]	@ (8003fcc <HAL_RCC_OscConfig+0x620>)
 8003d3e:	2104      	movs	r1, #4
 8003d40:	438a      	bics	r2, r1
 8003d42:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d014      	beq.n	8003d76 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d4c:	f7ff fba8 	bl	80034a0 <HAL_GetTick>
 8003d50:	0003      	movs	r3, r0
 8003d52:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d54:	e009      	b.n	8003d6a <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d56:	f7ff fba3 	bl	80034a0 <HAL_GetTick>
 8003d5a:	0002      	movs	r2, r0
 8003d5c:	69bb      	ldr	r3, [r7, #24]
 8003d5e:	1ad3      	subs	r3, r2, r3
 8003d60:	4a9b      	ldr	r2, [pc, #620]	@ (8003fd0 <HAL_RCC_OscConfig+0x624>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d901      	bls.n	8003d6a <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	e12b      	b.n	8003fc2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d6a:	4b98      	ldr	r3, [pc, #608]	@ (8003fcc <HAL_RCC_OscConfig+0x620>)
 8003d6c:	6a1b      	ldr	r3, [r3, #32]
 8003d6e:	2202      	movs	r2, #2
 8003d70:	4013      	ands	r3, r2
 8003d72:	d0f0      	beq.n	8003d56 <HAL_RCC_OscConfig+0x3aa>
 8003d74:	e013      	b.n	8003d9e <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d76:	f7ff fb93 	bl	80034a0 <HAL_GetTick>
 8003d7a:	0003      	movs	r3, r0
 8003d7c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d7e:	e009      	b.n	8003d94 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d80:	f7ff fb8e 	bl	80034a0 <HAL_GetTick>
 8003d84:	0002      	movs	r2, r0
 8003d86:	69bb      	ldr	r3, [r7, #24]
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	4a91      	ldr	r2, [pc, #580]	@ (8003fd0 <HAL_RCC_OscConfig+0x624>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d901      	bls.n	8003d94 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8003d90:	2303      	movs	r3, #3
 8003d92:	e116      	b.n	8003fc2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d94:	4b8d      	ldr	r3, [pc, #564]	@ (8003fcc <HAL_RCC_OscConfig+0x620>)
 8003d96:	6a1b      	ldr	r3, [r3, #32]
 8003d98:	2202      	movs	r2, #2
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	d1f0      	bne.n	8003d80 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003d9e:	231f      	movs	r3, #31
 8003da0:	18fb      	adds	r3, r7, r3
 8003da2:	781b      	ldrb	r3, [r3, #0]
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d105      	bne.n	8003db4 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003da8:	4b88      	ldr	r3, [pc, #544]	@ (8003fcc <HAL_RCC_OscConfig+0x620>)
 8003daa:	69da      	ldr	r2, [r3, #28]
 8003dac:	4b87      	ldr	r3, [pc, #540]	@ (8003fcc <HAL_RCC_OscConfig+0x620>)
 8003dae:	4989      	ldr	r1, [pc, #548]	@ (8003fd4 <HAL_RCC_OscConfig+0x628>)
 8003db0:	400a      	ands	r2, r1
 8003db2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	2210      	movs	r2, #16
 8003dba:	4013      	ands	r3, r2
 8003dbc:	d063      	beq.n	8003e86 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	695b      	ldr	r3, [r3, #20]
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d12a      	bne.n	8003e1c <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003dc6:	4b81      	ldr	r3, [pc, #516]	@ (8003fcc <HAL_RCC_OscConfig+0x620>)
 8003dc8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003dca:	4b80      	ldr	r3, [pc, #512]	@ (8003fcc <HAL_RCC_OscConfig+0x620>)
 8003dcc:	2104      	movs	r1, #4
 8003dce:	430a      	orrs	r2, r1
 8003dd0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003dd2:	4b7e      	ldr	r3, [pc, #504]	@ (8003fcc <HAL_RCC_OscConfig+0x620>)
 8003dd4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003dd6:	4b7d      	ldr	r3, [pc, #500]	@ (8003fcc <HAL_RCC_OscConfig+0x620>)
 8003dd8:	2101      	movs	r1, #1
 8003dda:	430a      	orrs	r2, r1
 8003ddc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dde:	f7ff fb5f 	bl	80034a0 <HAL_GetTick>
 8003de2:	0003      	movs	r3, r0
 8003de4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003de6:	e008      	b.n	8003dfa <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003de8:	f7ff fb5a 	bl	80034a0 <HAL_GetTick>
 8003dec:	0002      	movs	r2, r0
 8003dee:	69bb      	ldr	r3, [r7, #24]
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d901      	bls.n	8003dfa <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	e0e3      	b.n	8003fc2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003dfa:	4b74      	ldr	r3, [pc, #464]	@ (8003fcc <HAL_RCC_OscConfig+0x620>)
 8003dfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dfe:	2202      	movs	r2, #2
 8003e00:	4013      	ands	r3, r2
 8003e02:	d0f1      	beq.n	8003de8 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003e04:	4b71      	ldr	r3, [pc, #452]	@ (8003fcc <HAL_RCC_OscConfig+0x620>)
 8003e06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e08:	22f8      	movs	r2, #248	@ 0xf8
 8003e0a:	4393      	bics	r3, r2
 8003e0c:	0019      	movs	r1, r3
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	699b      	ldr	r3, [r3, #24]
 8003e12:	00da      	lsls	r2, r3, #3
 8003e14:	4b6d      	ldr	r3, [pc, #436]	@ (8003fcc <HAL_RCC_OscConfig+0x620>)
 8003e16:	430a      	orrs	r2, r1
 8003e18:	635a      	str	r2, [r3, #52]	@ 0x34
 8003e1a:	e034      	b.n	8003e86 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	695b      	ldr	r3, [r3, #20]
 8003e20:	3305      	adds	r3, #5
 8003e22:	d111      	bne.n	8003e48 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003e24:	4b69      	ldr	r3, [pc, #420]	@ (8003fcc <HAL_RCC_OscConfig+0x620>)
 8003e26:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e28:	4b68      	ldr	r3, [pc, #416]	@ (8003fcc <HAL_RCC_OscConfig+0x620>)
 8003e2a:	2104      	movs	r1, #4
 8003e2c:	438a      	bics	r2, r1
 8003e2e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003e30:	4b66      	ldr	r3, [pc, #408]	@ (8003fcc <HAL_RCC_OscConfig+0x620>)
 8003e32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e34:	22f8      	movs	r2, #248	@ 0xf8
 8003e36:	4393      	bics	r3, r2
 8003e38:	0019      	movs	r1, r3
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	699b      	ldr	r3, [r3, #24]
 8003e3e:	00da      	lsls	r2, r3, #3
 8003e40:	4b62      	ldr	r3, [pc, #392]	@ (8003fcc <HAL_RCC_OscConfig+0x620>)
 8003e42:	430a      	orrs	r2, r1
 8003e44:	635a      	str	r2, [r3, #52]	@ 0x34
 8003e46:	e01e      	b.n	8003e86 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003e48:	4b60      	ldr	r3, [pc, #384]	@ (8003fcc <HAL_RCC_OscConfig+0x620>)
 8003e4a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e4c:	4b5f      	ldr	r3, [pc, #380]	@ (8003fcc <HAL_RCC_OscConfig+0x620>)
 8003e4e:	2104      	movs	r1, #4
 8003e50:	430a      	orrs	r2, r1
 8003e52:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003e54:	4b5d      	ldr	r3, [pc, #372]	@ (8003fcc <HAL_RCC_OscConfig+0x620>)
 8003e56:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e58:	4b5c      	ldr	r3, [pc, #368]	@ (8003fcc <HAL_RCC_OscConfig+0x620>)
 8003e5a:	2101      	movs	r1, #1
 8003e5c:	438a      	bics	r2, r1
 8003e5e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e60:	f7ff fb1e 	bl	80034a0 <HAL_GetTick>
 8003e64:	0003      	movs	r3, r0
 8003e66:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003e68:	e008      	b.n	8003e7c <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003e6a:	f7ff fb19 	bl	80034a0 <HAL_GetTick>
 8003e6e:	0002      	movs	r2, r0
 8003e70:	69bb      	ldr	r3, [r7, #24]
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	2b02      	cmp	r3, #2
 8003e76:	d901      	bls.n	8003e7c <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8003e78:	2303      	movs	r3, #3
 8003e7a:	e0a2      	b.n	8003fc2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003e7c:	4b53      	ldr	r3, [pc, #332]	@ (8003fcc <HAL_RCC_OscConfig+0x620>)
 8003e7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e80:	2202      	movs	r2, #2
 8003e82:	4013      	ands	r3, r2
 8003e84:	d1f1      	bne.n	8003e6a <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6a1b      	ldr	r3, [r3, #32]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d100      	bne.n	8003e90 <HAL_RCC_OscConfig+0x4e4>
 8003e8e:	e097      	b.n	8003fc0 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e90:	4b4e      	ldr	r3, [pc, #312]	@ (8003fcc <HAL_RCC_OscConfig+0x620>)
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	220c      	movs	r2, #12
 8003e96:	4013      	ands	r3, r2
 8003e98:	2b08      	cmp	r3, #8
 8003e9a:	d100      	bne.n	8003e9e <HAL_RCC_OscConfig+0x4f2>
 8003e9c:	e06b      	b.n	8003f76 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6a1b      	ldr	r3, [r3, #32]
 8003ea2:	2b02      	cmp	r3, #2
 8003ea4:	d14c      	bne.n	8003f40 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ea6:	4b49      	ldr	r3, [pc, #292]	@ (8003fcc <HAL_RCC_OscConfig+0x620>)
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	4b48      	ldr	r3, [pc, #288]	@ (8003fcc <HAL_RCC_OscConfig+0x620>)
 8003eac:	494a      	ldr	r1, [pc, #296]	@ (8003fd8 <HAL_RCC_OscConfig+0x62c>)
 8003eae:	400a      	ands	r2, r1
 8003eb0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eb2:	f7ff faf5 	bl	80034a0 <HAL_GetTick>
 8003eb6:	0003      	movs	r3, r0
 8003eb8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003eba:	e008      	b.n	8003ece <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ebc:	f7ff faf0 	bl	80034a0 <HAL_GetTick>
 8003ec0:	0002      	movs	r2, r0
 8003ec2:	69bb      	ldr	r3, [r7, #24]
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	2b02      	cmp	r3, #2
 8003ec8:	d901      	bls.n	8003ece <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e079      	b.n	8003fc2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ece:	4b3f      	ldr	r3, [pc, #252]	@ (8003fcc <HAL_RCC_OscConfig+0x620>)
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	2380      	movs	r3, #128	@ 0x80
 8003ed4:	049b      	lsls	r3, r3, #18
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	d1f0      	bne.n	8003ebc <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003eda:	4b3c      	ldr	r3, [pc, #240]	@ (8003fcc <HAL_RCC_OscConfig+0x620>)
 8003edc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ede:	220f      	movs	r2, #15
 8003ee0:	4393      	bics	r3, r2
 8003ee2:	0019      	movs	r1, r3
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ee8:	4b38      	ldr	r3, [pc, #224]	@ (8003fcc <HAL_RCC_OscConfig+0x620>)
 8003eea:	430a      	orrs	r2, r1
 8003eec:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003eee:	4b37      	ldr	r3, [pc, #220]	@ (8003fcc <HAL_RCC_OscConfig+0x620>)
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	4a3a      	ldr	r2, [pc, #232]	@ (8003fdc <HAL_RCC_OscConfig+0x630>)
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	0019      	movs	r1, r3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f00:	431a      	orrs	r2, r3
 8003f02:	4b32      	ldr	r3, [pc, #200]	@ (8003fcc <HAL_RCC_OscConfig+0x620>)
 8003f04:	430a      	orrs	r2, r1
 8003f06:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f08:	4b30      	ldr	r3, [pc, #192]	@ (8003fcc <HAL_RCC_OscConfig+0x620>)
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	4b2f      	ldr	r3, [pc, #188]	@ (8003fcc <HAL_RCC_OscConfig+0x620>)
 8003f0e:	2180      	movs	r1, #128	@ 0x80
 8003f10:	0449      	lsls	r1, r1, #17
 8003f12:	430a      	orrs	r2, r1
 8003f14:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f16:	f7ff fac3 	bl	80034a0 <HAL_GetTick>
 8003f1a:	0003      	movs	r3, r0
 8003f1c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f1e:	e008      	b.n	8003f32 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f20:	f7ff fabe 	bl	80034a0 <HAL_GetTick>
 8003f24:	0002      	movs	r2, r0
 8003f26:	69bb      	ldr	r3, [r7, #24]
 8003f28:	1ad3      	subs	r3, r2, r3
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	d901      	bls.n	8003f32 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	e047      	b.n	8003fc2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f32:	4b26      	ldr	r3, [pc, #152]	@ (8003fcc <HAL_RCC_OscConfig+0x620>)
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	2380      	movs	r3, #128	@ 0x80
 8003f38:	049b      	lsls	r3, r3, #18
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	d0f0      	beq.n	8003f20 <HAL_RCC_OscConfig+0x574>
 8003f3e:	e03f      	b.n	8003fc0 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f40:	4b22      	ldr	r3, [pc, #136]	@ (8003fcc <HAL_RCC_OscConfig+0x620>)
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	4b21      	ldr	r3, [pc, #132]	@ (8003fcc <HAL_RCC_OscConfig+0x620>)
 8003f46:	4924      	ldr	r1, [pc, #144]	@ (8003fd8 <HAL_RCC_OscConfig+0x62c>)
 8003f48:	400a      	ands	r2, r1
 8003f4a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f4c:	f7ff faa8 	bl	80034a0 <HAL_GetTick>
 8003f50:	0003      	movs	r3, r0
 8003f52:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f54:	e008      	b.n	8003f68 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f56:	f7ff faa3 	bl	80034a0 <HAL_GetTick>
 8003f5a:	0002      	movs	r2, r0
 8003f5c:	69bb      	ldr	r3, [r7, #24]
 8003f5e:	1ad3      	subs	r3, r2, r3
 8003f60:	2b02      	cmp	r3, #2
 8003f62:	d901      	bls.n	8003f68 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8003f64:	2303      	movs	r3, #3
 8003f66:	e02c      	b.n	8003fc2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f68:	4b18      	ldr	r3, [pc, #96]	@ (8003fcc <HAL_RCC_OscConfig+0x620>)
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	2380      	movs	r3, #128	@ 0x80
 8003f6e:	049b      	lsls	r3, r3, #18
 8003f70:	4013      	ands	r3, r2
 8003f72:	d1f0      	bne.n	8003f56 <HAL_RCC_OscConfig+0x5aa>
 8003f74:	e024      	b.n	8003fc0 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a1b      	ldr	r3, [r3, #32]
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d101      	bne.n	8003f82 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e01f      	b.n	8003fc2 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003f82:	4b12      	ldr	r3, [pc, #72]	@ (8003fcc <HAL_RCC_OscConfig+0x620>)
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003f88:	4b10      	ldr	r3, [pc, #64]	@ (8003fcc <HAL_RCC_OscConfig+0x620>)
 8003f8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f8c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f8e:	697a      	ldr	r2, [r7, #20]
 8003f90:	2380      	movs	r3, #128	@ 0x80
 8003f92:	025b      	lsls	r3, r3, #9
 8003f94:	401a      	ands	r2, r3
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d10e      	bne.n	8003fbc <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	220f      	movs	r2, #15
 8003fa2:	401a      	ands	r2, r3
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d107      	bne.n	8003fbc <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003fac:	697a      	ldr	r2, [r7, #20]
 8003fae:	23f0      	movs	r3, #240	@ 0xf0
 8003fb0:	039b      	lsls	r3, r3, #14
 8003fb2:	401a      	ands	r2, r3
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d001      	beq.n	8003fc0 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e000      	b.n	8003fc2 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8003fc0:	2300      	movs	r3, #0
}
 8003fc2:	0018      	movs	r0, r3
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	b008      	add	sp, #32
 8003fc8:	bd80      	pop	{r7, pc}
 8003fca:	46c0      	nop			@ (mov r8, r8)
 8003fcc:	40021000 	.word	0x40021000
 8003fd0:	00001388 	.word	0x00001388
 8003fd4:	efffffff 	.word	0xefffffff
 8003fd8:	feffffff 	.word	0xfeffffff
 8003fdc:	ffc2ffff 	.word	0xffc2ffff

08003fe0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b084      	sub	sp, #16
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
 8003fe8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d101      	bne.n	8003ff4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e0b3      	b.n	800415c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ff4:	4b5b      	ldr	r3, [pc, #364]	@ (8004164 <HAL_RCC_ClockConfig+0x184>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	4013      	ands	r3, r2
 8003ffc:	683a      	ldr	r2, [r7, #0]
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d911      	bls.n	8004026 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004002:	4b58      	ldr	r3, [pc, #352]	@ (8004164 <HAL_RCC_ClockConfig+0x184>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	2201      	movs	r2, #1
 8004008:	4393      	bics	r3, r2
 800400a:	0019      	movs	r1, r3
 800400c:	4b55      	ldr	r3, [pc, #340]	@ (8004164 <HAL_RCC_ClockConfig+0x184>)
 800400e:	683a      	ldr	r2, [r7, #0]
 8004010:	430a      	orrs	r2, r1
 8004012:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004014:	4b53      	ldr	r3, [pc, #332]	@ (8004164 <HAL_RCC_ClockConfig+0x184>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	2201      	movs	r2, #1
 800401a:	4013      	ands	r3, r2
 800401c:	683a      	ldr	r2, [r7, #0]
 800401e:	429a      	cmp	r2, r3
 8004020:	d001      	beq.n	8004026 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e09a      	b.n	800415c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	2202      	movs	r2, #2
 800402c:	4013      	ands	r3, r2
 800402e:	d015      	beq.n	800405c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	2204      	movs	r2, #4
 8004036:	4013      	ands	r3, r2
 8004038:	d006      	beq.n	8004048 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800403a:	4b4b      	ldr	r3, [pc, #300]	@ (8004168 <HAL_RCC_ClockConfig+0x188>)
 800403c:	685a      	ldr	r2, [r3, #4]
 800403e:	4b4a      	ldr	r3, [pc, #296]	@ (8004168 <HAL_RCC_ClockConfig+0x188>)
 8004040:	21e0      	movs	r1, #224	@ 0xe0
 8004042:	00c9      	lsls	r1, r1, #3
 8004044:	430a      	orrs	r2, r1
 8004046:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004048:	4b47      	ldr	r3, [pc, #284]	@ (8004168 <HAL_RCC_ClockConfig+0x188>)
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	22f0      	movs	r2, #240	@ 0xf0
 800404e:	4393      	bics	r3, r2
 8004050:	0019      	movs	r1, r3
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	689a      	ldr	r2, [r3, #8]
 8004056:	4b44      	ldr	r3, [pc, #272]	@ (8004168 <HAL_RCC_ClockConfig+0x188>)
 8004058:	430a      	orrs	r2, r1
 800405a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	2201      	movs	r2, #1
 8004062:	4013      	ands	r3, r2
 8004064:	d040      	beq.n	80040e8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	2b01      	cmp	r3, #1
 800406c:	d107      	bne.n	800407e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800406e:	4b3e      	ldr	r3, [pc, #248]	@ (8004168 <HAL_RCC_ClockConfig+0x188>)
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	2380      	movs	r3, #128	@ 0x80
 8004074:	029b      	lsls	r3, r3, #10
 8004076:	4013      	ands	r3, r2
 8004078:	d114      	bne.n	80040a4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e06e      	b.n	800415c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	2b02      	cmp	r3, #2
 8004084:	d107      	bne.n	8004096 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004086:	4b38      	ldr	r3, [pc, #224]	@ (8004168 <HAL_RCC_ClockConfig+0x188>)
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	2380      	movs	r3, #128	@ 0x80
 800408c:	049b      	lsls	r3, r3, #18
 800408e:	4013      	ands	r3, r2
 8004090:	d108      	bne.n	80040a4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e062      	b.n	800415c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004096:	4b34      	ldr	r3, [pc, #208]	@ (8004168 <HAL_RCC_ClockConfig+0x188>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	2202      	movs	r2, #2
 800409c:	4013      	ands	r3, r2
 800409e:	d101      	bne.n	80040a4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e05b      	b.n	800415c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040a4:	4b30      	ldr	r3, [pc, #192]	@ (8004168 <HAL_RCC_ClockConfig+0x188>)
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	2203      	movs	r2, #3
 80040aa:	4393      	bics	r3, r2
 80040ac:	0019      	movs	r1, r3
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	685a      	ldr	r2, [r3, #4]
 80040b2:	4b2d      	ldr	r3, [pc, #180]	@ (8004168 <HAL_RCC_ClockConfig+0x188>)
 80040b4:	430a      	orrs	r2, r1
 80040b6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040b8:	f7ff f9f2 	bl	80034a0 <HAL_GetTick>
 80040bc:	0003      	movs	r3, r0
 80040be:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040c0:	e009      	b.n	80040d6 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040c2:	f7ff f9ed 	bl	80034a0 <HAL_GetTick>
 80040c6:	0002      	movs	r2, r0
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	1ad3      	subs	r3, r2, r3
 80040cc:	4a27      	ldr	r2, [pc, #156]	@ (800416c <HAL_RCC_ClockConfig+0x18c>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d901      	bls.n	80040d6 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80040d2:	2303      	movs	r3, #3
 80040d4:	e042      	b.n	800415c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040d6:	4b24      	ldr	r3, [pc, #144]	@ (8004168 <HAL_RCC_ClockConfig+0x188>)
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	220c      	movs	r2, #12
 80040dc:	401a      	ands	r2, r3
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d1ec      	bne.n	80040c2 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80040e8:	4b1e      	ldr	r3, [pc, #120]	@ (8004164 <HAL_RCC_ClockConfig+0x184>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	2201      	movs	r2, #1
 80040ee:	4013      	ands	r3, r2
 80040f0:	683a      	ldr	r2, [r7, #0]
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d211      	bcs.n	800411a <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040f6:	4b1b      	ldr	r3, [pc, #108]	@ (8004164 <HAL_RCC_ClockConfig+0x184>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	2201      	movs	r2, #1
 80040fc:	4393      	bics	r3, r2
 80040fe:	0019      	movs	r1, r3
 8004100:	4b18      	ldr	r3, [pc, #96]	@ (8004164 <HAL_RCC_ClockConfig+0x184>)
 8004102:	683a      	ldr	r2, [r7, #0]
 8004104:	430a      	orrs	r2, r1
 8004106:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004108:	4b16      	ldr	r3, [pc, #88]	@ (8004164 <HAL_RCC_ClockConfig+0x184>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	2201      	movs	r2, #1
 800410e:	4013      	ands	r3, r2
 8004110:	683a      	ldr	r2, [r7, #0]
 8004112:	429a      	cmp	r2, r3
 8004114:	d001      	beq.n	800411a <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e020      	b.n	800415c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	2204      	movs	r2, #4
 8004120:	4013      	ands	r3, r2
 8004122:	d009      	beq.n	8004138 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004124:	4b10      	ldr	r3, [pc, #64]	@ (8004168 <HAL_RCC_ClockConfig+0x188>)
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	4a11      	ldr	r2, [pc, #68]	@ (8004170 <HAL_RCC_ClockConfig+0x190>)
 800412a:	4013      	ands	r3, r2
 800412c:	0019      	movs	r1, r3
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	68da      	ldr	r2, [r3, #12]
 8004132:	4b0d      	ldr	r3, [pc, #52]	@ (8004168 <HAL_RCC_ClockConfig+0x188>)
 8004134:	430a      	orrs	r2, r1
 8004136:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004138:	f000 f820 	bl	800417c <HAL_RCC_GetSysClockFreq>
 800413c:	0001      	movs	r1, r0
 800413e:	4b0a      	ldr	r3, [pc, #40]	@ (8004168 <HAL_RCC_ClockConfig+0x188>)
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	091b      	lsrs	r3, r3, #4
 8004144:	220f      	movs	r2, #15
 8004146:	4013      	ands	r3, r2
 8004148:	4a0a      	ldr	r2, [pc, #40]	@ (8004174 <HAL_RCC_ClockConfig+0x194>)
 800414a:	5cd3      	ldrb	r3, [r2, r3]
 800414c:	000a      	movs	r2, r1
 800414e:	40da      	lsrs	r2, r3
 8004150:	4b09      	ldr	r3, [pc, #36]	@ (8004178 <HAL_RCC_ClockConfig+0x198>)
 8004152:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004154:	2003      	movs	r0, #3
 8004156:	f7ff f8b5 	bl	80032c4 <HAL_InitTick>
  
  return HAL_OK;
 800415a:	2300      	movs	r3, #0
}
 800415c:	0018      	movs	r0, r3
 800415e:	46bd      	mov	sp, r7
 8004160:	b004      	add	sp, #16
 8004162:	bd80      	pop	{r7, pc}
 8004164:	40022000 	.word	0x40022000
 8004168:	40021000 	.word	0x40021000
 800416c:	00001388 	.word	0x00001388
 8004170:	fffff8ff 	.word	0xfffff8ff
 8004174:	080068c0 	.word	0x080068c0
 8004178:	2000004c 	.word	0x2000004c

0800417c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b086      	sub	sp, #24
 8004180:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004182:	2300      	movs	r3, #0
 8004184:	60fb      	str	r3, [r7, #12]
 8004186:	2300      	movs	r3, #0
 8004188:	60bb      	str	r3, [r7, #8]
 800418a:	2300      	movs	r3, #0
 800418c:	617b      	str	r3, [r7, #20]
 800418e:	2300      	movs	r3, #0
 8004190:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004192:	2300      	movs	r3, #0
 8004194:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8004196:	4b20      	ldr	r3, [pc, #128]	@ (8004218 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	220c      	movs	r2, #12
 80041a0:	4013      	ands	r3, r2
 80041a2:	2b04      	cmp	r3, #4
 80041a4:	d002      	beq.n	80041ac <HAL_RCC_GetSysClockFreq+0x30>
 80041a6:	2b08      	cmp	r3, #8
 80041a8:	d003      	beq.n	80041b2 <HAL_RCC_GetSysClockFreq+0x36>
 80041aa:	e02c      	b.n	8004206 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80041ac:	4b1b      	ldr	r3, [pc, #108]	@ (800421c <HAL_RCC_GetSysClockFreq+0xa0>)
 80041ae:	613b      	str	r3, [r7, #16]
      break;
 80041b0:	e02c      	b.n	800420c <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	0c9b      	lsrs	r3, r3, #18
 80041b6:	220f      	movs	r2, #15
 80041b8:	4013      	ands	r3, r2
 80041ba:	4a19      	ldr	r2, [pc, #100]	@ (8004220 <HAL_RCC_GetSysClockFreq+0xa4>)
 80041bc:	5cd3      	ldrb	r3, [r2, r3]
 80041be:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80041c0:	4b15      	ldr	r3, [pc, #84]	@ (8004218 <HAL_RCC_GetSysClockFreq+0x9c>)
 80041c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041c4:	220f      	movs	r2, #15
 80041c6:	4013      	ands	r3, r2
 80041c8:	4a16      	ldr	r2, [pc, #88]	@ (8004224 <HAL_RCC_GetSysClockFreq+0xa8>)
 80041ca:	5cd3      	ldrb	r3, [r2, r3]
 80041cc:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80041ce:	68fa      	ldr	r2, [r7, #12]
 80041d0:	2380      	movs	r3, #128	@ 0x80
 80041d2:	025b      	lsls	r3, r3, #9
 80041d4:	4013      	ands	r3, r2
 80041d6:	d009      	beq.n	80041ec <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80041d8:	68b9      	ldr	r1, [r7, #8]
 80041da:	4810      	ldr	r0, [pc, #64]	@ (800421c <HAL_RCC_GetSysClockFreq+0xa0>)
 80041dc:	f7fb ff9c 	bl	8000118 <__udivsi3>
 80041e0:	0003      	movs	r3, r0
 80041e2:	001a      	movs	r2, r3
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	4353      	muls	r3, r2
 80041e8:	617b      	str	r3, [r7, #20]
 80041ea:	e009      	b.n	8004200 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80041ec:	6879      	ldr	r1, [r7, #4]
 80041ee:	000a      	movs	r2, r1
 80041f0:	0152      	lsls	r2, r2, #5
 80041f2:	1a52      	subs	r2, r2, r1
 80041f4:	0193      	lsls	r3, r2, #6
 80041f6:	1a9b      	subs	r3, r3, r2
 80041f8:	00db      	lsls	r3, r3, #3
 80041fa:	185b      	adds	r3, r3, r1
 80041fc:	021b      	lsls	r3, r3, #8
 80041fe:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	613b      	str	r3, [r7, #16]
      break;
 8004204:	e002      	b.n	800420c <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004206:	4b05      	ldr	r3, [pc, #20]	@ (800421c <HAL_RCC_GetSysClockFreq+0xa0>)
 8004208:	613b      	str	r3, [r7, #16]
      break;
 800420a:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 800420c:	693b      	ldr	r3, [r7, #16]
}
 800420e:	0018      	movs	r0, r3
 8004210:	46bd      	mov	sp, r7
 8004212:	b006      	add	sp, #24
 8004214:	bd80      	pop	{r7, pc}
 8004216:	46c0      	nop			@ (mov r8, r8)
 8004218:	40021000 	.word	0x40021000
 800421c:	007a1200 	.word	0x007a1200
 8004220:	080068d8 	.word	0x080068d8
 8004224:	080068e8 	.word	0x080068e8

08004228 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800422c:	4b02      	ldr	r3, [pc, #8]	@ (8004238 <HAL_RCC_GetHCLKFreq+0x10>)
 800422e:	681b      	ldr	r3, [r3, #0]
}
 8004230:	0018      	movs	r0, r3
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
 8004236:	46c0      	nop			@ (mov r8, r8)
 8004238:	2000004c 	.word	0x2000004c

0800423c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8004240:	f7ff fff2 	bl	8004228 <HAL_RCC_GetHCLKFreq>
 8004244:	0001      	movs	r1, r0
 8004246:	4b06      	ldr	r3, [pc, #24]	@ (8004260 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	0a1b      	lsrs	r3, r3, #8
 800424c:	2207      	movs	r2, #7
 800424e:	4013      	ands	r3, r2
 8004250:	4a04      	ldr	r2, [pc, #16]	@ (8004264 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004252:	5cd3      	ldrb	r3, [r2, r3]
 8004254:	40d9      	lsrs	r1, r3
 8004256:	000b      	movs	r3, r1
}    
 8004258:	0018      	movs	r0, r3
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
 800425e:	46c0      	nop			@ (mov r8, r8)
 8004260:	40021000 	.word	0x40021000
 8004264:	080068d0 	.word	0x080068d0

08004268 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b082      	sub	sp, #8
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
 8004270:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2207      	movs	r2, #7
 8004276:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004278:	4b0e      	ldr	r3, [pc, #56]	@ (80042b4 <HAL_RCC_GetClockConfig+0x4c>)
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	2203      	movs	r2, #3
 800427e:	401a      	ands	r2, r3
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8004284:	4b0b      	ldr	r3, [pc, #44]	@ (80042b4 <HAL_RCC_GetClockConfig+0x4c>)
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	22f0      	movs	r2, #240	@ 0xf0
 800428a:	401a      	ands	r2, r3
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 8004290:	4b08      	ldr	r3, [pc, #32]	@ (80042b4 <HAL_RCC_GetClockConfig+0x4c>)
 8004292:	685a      	ldr	r2, [r3, #4]
 8004294:	23e0      	movs	r3, #224	@ 0xe0
 8004296:	00db      	lsls	r3, r3, #3
 8004298:	401a      	ands	r2, r3
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 800429e:	4b06      	ldr	r3, [pc, #24]	@ (80042b8 <HAL_RCC_GetClockConfig+0x50>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	2201      	movs	r2, #1
 80042a4:	401a      	ands	r2, r3
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	601a      	str	r2, [r3, #0]
}
 80042aa:	46c0      	nop			@ (mov r8, r8)
 80042ac:	46bd      	mov	sp, r7
 80042ae:	b002      	add	sp, #8
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	46c0      	nop			@ (mov r8, r8)
 80042b4:	40021000 	.word	0x40021000
 80042b8:	40022000 	.word	0x40022000

080042bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b082      	sub	sp, #8
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d101      	bne.n	80042ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e042      	b.n	8004354 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	223d      	movs	r2, #61	@ 0x3d
 80042d2:	5c9b      	ldrb	r3, [r3, r2]
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d107      	bne.n	80042ea <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	223c      	movs	r2, #60	@ 0x3c
 80042de:	2100      	movs	r1, #0
 80042e0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	0018      	movs	r0, r3
 80042e6:	f000 f839 	bl	800435c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	223d      	movs	r2, #61	@ 0x3d
 80042ee:	2102      	movs	r1, #2
 80042f0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	3304      	adds	r3, #4
 80042fa:	0019      	movs	r1, r3
 80042fc:	0010      	movs	r0, r2
 80042fe:	f000 f989 	bl	8004614 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2246      	movs	r2, #70	@ 0x46
 8004306:	2101      	movs	r1, #1
 8004308:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	223e      	movs	r2, #62	@ 0x3e
 800430e:	2101      	movs	r1, #1
 8004310:	5499      	strb	r1, [r3, r2]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	223f      	movs	r2, #63	@ 0x3f
 8004316:	2101      	movs	r1, #1
 8004318:	5499      	strb	r1, [r3, r2]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2240      	movs	r2, #64	@ 0x40
 800431e:	2101      	movs	r1, #1
 8004320:	5499      	strb	r1, [r3, r2]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2241      	movs	r2, #65	@ 0x41
 8004326:	2101      	movs	r1, #1
 8004328:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2242      	movs	r2, #66	@ 0x42
 800432e:	2101      	movs	r1, #1
 8004330:	5499      	strb	r1, [r3, r2]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2243      	movs	r2, #67	@ 0x43
 8004336:	2101      	movs	r1, #1
 8004338:	5499      	strb	r1, [r3, r2]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2244      	movs	r2, #68	@ 0x44
 800433e:	2101      	movs	r1, #1
 8004340:	5499      	strb	r1, [r3, r2]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2245      	movs	r2, #69	@ 0x45
 8004346:	2101      	movs	r1, #1
 8004348:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	223d      	movs	r2, #61	@ 0x3d
 800434e:	2101      	movs	r1, #1
 8004350:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004352:	2300      	movs	r3, #0
}
 8004354:	0018      	movs	r0, r3
 8004356:	46bd      	mov	sp, r7
 8004358:	b002      	add	sp, #8
 800435a:	bd80      	pop	{r7, pc}

0800435c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b082      	sub	sp, #8
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004364:	46c0      	nop			@ (mov r8, r8)
 8004366:	46bd      	mov	sp, r7
 8004368:	b002      	add	sp, #8
 800436a:	bd80      	pop	{r7, pc}

0800436c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b084      	sub	sp, #16
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	223d      	movs	r2, #61	@ 0x3d
 8004378:	5c9b      	ldrb	r3, [r3, r2]
 800437a:	b2db      	uxtb	r3, r3
 800437c:	2b01      	cmp	r3, #1
 800437e:	d001      	beq.n	8004384 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	e030      	b.n	80043e6 <HAL_TIM_Base_Start_IT+0x7a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	223d      	movs	r2, #61	@ 0x3d
 8004388:	2102      	movs	r1, #2
 800438a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	68da      	ldr	r2, [r3, #12]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	2101      	movs	r1, #1
 8004398:	430a      	orrs	r2, r1
 800439a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a13      	ldr	r2, [pc, #76]	@ (80043f0 <HAL_TIM_Base_Start_IT+0x84>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d004      	beq.n	80043b0 <HAL_TIM_Base_Start_IT+0x44>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a12      	ldr	r2, [pc, #72]	@ (80043f4 <HAL_TIM_Base_Start_IT+0x88>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d111      	bne.n	80043d4 <HAL_TIM_Base_Start_IT+0x68>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	2207      	movs	r2, #7
 80043b8:	4013      	ands	r3, r2
 80043ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2b06      	cmp	r3, #6
 80043c0:	d010      	beq.n	80043e4 <HAL_TIM_Base_Start_IT+0x78>
    {
      __HAL_TIM_ENABLE(htim);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	2101      	movs	r1, #1
 80043ce:	430a      	orrs	r2, r1
 80043d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043d2:	e007      	b.n	80043e4 <HAL_TIM_Base_Start_IT+0x78>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	2101      	movs	r1, #1
 80043e0:	430a      	orrs	r2, r1
 80043e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80043e4:	2300      	movs	r3, #0
}
 80043e6:	0018      	movs	r0, r3
 80043e8:	46bd      	mov	sp, r7
 80043ea:	b004      	add	sp, #16
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	46c0      	nop			@ (mov r8, r8)
 80043f0:	40012c00 	.word	0x40012c00
 80043f4:	40000400 	.word	0x40000400

080043f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b084      	sub	sp, #16
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	68db      	ldr	r3, [r3, #12]
 8004406:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	691b      	ldr	r3, [r3, #16]
 800440e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	2202      	movs	r2, #2
 8004414:	4013      	ands	r3, r2
 8004416:	d021      	beq.n	800445c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2202      	movs	r2, #2
 800441c:	4013      	ands	r3, r2
 800441e:	d01d      	beq.n	800445c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	2203      	movs	r2, #3
 8004426:	4252      	negs	r2, r2
 8004428:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2201      	movs	r2, #1
 800442e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	699b      	ldr	r3, [r3, #24]
 8004436:	2203      	movs	r2, #3
 8004438:	4013      	ands	r3, r2
 800443a:	d004      	beq.n	8004446 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	0018      	movs	r0, r3
 8004440:	f000 f8d0 	bl	80045e4 <HAL_TIM_IC_CaptureCallback>
 8004444:	e007      	b.n	8004456 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	0018      	movs	r0, r3
 800444a:	f000 f8c3 	bl	80045d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	0018      	movs	r0, r3
 8004452:	f000 f8cf 	bl	80045f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	2204      	movs	r2, #4
 8004460:	4013      	ands	r3, r2
 8004462:	d022      	beq.n	80044aa <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2204      	movs	r2, #4
 8004468:	4013      	ands	r3, r2
 800446a:	d01e      	beq.n	80044aa <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	2205      	movs	r2, #5
 8004472:	4252      	negs	r2, r2
 8004474:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2202      	movs	r2, #2
 800447a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	699a      	ldr	r2, [r3, #24]
 8004482:	23c0      	movs	r3, #192	@ 0xc0
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	4013      	ands	r3, r2
 8004488:	d004      	beq.n	8004494 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	0018      	movs	r0, r3
 800448e:	f000 f8a9 	bl	80045e4 <HAL_TIM_IC_CaptureCallback>
 8004492:	e007      	b.n	80044a4 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	0018      	movs	r0, r3
 8004498:	f000 f89c 	bl	80045d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	0018      	movs	r0, r3
 80044a0:	f000 f8a8 	bl	80045f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2200      	movs	r2, #0
 80044a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	2208      	movs	r2, #8
 80044ae:	4013      	ands	r3, r2
 80044b0:	d021      	beq.n	80044f6 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2208      	movs	r2, #8
 80044b6:	4013      	ands	r3, r2
 80044b8:	d01d      	beq.n	80044f6 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	2209      	movs	r2, #9
 80044c0:	4252      	negs	r2, r2
 80044c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2204      	movs	r2, #4
 80044c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	69db      	ldr	r3, [r3, #28]
 80044d0:	2203      	movs	r2, #3
 80044d2:	4013      	ands	r3, r2
 80044d4:	d004      	beq.n	80044e0 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	0018      	movs	r0, r3
 80044da:	f000 f883 	bl	80045e4 <HAL_TIM_IC_CaptureCallback>
 80044de:	e007      	b.n	80044f0 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	0018      	movs	r0, r3
 80044e4:	f000 f876 	bl	80045d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	0018      	movs	r0, r3
 80044ec:	f000 f882 	bl	80045f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2200      	movs	r2, #0
 80044f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	2210      	movs	r2, #16
 80044fa:	4013      	ands	r3, r2
 80044fc:	d022      	beq.n	8004544 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2210      	movs	r2, #16
 8004502:	4013      	ands	r3, r2
 8004504:	d01e      	beq.n	8004544 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	2211      	movs	r2, #17
 800450c:	4252      	negs	r2, r2
 800450e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2208      	movs	r2, #8
 8004514:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	69da      	ldr	r2, [r3, #28]
 800451c:	23c0      	movs	r3, #192	@ 0xc0
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	4013      	ands	r3, r2
 8004522:	d004      	beq.n	800452e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	0018      	movs	r0, r3
 8004528:	f000 f85c 	bl	80045e4 <HAL_TIM_IC_CaptureCallback>
 800452c:	e007      	b.n	800453e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	0018      	movs	r0, r3
 8004532:	f000 f84f 	bl	80045d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	0018      	movs	r0, r3
 800453a:	f000 f85b 	bl	80045f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	2201      	movs	r2, #1
 8004548:	4013      	ands	r3, r2
 800454a:	d00c      	beq.n	8004566 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2201      	movs	r2, #1
 8004550:	4013      	ands	r3, r2
 8004552:	d008      	beq.n	8004566 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	2202      	movs	r2, #2
 800455a:	4252      	negs	r2, r2
 800455c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	0018      	movs	r0, r3
 8004562:	f7fe fe73 	bl	800324c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	2280      	movs	r2, #128	@ 0x80
 800456a:	4013      	ands	r3, r2
 800456c:	d00c      	beq.n	8004588 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2280      	movs	r2, #128	@ 0x80
 8004572:	4013      	ands	r3, r2
 8004574:	d008      	beq.n	8004588 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	2281      	movs	r2, #129	@ 0x81
 800457c:	4252      	negs	r2, r2
 800457e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	0018      	movs	r0, r3
 8004584:	f000 f8c8 	bl	8004718 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	2240      	movs	r2, #64	@ 0x40
 800458c:	4013      	ands	r3, r2
 800458e:	d00c      	beq.n	80045aa <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2240      	movs	r2, #64	@ 0x40
 8004594:	4013      	ands	r3, r2
 8004596:	d008      	beq.n	80045aa <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	2241      	movs	r2, #65	@ 0x41
 800459e:	4252      	negs	r2, r2
 80045a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	0018      	movs	r0, r3
 80045a6:	f000 f82d 	bl	8004604 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	2220      	movs	r2, #32
 80045ae:	4013      	ands	r3, r2
 80045b0:	d00c      	beq.n	80045cc <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2220      	movs	r2, #32
 80045b6:	4013      	ands	r3, r2
 80045b8:	d008      	beq.n	80045cc <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	2221      	movs	r2, #33	@ 0x21
 80045c0:	4252      	negs	r2, r2
 80045c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	0018      	movs	r0, r3
 80045c8:	f000 f89e 	bl	8004708 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80045cc:	46c0      	nop			@ (mov r8, r8)
 80045ce:	46bd      	mov	sp, r7
 80045d0:	b004      	add	sp, #16
 80045d2:	bd80      	pop	{r7, pc}

080045d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b082      	sub	sp, #8
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80045dc:	46c0      	nop			@ (mov r8, r8)
 80045de:	46bd      	mov	sp, r7
 80045e0:	b002      	add	sp, #8
 80045e2:	bd80      	pop	{r7, pc}

080045e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b082      	sub	sp, #8
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80045ec:	46c0      	nop			@ (mov r8, r8)
 80045ee:	46bd      	mov	sp, r7
 80045f0:	b002      	add	sp, #8
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b082      	sub	sp, #8
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80045fc:	46c0      	nop			@ (mov r8, r8)
 80045fe:	46bd      	mov	sp, r7
 8004600:	b002      	add	sp, #8
 8004602:	bd80      	pop	{r7, pc}

08004604 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b082      	sub	sp, #8
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800460c:	46c0      	nop			@ (mov r8, r8)
 800460e:	46bd      	mov	sp, r7
 8004610:	b002      	add	sp, #8
 8004612:	bd80      	pop	{r7, pc}

08004614 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b084      	sub	sp, #16
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	4a32      	ldr	r2, [pc, #200]	@ (80046f0 <TIM_Base_SetConfig+0xdc>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d003      	beq.n	8004634 <TIM_Base_SetConfig+0x20>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	4a31      	ldr	r2, [pc, #196]	@ (80046f4 <TIM_Base_SetConfig+0xe0>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d108      	bne.n	8004646 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2270      	movs	r2, #112	@ 0x70
 8004638:	4393      	bics	r3, r2
 800463a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	68fa      	ldr	r2, [r7, #12]
 8004642:	4313      	orrs	r3, r2
 8004644:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	4a29      	ldr	r2, [pc, #164]	@ (80046f0 <TIM_Base_SetConfig+0xdc>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d00f      	beq.n	800466e <TIM_Base_SetConfig+0x5a>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	4a28      	ldr	r2, [pc, #160]	@ (80046f4 <TIM_Base_SetConfig+0xe0>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d00b      	beq.n	800466e <TIM_Base_SetConfig+0x5a>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4a27      	ldr	r2, [pc, #156]	@ (80046f8 <TIM_Base_SetConfig+0xe4>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d007      	beq.n	800466e <TIM_Base_SetConfig+0x5a>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4a26      	ldr	r2, [pc, #152]	@ (80046fc <TIM_Base_SetConfig+0xe8>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d003      	beq.n	800466e <TIM_Base_SetConfig+0x5a>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	4a25      	ldr	r2, [pc, #148]	@ (8004700 <TIM_Base_SetConfig+0xec>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d108      	bne.n	8004680 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	4a24      	ldr	r2, [pc, #144]	@ (8004704 <TIM_Base_SetConfig+0xf0>)
 8004672:	4013      	ands	r3, r2
 8004674:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	68db      	ldr	r3, [r3, #12]
 800467a:	68fa      	ldr	r2, [r7, #12]
 800467c:	4313      	orrs	r3, r2
 800467e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2280      	movs	r2, #128	@ 0x80
 8004684:	4393      	bics	r3, r2
 8004686:	001a      	movs	r2, r3
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	695b      	ldr	r3, [r3, #20]
 800468c:	4313      	orrs	r3, r2
 800468e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	68fa      	ldr	r2, [r7, #12]
 8004694:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	689a      	ldr	r2, [r3, #8]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	4a11      	ldr	r2, [pc, #68]	@ (80046f0 <TIM_Base_SetConfig+0xdc>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d007      	beq.n	80046be <TIM_Base_SetConfig+0xaa>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4a12      	ldr	r2, [pc, #72]	@ (80046fc <TIM_Base_SetConfig+0xe8>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d003      	beq.n	80046be <TIM_Base_SetConfig+0xaa>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4a11      	ldr	r2, [pc, #68]	@ (8004700 <TIM_Base_SetConfig+0xec>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d103      	bne.n	80046c6 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	691a      	ldr	r2, [r3, #16]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2201      	movs	r2, #1
 80046ca:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	691b      	ldr	r3, [r3, #16]
 80046d0:	2201      	movs	r2, #1
 80046d2:	4013      	ands	r3, r2
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d106      	bne.n	80046e6 <TIM_Base_SetConfig+0xd2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	691b      	ldr	r3, [r3, #16]
 80046dc:	2201      	movs	r2, #1
 80046de:	4393      	bics	r3, r2
 80046e0:	001a      	movs	r2, r3
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	611a      	str	r2, [r3, #16]
  }
}
 80046e6:	46c0      	nop			@ (mov r8, r8)
 80046e8:	46bd      	mov	sp, r7
 80046ea:	b004      	add	sp, #16
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	46c0      	nop			@ (mov r8, r8)
 80046f0:	40012c00 	.word	0x40012c00
 80046f4:	40000400 	.word	0x40000400
 80046f8:	40002000 	.word	0x40002000
 80046fc:	40014400 	.word	0x40014400
 8004700:	40014800 	.word	0x40014800
 8004704:	fffffcff 	.word	0xfffffcff

08004708 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b082      	sub	sp, #8
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004710:	46c0      	nop			@ (mov r8, r8)
 8004712:	46bd      	mov	sp, r7
 8004714:	b002      	add	sp, #8
 8004716:	bd80      	pop	{r7, pc}

08004718 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b082      	sub	sp, #8
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004720:	46c0      	nop			@ (mov r8, r8)
 8004722:	46bd      	mov	sp, r7
 8004724:	b002      	add	sp, #8
 8004726:	bd80      	pop	{r7, pc}

08004728 <vPortSetupTimerInterrupt>:
#endif /* configUSE_TICKLESS_IDLE */

/*-----------------------------------------------------------*/

__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void ) /* PRIVILEGED_FUNCTION */
{
 8004728:	b580      	push	{r7, lr}
 800472a:	af00      	add	r7, sp, #0
     * enable SysTick without first selecting a valid clock source. We trigger
     * the bug if we change clock sources from a clock with a zero clock period
     * to one with a nonzero clock period and enable Systick at the same time.
     * So we configure the CLKSOURCE bit here, prior to setting the ENABLE bit.
     * This workaround avoids the bug in QEMU versions older than 7.0.0. */
    portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT_CONFIG;
 800472c:	4b0b      	ldr	r3, [pc, #44]	@ (800475c <vPortSetupTimerInterrupt+0x34>)
 800472e:	2204      	movs	r2, #4
 8004730:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004732:	4b0b      	ldr	r3, [pc, #44]	@ (8004760 <vPortSetupTimerInterrupt+0x38>)
 8004734:	2200      	movs	r2, #0
 8004736:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004738:	4b0a      	ldr	r3, [pc, #40]	@ (8004764 <vPortSetupTimerInterrupt+0x3c>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	22fa      	movs	r2, #250	@ 0xfa
 800473e:	0091      	lsls	r1, r2, #2
 8004740:	0018      	movs	r0, r3
 8004742:	f7fb fce9 	bl	8000118 <__udivsi3>
 8004746:	0003      	movs	r3, r0
 8004748:	001a      	movs	r2, r3
 800474a:	4b07      	ldr	r3, [pc, #28]	@ (8004768 <vPortSetupTimerInterrupt+0x40>)
 800474c:	3a01      	subs	r2, #1
 800474e:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 8004750:	4b02      	ldr	r3, [pc, #8]	@ (800475c <vPortSetupTimerInterrupt+0x34>)
 8004752:	2207      	movs	r2, #7
 8004754:	601a      	str	r2, [r3, #0]
}
 8004756:	46c0      	nop			@ (mov r8, r8)
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}
 800475c:	e000e010 	.word	0xe000e010
 8004760:	e000e018 	.word	0xe000e018
 8004764:	2000004c 	.word	0x2000004c
 8004768:	e000e014 	.word	0xe000e014

0800476c <prvTaskExitError>:

/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b082      	sub	sp, #8
 8004770:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 8004772:	2300      	movs	r3, #0
 8004774:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to. If a task wants to exit it
     * should instead call vTaskDelete( NULL ). Artificially force an assert()
     * to be triggered if configASSERT() is defined, then stop here so
     * application writers can catch the error. */
    configASSERT( ulCriticalNesting == ~0UL );
    portDISABLE_INTERRUPTS();
 8004776:	b672      	cpsid	i

    while( ulDummy == 0 )
 8004778:	46c0      	nop			@ (mov r8, r8)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d0fc      	beq.n	800477a <prvTaskExitError+0xe>
         * warnings about code appearing after this function is called - making
         * ulDummy volatile makes the compiler think the function could return
         * and therefore not output an 'unreachable code' warning for code that
         * appears after it. */
    }
}
 8004780:	46c0      	nop			@ (mov r8, r8)
 8004782:	46c0      	nop			@ (mov r8, r8)
 8004784:	46bd      	mov	sp, r7
 8004786:	b002      	add	sp, #8
 8004788:	bd80      	pop	{r7, pc}
	...

0800478c <vPortYield>:
#endif /* configENABLE_MPU */

/*-----------------------------------------------------------*/

void vPortYield( void ) /* PRIVILEGED_FUNCTION */
{
 800478c:	b580      	push	{r7, lr}
 800478e:	af00      	add	r7, sp, #0
    /* Set a PendSV to request a context switch. */
    portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004790:	4b05      	ldr	r3, [pc, #20]	@ (80047a8 <vPortYield+0x1c>)
 8004792:	2280      	movs	r2, #128	@ 0x80
 8004794:	0552      	lsls	r2, r2, #21
 8004796:	601a      	str	r2, [r3, #0]

    /* Barriers are normally not required but do ensure the code is
     * completely within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 8004798:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 800479c:	f3bf 8f6f 	isb	sy
}
 80047a0:	46c0      	nop			@ (mov r8, r8)
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
 80047a6:	46c0      	nop			@ (mov r8, r8)
 80047a8:	e000ed04 	.word	0xe000ed04

080047ac <vPortEnterCritical>:

/*-----------------------------------------------------------*/

void vPortEnterCritical( void ) /* PRIVILEGED_FUNCTION */
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 80047b0:	b672      	cpsid	i
    ulCriticalNesting++;
 80047b2:	4b06      	ldr	r3, [pc, #24]	@ (80047cc <vPortEnterCritical+0x20>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	1c5a      	adds	r2, r3, #1
 80047b8:	4b04      	ldr	r3, [pc, #16]	@ (80047cc <vPortEnterCritical+0x20>)
 80047ba:	601a      	str	r2, [r3, #0]

    /* Barriers are normally not required but do ensure the code is
     * completely within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 80047bc:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 80047c0:	f3bf 8f6f 	isb	sy
}
 80047c4:	46c0      	nop			@ (mov r8, r8)
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}
 80047ca:	46c0      	nop			@ (mov r8, r8)
 80047cc:	20000058 	.word	0x20000058

080047d0 <vPortExitCritical>:

/*-----------------------------------------------------------*/

void vPortExitCritical( void ) /* PRIVILEGED_FUNCTION */
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	af00      	add	r7, sp, #0
    configASSERT( ulCriticalNesting );
    ulCriticalNesting--;
 80047d4:	4b06      	ldr	r3, [pc, #24]	@ (80047f0 <vPortExitCritical+0x20>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	1e5a      	subs	r2, r3, #1
 80047da:	4b05      	ldr	r3, [pc, #20]	@ (80047f0 <vPortExitCritical+0x20>)
 80047dc:	601a      	str	r2, [r3, #0]

    if( ulCriticalNesting == 0 )
 80047de:	4b04      	ldr	r3, [pc, #16]	@ (80047f0 <vPortExitCritical+0x20>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d100      	bne.n	80047e8 <vPortExitCritical+0x18>
    {
        portENABLE_INTERRUPTS();
 80047e6:	b662      	cpsie	i
    }
}
 80047e8:	46c0      	nop			@ (mov r8, r8)
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}
 80047ee:	46c0      	nop			@ (mov r8, r8)
 80047f0:	20000058 	.word	0x20000058

080047f4 <SysTick_Handler>:

/*-----------------------------------------------------------*/

void SysTick_Handler( void ) /* PRIVILEGED_FUNCTION */
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b082      	sub	sp, #8
 80047f8:	af00      	add	r7, sp, #0
    uint32_t ulPreviousMask;

    ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 80047fa:	f000 f913 	bl	8004a24 <ulSetInterruptMask>
 80047fe:	0003      	movs	r3, r0
 8004800:	607b      	str	r3, [r7, #4]

    traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004802:	f001 f8d9 	bl	80059b8 <xTaskIncrementTick>
 8004806:	1e03      	subs	r3, r0, #0
 8004808:	d003      	beq.n	8004812 <SysTick_Handler+0x1e>
        {
            traceISR_EXIT_TO_SCHEDULER();
            /* Pend a context switch. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800480a:	4b06      	ldr	r3, [pc, #24]	@ (8004824 <SysTick_Handler+0x30>)
 800480c:	2280      	movs	r2, #128	@ 0x80
 800480e:	0552      	lsls	r2, r2, #21
 8004810:	601a      	str	r2, [r3, #0]
        {
            traceISR_EXIT();
        }
    }

    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	0018      	movs	r0, r3
 8004816:	f000 f90b 	bl	8004a30 <vClearInterruptMask>
}
 800481a:	46c0      	nop			@ (mov r8, r8)
 800481c:	46bd      	mov	sp, r7
 800481e:	b002      	add	sp, #8
 8004820:	bd80      	pop	{r7, pc}
 8004822:	46c0      	nop			@ (mov r8, r8)
 8004824:	e000ed04 	.word	0xe000ed04

08004828 <vPortSVCHandler_C>:

/*-----------------------------------------------------------*/

void vPortSVCHandler_C( uint32_t * pulCallerStackAddress ) /* PRIVILEGED_FUNCTION portDONT_DISCARD */
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b084      	sub	sp, #16
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
    uint32_t ulPC;
    uint8_t ucSVCNumber;

    /* Register are stored on the stack in the following order - R0, R1, R2, R3,
     * R12, LR, PC, xPSR. */
    ulPC = pulCallerStackAddress[ portOFFSET_TO_PC ];
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	699b      	ldr	r3, [r3, #24]
 8004834:	60fb      	str	r3, [r7, #12]
    ucSVCNumber = ( ( uint8_t * ) ulPC )[ -2 ];
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	3b02      	subs	r3, #2
 800483a:	001a      	movs	r2, r3
 800483c:	210b      	movs	r1, #11
 800483e:	187b      	adds	r3, r7, r1
 8004840:	7812      	ldrb	r2, [r2, #0]
 8004842:	701a      	strb	r2, [r3, #0]

    switch( ucSVCNumber )
 8004844:	187b      	adds	r3, r7, r1
 8004846:	781b      	ldrb	r3, [r3, #0]
 8004848:	2b64      	cmp	r3, #100	@ 0x64
 800484a:	d102      	bne.n	8004852 <vPortSVCHandler_C+0x2a>
    {
        case portSVC_START_SCHEDULER:
            /* Setup the context of the first task so that the first task starts
             * executing. */
            vRestoreContextOfFirstTask();
 800484c:	f000 f8c8 	bl	80049e0 <vRestoreContextOfFirstTask>
            break;
 8004850:	46c0      	nop			@ (mov r8, r8)

        default:
            /* Incorrect SVC call. */
            configASSERT( pdFALSE );
    }
}
 8004852:	46c0      	nop			@ (mov r8, r8)
 8004854:	46bd      	mov	sp, r7
 8004856:	b004      	add	sp, #16
 8004858:	bd80      	pop	{r7, pc}
	...

0800485c <pxPortInitialiseStack>:
#else /* configENABLE_MPU */

    StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                         TaskFunction_t pxCode,
                                         void * pvParameters ) /* PRIVILEGED_FUNCTION */
    {
 800485c:	b580      	push	{r7, lr}
 800485e:	b084      	sub	sp, #16
 8004860:	af00      	add	r7, sp, #0
 8004862:	60f8      	str	r0, [r7, #12]
 8004864:	60b9      	str	r1, [r7, #8]
 8004866:	607a      	str	r2, [r7, #4]
            pxTopOfStack -= 9;                                       /* R11..R4, EXC_RETURN. */
            *pxTopOfStack = portINITIAL_EXC_RETURN;
        }
        #else /* portPRELOAD_REGISTERS */
        {
            pxTopOfStack--;                                          /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	3b04      	subs	r3, #4
 800486c:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = portINITIAL_XPSR;                        /* xPSR. */
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2280      	movs	r2, #128	@ 0x80
 8004872:	0452      	lsls	r2, r2, #17
 8004874:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	3b04      	subs	r3, #4
 800487a:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) pxCode;                  /* PC. */
 800487c:	68ba      	ldr	r2, [r7, #8]
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	3b04      	subs	r3, #4
 8004886:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS; /* LR. */
 8004888:	4a2e      	ldr	r2, [pc, #184]	@ (8004944 <pxPortInitialiseStack+0xe8>)
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	3b04      	subs	r3, #4
 8004892:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x12121212UL;            /* R12. */
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	4a2c      	ldr	r2, [pc, #176]	@ (8004948 <pxPortInitialiseStack+0xec>)
 8004898:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	3b04      	subs	r3, #4
 800489e:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x03030303UL;            /* R3. */
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	4a2a      	ldr	r2, [pc, #168]	@ (800494c <pxPortInitialiseStack+0xf0>)
 80048a4:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	3b04      	subs	r3, #4
 80048aa:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x02020202UL;            /* R2. */
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	4a28      	ldr	r2, [pc, #160]	@ (8004950 <pxPortInitialiseStack+0xf4>)
 80048b0:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	3b04      	subs	r3, #4
 80048b6:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x01010101UL;            /* R1. */
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	4a26      	ldr	r2, [pc, #152]	@ (8004954 <pxPortInitialiseStack+0xf8>)
 80048bc:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	3b04      	subs	r3, #4
 80048c2:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) pvParameters;            /* R0. */
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	3b04      	subs	r3, #4
 80048ce:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x11111111UL;            /* R11. */
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	4a21      	ldr	r2, [pc, #132]	@ (8004958 <pxPortInitialiseStack+0xfc>)
 80048d4:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	3b04      	subs	r3, #4
 80048da:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x10101010UL;            /* R10. */
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	4a1f      	ldr	r2, [pc, #124]	@ (800495c <pxPortInitialiseStack+0x100>)
 80048e0:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	3b04      	subs	r3, #4
 80048e6:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x09090909UL;            /* R09. */
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	4a1d      	ldr	r2, [pc, #116]	@ (8004960 <pxPortInitialiseStack+0x104>)
 80048ec:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	3b04      	subs	r3, #4
 80048f2:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x08080808UL;            /* R08. */
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	4a1b      	ldr	r2, [pc, #108]	@ (8004964 <pxPortInitialiseStack+0x108>)
 80048f8:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	3b04      	subs	r3, #4
 80048fe:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x07070707UL;            /* R07. */
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	4a19      	ldr	r2, [pc, #100]	@ (8004968 <pxPortInitialiseStack+0x10c>)
 8004904:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	3b04      	subs	r3, #4
 800490a:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x06060606UL;            /* R06. */
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	4a17      	ldr	r2, [pc, #92]	@ (800496c <pxPortInitialiseStack+0x110>)
 8004910:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	3b04      	subs	r3, #4
 8004916:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x05050505UL;            /* R05. */
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	4a15      	ldr	r2, [pc, #84]	@ (8004970 <pxPortInitialiseStack+0x114>)
 800491c:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	3b04      	subs	r3, #4
 8004922:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = ( StackType_t ) 0x04040404UL;            /* R04. */
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	4a13      	ldr	r2, [pc, #76]	@ (8004974 <pxPortInitialiseStack+0x118>)
 8004928:	601a      	str	r2, [r3, #0]
            pxTopOfStack--;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	3b04      	subs	r3, #4
 800492e:	60fb      	str	r3, [r7, #12]
            *pxTopOfStack = portINITIAL_EXC_RETURN;                  /* EXC_RETURN. */
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2203      	movs	r2, #3
 8004934:	4252      	negs	r2, r2
 8004936:	601a      	str	r2, [r3, #0]
        }
        #endif /* portPRELOAD_REGISTERS */

        return pxTopOfStack;
 8004938:	68fb      	ldr	r3, [r7, #12]
    }
 800493a:	0018      	movs	r0, r3
 800493c:	46bd      	mov	sp, r7
 800493e:	b004      	add	sp, #16
 8004940:	bd80      	pop	{r7, pc}
 8004942:	46c0      	nop			@ (mov r8, r8)
 8004944:	0800476d 	.word	0x0800476d
 8004948:	12121212 	.word	0x12121212
 800494c:	03030303 	.word	0x03030303
 8004950:	02020202 	.word	0x02020202
 8004954:	01010101 	.word	0x01010101
 8004958:	11111111 	.word	0x11111111
 800495c:	10101010 	.word	0x10101010
 8004960:	09090909 	.word	0x09090909
 8004964:	08080808 	.word	0x08080808
 8004968:	07070707 	.word	0x07070707
 800496c:	06060606 	.word	0x06060606
 8004970:	05050505 	.word	0x05050505
 8004974:	04040404 	.word	0x04040404

08004978 <xPortStartScheduler>:
#endif /* configENABLE_MPU */

/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void ) /* PRIVILEGED_FUNCTION */
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b082      	sub	sp, #8
 800497c:	af00      	add	r7, sp, #0
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 800497e:	4b12      	ldr	r3, [pc, #72]	@ (80049c8 <xPortStartScheduler+0x50>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	607b      	str	r3, [r7, #4]
    }
    #endif /* configCHECK_HANDLER_INSTALLATION */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8004984:	4b11      	ldr	r3, [pc, #68]	@ (80049cc <xPortStartScheduler+0x54>)
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	4b10      	ldr	r3, [pc, #64]	@ (80049cc <xPortStartScheduler+0x54>)
 800498a:	21ff      	movs	r1, #255	@ 0xff
 800498c:	0409      	lsls	r1, r1, #16
 800498e:	430a      	orrs	r2, r1
 8004990:	601a      	str	r2, [r3, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004992:	4b0e      	ldr	r3, [pc, #56]	@ (80049cc <xPortStartScheduler+0x54>)
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	4b0d      	ldr	r3, [pc, #52]	@ (80049cc <xPortStartScheduler+0x54>)
 8004998:	21ff      	movs	r1, #255	@ 0xff
 800499a:	0609      	lsls	r1, r1, #24
 800499c:	430a      	orrs	r2, r1
 800499e:	601a      	str	r2, [r3, #0]
    portNVIC_SHPR2_REG = 0;
 80049a0:	4b0b      	ldr	r3, [pc, #44]	@ (80049d0 <xPortStartScheduler+0x58>)
 80049a2:	2200      	movs	r2, #0
 80049a4:	601a      	str	r2, [r3, #0]
    }
    #endif /* configENABLE_MPU */

    /* Start the timer that generates the tick ISR. Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80049a6:	f7ff febf 	bl	8004728 <vPortSetupTimerInterrupt>

    /* Initialize the critical nesting count ready for the first task. */
    ulCriticalNesting = 0;
 80049aa:	4b0a      	ldr	r3, [pc, #40]	@ (80049d4 <xPortStartScheduler+0x5c>)
 80049ac:	2200      	movs	r2, #0
 80049ae:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
    }
    #endif

    /* Start the first task. */
    vStartFirstTask();
 80049b0:	f000 f82e 	bl	8004a10 <vStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS. Call
     * vTaskSwitchContext() so link time optimization does not remove the
     * symbol. */
    vTaskSwitchContext();
 80049b4:	f001 f906 	bl	8005bc4 <vTaskSwitchContext>
    prvTaskExitError();
 80049b8:	f7ff fed8 	bl	800476c <prvTaskExitError>

    /* Should not get here. */
    return 0;
 80049bc:	2300      	movs	r3, #0
}
 80049be:	0018      	movs	r0, r3
 80049c0:	46bd      	mov	sp, r7
 80049c2:	b002      	add	sp, #8
 80049c4:	bd80      	pop	{r7, pc}
 80049c6:	46c0      	nop			@ (mov r8, r8)
 80049c8:	e000ed08 	.word	0xe000ed08
 80049cc:	e000ed20 	.word	0xe000ed20
 80049d0:	e000ed1c 	.word	0xe000ed1c
 80049d4:	20000058 	.word	0x20000058
	...

080049e0 <vRestoreContextOfFirstTask>:

#else /* configENABLE_MPU */

    void vRestoreContextOfFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
    {
        __asm volatile
 80049e0:	4a08      	ldr	r2, [pc, #32]	@ (8004a04 <vRestoreContextOfFirstTask+0x24>)
 80049e2:	6811      	ldr	r1, [r2, #0]
 80049e4:	6808      	ldr	r0, [r1, #0]
 80049e6:	c804      	ldmia	r0!, {r2}
 80049e8:	2102      	movs	r1, #2
 80049ea:	f381 8814 	msr	CONTROL, r1
 80049ee:	3020      	adds	r0, #32
 80049f0:	f380 8809 	msr	PSP, r0
 80049f4:	f3bf 8f6f 	isb	sy
 80049f8:	4710      	bx	r2
 80049fa:	46c0      	nop			@ (mov r8, r8)
 80049fc:	46c0      	nop			@ (mov r8, r8)
 80049fe:	46c0      	nop			@ (mov r8, r8)
            " isb                                             \n"
            " bx   r2                                         \n" /* Finally, branch to EXC_RETURN. */
            "                                                 \n"
            " .align 4                                        \n"
        );
    }
 8004a00:	46c0      	nop			@ (mov r8, r8)
 8004a02:	0000      	.short	0x0000
 8004a04:	200008d0 	.word	0x200008d0
	...

08004a10 <vStartFirstTask>:
void vStartFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    /* Don't reset the MSP stack as is done on CM3/4 devices. The reason is that
     * the Vector Table Offset Register (VTOR) is optional in CM0+ architecture
     * and therefore, may not be available on all the devices. */
    __asm volatile
 8004a10:	b662      	cpsie	i
 8004a12:	f3bf 8f4f 	dsb	sy
 8004a16:	f3bf 8f6f 	isb	sy
 8004a1a:	df64      	svc	100	@ 0x64
 8004a1c:	46c0      	nop			@ (mov r8, r8)
 8004a1e:	46c0      	nop			@ (mov r8, r8)
        " nop                                             \n"
        "                                                 \n"
        " .align 4                                        \n"
        ::"i" ( portSVC_START_SCHEDULER ) : "memory"
    );
}
 8004a20:	46c0      	nop			@ (mov r8, r8)
 8004a22:	46c0      	nop			@ (mov r8, r8)

08004a24 <ulSetInterruptMask>:

/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMask( void ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 8004a24:	f3ef 8010 	mrs	r0, PRIMASK
 8004a28:	b672      	cpsid	i
 8004a2a:	4770      	bx	lr
        " mrs r0, PRIMASK                                 \n"
        " cpsid i                                         \n"
        " bx lr                                           \n"
        ::: "memory"
    );
}
 8004a2c:	46c0      	nop			@ (mov r8, r8)
 8004a2e:	0018      	movs	r0, r3

08004a30 <vClearInterruptMask>:

/*-----------------------------------------------------------*/

void vClearInterruptMask( __attribute__( ( unused ) ) uint32_t ulMask ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 8004a30:	f380 8810 	msr	PRIMASK, r0
 8004a34:	4770      	bx	lr
        "                                                 \n"
        " msr PRIMASK, r0                                 \n"
        " bx lr                                           \n"
        ::: "memory"
    );
}
 8004a36:	46c0      	nop			@ (mov r8, r8)
	...

08004a40 <PendSV_Handler>:

#else /* configENABLE_MPU */

    void PendSV_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
    {
        __asm volatile
 8004a40:	f3ef 8009 	mrs	r0, PSP
 8004a44:	4a0f      	ldr	r2, [pc, #60]	@ (8004a84 <PendSV_Handler+0x44>)
 8004a46:	6811      	ldr	r1, [r2, #0]
 8004a48:	3824      	subs	r0, #36	@ 0x24
 8004a4a:	6008      	str	r0, [r1, #0]
 8004a4c:	4673      	mov	r3, lr
 8004a4e:	c0f8      	stmia	r0!, {r3, r4, r5, r6, r7}
 8004a50:	4644      	mov	r4, r8
 8004a52:	464d      	mov	r5, r9
 8004a54:	4656      	mov	r6, sl
 8004a56:	465f      	mov	r7, fp
 8004a58:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8004a5a:	b672      	cpsid	i
 8004a5c:	f001 f8b2 	bl	8005bc4 <vTaskSwitchContext>
 8004a60:	b662      	cpsie	i
 8004a62:	4a08      	ldr	r2, [pc, #32]	@ (8004a84 <PendSV_Handler+0x44>)
 8004a64:	6811      	ldr	r1, [r2, #0]
 8004a66:	6808      	ldr	r0, [r1, #0]
 8004a68:	3014      	adds	r0, #20
 8004a6a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8004a6c:	46a0      	mov	r8, r4
 8004a6e:	46a9      	mov	r9, r5
 8004a70:	46b2      	mov	sl, r6
 8004a72:	46bb      	mov	fp, r7
 8004a74:	f380 8809 	msr	PSP, r0
 8004a78:	3824      	subs	r0, #36	@ 0x24
 8004a7a:	c8f8      	ldmia	r0!, {r3, r4, r5, r6, r7}
 8004a7c:	4718      	bx	r3
 8004a7e:	46c0      	nop			@ (mov r8, r8)
            " ldmia r0!, {r3-r7}                              \n" /* Read from stack - r3 = LR and r4-r7 restored. */
            " bx r3                                           \n"
            "                                                 \n"
            " .align 4                                        \n"
        );
    }
 8004a80:	46c0      	nop			@ (mov r8, r8)
 8004a82:	0000      	.short	0x0000
 8004a84:	200008d0 	.word	0x200008d0
	...

08004a90 <SVC_Handler>:

#else /* ( configENABLE_MPU == 1 ) && ( configUSE_MPU_WRAPPERS_V1 == 0 ) */

    void SVC_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
    {
        __asm volatile
 8004a90:	2004      	movs	r0, #4
 8004a92:	4671      	mov	r1, lr
 8004a94:	4208      	tst	r0, r1
 8004a96:	d002      	beq.n	8004a9e <stacking_used_msp>

08004a98 <stacking_used_psp>:
 8004a98:	f3ef 8009 	mrs	r0, PSP
 8004a9c:	e6c4      	b.n	8004828 <vPortSVCHandler_C>

08004a9e <stacking_used_msp>:
 8004a9e:	f3ef 8008 	mrs	r0, MSP
 8004aa2:	e6c1      	b.n	8004828 <vPortSVCHandler_C>
 8004aa4:	46c0      	nop			@ (mov r8, r8)
 8004aa6:	46c0      	nop			@ (mov r8, r8)
 8004aa8:	46c0      	nop			@ (mov r8, r8)
 8004aaa:	46c0      	nop			@ (mov r8, r8)
 8004aac:	46c0      	nop			@ (mov r8, r8)
 8004aae:	46c0      	nop			@ (mov r8, r8)
            "    mrs r0, msp                 \n"
            "    b vPortSVCHandler_C         \n"
            "                                \n"
            " .align 4                       \n"
        );
    }
 8004ab0:	46c0      	nop			@ (mov r8, r8)
 8004ab2:	46c0      	nop			@ (mov r8, r8)

08004ab4 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b088      	sub	sp, #32
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8004abc:	2300      	movs	r3, #0
 8004abe:	617b      	str	r3, [r7, #20]
    size_t xAdditionalRequiredSize;

    if( xWantedSize > 0 )
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d021      	beq.n	8004b0a <pvPortMalloc+0x56>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 8004ac6:	2308      	movs	r3, #8
 8004ac8:	43db      	mvns	r3, r3
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d81a      	bhi.n	8004b06 <pvPortMalloc+0x52>
        {
            xWantedSize += xHeapStructSize;
 8004ad0:	2208      	movs	r2, #8
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	189b      	adds	r3, r3, r2
 8004ad6:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2207      	movs	r2, #7
 8004adc:	4013      	ands	r3, r2
 8004ade:	d014      	beq.n	8004b0a <pvPortMalloc+0x56>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2207      	movs	r2, #7
 8004ae4:	4013      	ands	r3, r2
 8004ae6:	2208      	movs	r2, #8
 8004ae8:	1ad3      	subs	r3, r2, r3
 8004aea:	613b      	str	r3, [r7, #16]

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	43db      	mvns	r3, r3
 8004af0:	687a      	ldr	r2, [r7, #4]
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d804      	bhi.n	8004b00 <pvPortMalloc+0x4c>
                {
                    xWantedSize += xAdditionalRequiredSize;
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	18d3      	adds	r3, r2, r3
 8004afc:	607b      	str	r3, [r7, #4]
 8004afe:	e004      	b.n	8004b0a <pvPortMalloc+0x56>
                }
                else
                {
                    xWantedSize = 0;
 8004b00:	2300      	movs	r3, #0
 8004b02:	607b      	str	r3, [r7, #4]
 8004b04:	e001      	b.n	8004b0a <pvPortMalloc+0x56>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 8004b06:	2300      	movs	r3, #0
 8004b08:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 8004b0a:	f000 fe4d 	bl	80057a8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004b0e:	4b3d      	ldr	r3, [pc, #244]	@ (8004c04 <pvPortMalloc+0x150>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d101      	bne.n	8004b1a <pvPortMalloc+0x66>
        {
            prvHeapInit();
 8004b16:	f000 f8b9 	bl	8004c8c <prvHeapInit>

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	db65      	blt.n	8004bec <pvPortMalloc+0x138>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d062      	beq.n	8004bec <pvPortMalloc+0x138>
 8004b26:	4b38      	ldr	r3, [pc, #224]	@ (8004c08 <pvPortMalloc+0x154>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d85d      	bhi.n	8004bec <pvPortMalloc+0x138>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004b30:	4b36      	ldr	r3, [pc, #216]	@ (8004c0c <pvPortMalloc+0x158>)
 8004b32:	61bb      	str	r3, [r7, #24]
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 8004b34:	4b35      	ldr	r3, [pc, #212]	@ (8004c0c <pvPortMalloc+0x158>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	61fb      	str	r3, [r7, #28]
                heapVALIDATE_BLOCK_POINTER( pxBlock );

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 8004b3a:	e004      	b.n	8004b46 <pvPortMalloc+0x92>
                {
                    pxPreviousBlock = pxBlock;
 8004b3c:	69fb      	ldr	r3, [r7, #28]
 8004b3e:	61bb      	str	r3, [r7, #24]
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 8004b40:	69fb      	ldr	r3, [r7, #28]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	61fb      	str	r3, [r7, #28]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 8004b46:	69fb      	ldr	r3, [r7, #28]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d903      	bls.n	8004b58 <pvPortMalloc+0xa4>
 8004b50:	69fb      	ldr	r3, [r7, #28]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d1f1      	bne.n	8004b3c <pvPortMalloc+0x88>
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004b58:	4b2a      	ldr	r3, [pc, #168]	@ (8004c04 <pvPortMalloc+0x150>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	69fa      	ldr	r2, [r7, #28]
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d044      	beq.n	8004bec <pvPortMalloc+0x138>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 8004b62:	69bb      	ldr	r3, [r7, #24]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	2208      	movs	r2, #8
 8004b68:	189b      	adds	r3, r3, r2
 8004b6a:	617b      	str	r3, [r7, #20]
                    heapVALIDATE_BLOCK_POINTER( pvReturn );

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004b6c:	69fb      	ldr	r3, [r7, #28]
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	69bb      	ldr	r3, [r7, #24]
 8004b72:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004b74:	69fb      	ldr	r3, [r7, #28]
 8004b76:	685a      	ldr	r2, [r3, #4]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	1ad2      	subs	r2, r2, r3
 8004b7c:	2308      	movs	r3, #8
 8004b7e:	005b      	lsls	r3, r3, #1
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d913      	bls.n	8004bac <pvPortMalloc+0xf8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004b84:	69fa      	ldr	r2, [r7, #28]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	18d3      	adds	r3, r2, r3
 8004b8a:	60fb      	str	r3, [r7, #12]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004b8c:	69fb      	ldr	r3, [r7, #28]
 8004b8e:	685a      	ldr	r2, [r3, #4]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	1ad2      	subs	r2, r2, r3
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004b98:	69fb      	ldr	r3, [r7, #28]
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 8004b9e:	69bb      	ldr	r3, [r7, #24]
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 8004ba6:	69bb      	ldr	r3, [r7, #24]
 8004ba8:	68fa      	ldr	r2, [r7, #12]
 8004baa:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004bac:	4b16      	ldr	r3, [pc, #88]	@ (8004c08 <pvPortMalloc+0x154>)
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	69fb      	ldr	r3, [r7, #28]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	1ad2      	subs	r2, r2, r3
 8004bb6:	4b14      	ldr	r3, [pc, #80]	@ (8004c08 <pvPortMalloc+0x154>)
 8004bb8:	601a      	str	r2, [r3, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004bba:	4b13      	ldr	r3, [pc, #76]	@ (8004c08 <pvPortMalloc+0x154>)
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	4b14      	ldr	r3, [pc, #80]	@ (8004c10 <pvPortMalloc+0x15c>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d203      	bcs.n	8004bce <pvPortMalloc+0x11a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004bc6:	4b10      	ldr	r3, [pc, #64]	@ (8004c08 <pvPortMalloc+0x154>)
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	4b11      	ldr	r3, [pc, #68]	@ (8004c10 <pvPortMalloc+0x15c>)
 8004bcc:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8004bce:	69fb      	ldr	r3, [r7, #28]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	2280      	movs	r2, #128	@ 0x80
 8004bd4:	0612      	lsls	r2, r2, #24
 8004bd6:	431a      	orrs	r2, r3
 8004bd8:	69fb      	ldr	r3, [r7, #28]
 8004bda:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004bdc:	69fb      	ldr	r3, [r7, #28]
 8004bde:	2200      	movs	r2, #0
 8004be0:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004be2:	4b0c      	ldr	r3, [pc, #48]	@ (8004c14 <pvPortMalloc+0x160>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	1c5a      	adds	r2, r3, #1
 8004be8:	4b0a      	ldr	r3, [pc, #40]	@ (8004c14 <pvPortMalloc+0x160>)
 8004bea:	601a      	str	r2, [r3, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004bec:	f000 fde8 	bl	80057c0 <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
    {
        if( pvReturn == NULL )
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d101      	bne.n	8004bfa <pvPortMalloc+0x146>
        {
            vApplicationMallocFailedHook();
 8004bf6:	f7fe f9d7 	bl	8002fa8 <vApplicationMallocFailedHook>
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
 8004bfa:	697b      	ldr	r3, [r7, #20]
}
 8004bfc:	0018      	movs	r0, r3
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	b008      	add	sp, #32
 8004c02:	bd80      	pop	{r7, pc}
 8004c04:	200008bc 	.word	0x200008bc
 8004c08:	200008c0 	.word	0x200008c0
 8004c0c:	200008b4 	.word	0x200008b4
 8004c10:	200008c4 	.word	0x200008c4
 8004c14:	200008c8 	.word	0x200008c8

08004c18 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b084      	sub	sp, #16
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d028      	beq.n	8004c7c <vPortFree+0x64>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004c2a:	2308      	movs	r3, #8
 8004c2c:	425b      	negs	r3, r3
 8004c2e:	68fa      	ldr	r2, [r7, #12]
 8004c30:	18d3      	adds	r3, r2, r3
 8004c32:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	60bb      	str	r3, [r7, #8]

        heapVALIDATE_BLOCK_POINTER( pxLink );
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	da1d      	bge.n	8004c7c <vPortFree+0x64>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d119      	bne.n	8004c7c <vPortFree+0x64>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	005b      	lsls	r3, r3, #1
 8004c4e:	085a      	lsrs	r2, r3, #1
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 8004c54:	f000 fda8 	bl	80057a8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	685a      	ldr	r2, [r3, #4]
 8004c5c:	4b09      	ldr	r3, [pc, #36]	@ (8004c84 <vPortFree+0x6c>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	18d2      	adds	r2, r2, r3
 8004c62:	4b08      	ldr	r3, [pc, #32]	@ (8004c84 <vPortFree+0x6c>)
 8004c64:	601a      	str	r2, [r3, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	0018      	movs	r0, r3
 8004c6a:	f000 f867 	bl	8004d3c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004c6e:	4b06      	ldr	r3, [pc, #24]	@ (8004c88 <vPortFree+0x70>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	1c5a      	adds	r2, r3, #1
 8004c74:	4b04      	ldr	r3, [pc, #16]	@ (8004c88 <vPortFree+0x70>)
 8004c76:	601a      	str	r2, [r3, #0]
                }
                ( void ) xTaskResumeAll();
 8004c78:	f000 fda2 	bl	80057c0 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004c7c:	46c0      	nop			@ (mov r8, r8)
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	b004      	add	sp, #16
 8004c82:	bd80      	pop	{r7, pc}
 8004c84:	200008c0 	.word	0x200008c0
 8004c88:	200008cc 	.word	0x200008cc

08004c8c <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b084      	sub	sp, #16
 8004c90:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004c92:	23fd      	movs	r3, #253	@ 0xfd
 8004c94:	00db      	lsls	r3, r3, #3
 8004c96:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004c98:	4b23      	ldr	r3, [pc, #140]	@ (8004d28 <prvHeapInit+0x9c>)
 8004c9a:	60fb      	str	r3, [r7, #12]

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2207      	movs	r2, #7
 8004ca0:	4013      	ands	r3, r2
 8004ca2:	d00c      	beq.n	8004cbe <prvHeapInit+0x32>
    {
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	3307      	adds	r3, #7
 8004ca8:	60fb      	str	r3, [r7, #12]
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2207      	movs	r2, #7
 8004cae:	4393      	bics	r3, r2
 8004cb0:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 8004cb2:	68ba      	ldr	r2, [r7, #8]
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	1ad2      	subs	r2, r2, r3
 8004cb8:	4b1b      	ldr	r3, [pc, #108]	@ (8004d28 <prvHeapInit+0x9c>)
 8004cba:	18d3      	adds	r3, r2, r3
 8004cbc:	60bb      	str	r3, [r7, #8]
    }
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 8004cbe:	68fa      	ldr	r2, [r7, #12]
 8004cc0:	4b1a      	ldr	r3, [pc, #104]	@ (8004d2c <prvHeapInit+0xa0>)
 8004cc2:	601a      	str	r2, [r3, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004cc4:	4b19      	ldr	r3, [pc, #100]	@ (8004d2c <prvHeapInit+0xa0>)
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 8004cca:	68fa      	ldr	r2, [r7, #12]
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	18d3      	adds	r3, r2, r3
 8004cd0:	607b      	str	r3, [r7, #4]
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 8004cd2:	2208      	movs	r2, #8
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	1a9b      	subs	r3, r3, r2
 8004cd8:	607b      	str	r3, [r7, #4]
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2207      	movs	r2, #7
 8004cde:	4393      	bics	r3, r2
 8004ce0:	607b      	str	r3, [r7, #4]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	4b12      	ldr	r3, [pc, #72]	@ (8004d30 <prvHeapInit+0xa4>)
 8004ce6:	601a      	str	r2, [r3, #0]
    pxEnd->xBlockSize = 0;
 8004ce8:	4b11      	ldr	r3, [pc, #68]	@ (8004d30 <prvHeapInit+0xa4>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	2200      	movs	r2, #0
 8004cee:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 8004cf0:	4b0f      	ldr	r3, [pc, #60]	@ (8004d30 <prvHeapInit+0xa4>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	1ad2      	subs	r2, r2, r3
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8004d06:	4b0a      	ldr	r3, [pc, #40]	@ (8004d30 <prvHeapInit+0xa4>)
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	685a      	ldr	r2, [r3, #4]
 8004d12:	4b08      	ldr	r3, [pc, #32]	@ (8004d34 <prvHeapInit+0xa8>)
 8004d14:	601a      	str	r2, [r3, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	685a      	ldr	r2, [r3, #4]
 8004d1a:	4b07      	ldr	r3, [pc, #28]	@ (8004d38 <prvHeapInit+0xac>)
 8004d1c:	601a      	str	r2, [r3, #0]
}
 8004d1e:	46c0      	nop			@ (mov r8, r8)
 8004d20:	46bd      	mov	sp, r7
 8004d22:	b004      	add	sp, #16
 8004d24:	bd80      	pop	{r7, pc}
 8004d26:	46c0      	nop			@ (mov r8, r8)
 8004d28:	200000cc 	.word	0x200000cc
 8004d2c:	200008b4 	.word	0x200008b4
 8004d30:	200008bc 	.word	0x200008bc
 8004d34:	200008c4 	.word	0x200008c4
 8004d38:	200008c0 	.word	0x200008c0

08004d3c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b084      	sub	sp, #16
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8004d44:	4b27      	ldr	r3, [pc, #156]	@ (8004de4 <prvInsertBlockIntoFreeList+0xa8>)
 8004d46:	60fb      	str	r3, [r7, #12]
 8004d48:	e002      	b.n	8004d50 <prvInsertBlockIntoFreeList+0x14>
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	60fb      	str	r3, [r7, #12]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d8f7      	bhi.n	8004d4a <prvInsertBlockIntoFreeList+0xe>
        heapVALIDATE_BLOCK_POINTER( pxIterator );
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	68ba      	ldr	r2, [r7, #8]
 8004d64:	18d3      	adds	r3, r2, r3
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d108      	bne.n	8004d7e <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	685a      	ldr	r2, [r3, #4]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	18d2      	adds	r2, r2, r3
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	68ba      	ldr	r2, [r7, #8]
 8004d88:	18d2      	adds	r2, r2, r3
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d118      	bne.n	8004dc4 <prvInsertBlockIntoFreeList+0x88>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	4b14      	ldr	r3, [pc, #80]	@ (8004de8 <prvInsertBlockIntoFreeList+0xac>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d00d      	beq.n	8004dba <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	685a      	ldr	r2, [r3, #4]
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	18d2      	adds	r2, r2, r3
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	601a      	str	r2, [r3, #0]
 8004db8:	e008      	b.n	8004dcc <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8004dba:	4b0b      	ldr	r3, [pc, #44]	@ (8004de8 <prvInsertBlockIntoFreeList+0xac>)
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	601a      	str	r2, [r3, #0]
 8004dc2:	e003      	b.n	8004dcc <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004dcc:	68fa      	ldr	r2, [r7, #12]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d002      	beq.n	8004dda <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004dda:	46c0      	nop			@ (mov r8, r8)
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	b004      	add	sp, #16
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	46c0      	nop			@ (mov r8, r8)
 8004de4:	200008b4 	.word	0x200008b4
 8004de8:	200008bc 	.word	0x200008bc

08004dec <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b082      	sub	sp, #8
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	3308      	adds	r3, #8
 8004df8:	001a      	movs	r2, r3
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2201      	movs	r2, #1
 8004e02:	4252      	negs	r2, r2
 8004e04:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	3308      	adds	r3, #8
 8004e0a:	001a      	movs	r2, r3
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	3308      	adds	r3, #8
 8004e14:	001a      	movs	r2, r3
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	601a      	str	r2, [r3, #0]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
}
 8004e20:	46c0      	nop			@ (mov r8, r8)
 8004e22:	46bd      	mov	sp, r7
 8004e24:	b002      	add	sp, #8
 8004e26:	bd80      	pop	{r7, pc}

08004e28 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b082      	sub	sp, #8
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2200      	movs	r2, #0
 8004e34:	611a      	str	r2, [r3, #16]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
}
 8004e36:	46c0      	nop			@ (mov r8, r8)
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	b002      	add	sp, #8
 8004e3c:	bd80      	pop	{r7, pc}

08004e3e <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8004e3e:	b580      	push	{r7, lr}
 8004e40:	b084      	sub	sp, #16
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	6078      	str	r0, [r7, #4]
 8004e46:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	3301      	adds	r3, #1
 8004e52:	d103      	bne.n	8004e5c <vListInsert+0x1e>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	691b      	ldr	r3, [r3, #16]
 8004e58:	60fb      	str	r3, [r7, #12]
 8004e5a:	e00c      	b.n	8004e76 <vListInsert+0x38>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	3308      	adds	r3, #8
 8004e60:	60fb      	str	r3, [r7, #12]
 8004e62:	e002      	b.n	8004e6a <vListInsert+0x2c>
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	60fb      	str	r3, [r7, #12]
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	68ba      	ldr	r2, [r7, #8]
 8004e72:	429a      	cmp	r2, r3
 8004e74:	d2f6      	bcs.n	8004e64 <vListInsert+0x26>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	685a      	ldr	r2, [r3, #4]
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	683a      	ldr	r2, [r7, #0]
 8004e84:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	68fa      	ldr	r2, [r7, #12]
 8004e8a:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	683a      	ldr	r2, [r7, #0]
 8004e90:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	687a      	ldr	r2, [r7, #4]
 8004e96:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	1c5a      	adds	r2, r3, #1
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
}
 8004ea2:	46c0      	nop			@ (mov r8, r8)
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	b004      	add	sp, #16
 8004ea8:	bd80      	pop	{r7, pc}

08004eaa <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004eaa:	b580      	push	{r7, lr}
 8004eac:	b084      	sub	sp, #16
 8004eae:	af00      	add	r7, sp, #0
 8004eb0:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	691b      	ldr	r3, [r3, #16]
 8004eb6:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	687a      	ldr	r2, [r7, #4]
 8004ebe:	6892      	ldr	r2, [r2, #8]
 8004ec0:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	687a      	ldr	r2, [r7, #4]
 8004ec8:	6852      	ldr	r2, [r2, #4]
 8004eca:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	687a      	ldr	r2, [r7, #4]
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d103      	bne.n	8004ede <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	689a      	ldr	r2, [r3, #8]
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	1e5a      	subs	r2, r3, #1
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );

    return pxList->uxNumberOfItems;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
}
 8004ef2:	0018      	movs	r0, r3
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	b004      	add	sp, #16
 8004ef8:	bd80      	pop	{r7, pc}

08004efa <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8004efa:	b5b0      	push	{r4, r5, r7, lr}
 8004efc:	b084      	sub	sp, #16
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	6078      	str	r0, [r7, #4]
 8004f02:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8004f04:	2301      	movs	r3, #1
 8004f06:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	60bb      	str	r3, [r7, #8]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );

    if( ( pxQueue != NULL ) &&
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d100      	bne.n	8004f14 <xQueueGenericReset+0x1a>
 8004f12:	e06a      	b.n	8004fea <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d066      	beq.n	8004fea <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f24:	2400      	movs	r4, #0
 8004f26:	0c15      	lsrs	r5, r2, #16
 8004f28:	0c19      	lsrs	r1, r3, #16
 8004f2a:	b2a8      	uxth	r0, r5
 8004f2c:	2800      	cmp	r0, #0
 8004f2e:	d104      	bne.n	8004f3a <xQueueGenericReset+0x40>
 8004f30:	b288      	uxth	r0, r1
 8004f32:	2800      	cmp	r0, #0
 8004f34:	d013      	beq.n	8004f5e <xQueueGenericReset+0x64>
 8004f36:	1c10      	adds	r0, r2, #0
 8004f38:	e004      	b.n	8004f44 <xQueueGenericReset+0x4a>
 8004f3a:	b289      	uxth	r1, r1
 8004f3c:	2900      	cmp	r1, #0
 8004f3e:	d10d      	bne.n	8004f5c <xQueueGenericReset+0x62>
 8004f40:	1c29      	adds	r1, r5, #0
 8004f42:	1c18      	adds	r0, r3, #0
 8004f44:	b292      	uxth	r2, r2
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	435a      	muls	r2, r3
 8004f4a:	b283      	uxth	r3, r0
 8004f4c:	b289      	uxth	r1, r1
 8004f4e:	434b      	muls	r3, r1
 8004f50:	0c12      	lsrs	r2, r2, #16
 8004f52:	189b      	adds	r3, r3, r2
 8004f54:	141b      	asrs	r3, r3, #16
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d000      	beq.n	8004f5e <xQueueGenericReset+0x64>
 8004f5c:	2401      	movs	r4, #1
 8004f5e:	1e23      	subs	r3, r4, #0
        ( pxQueue->uxLength >= 1U ) &&
 8004f60:	d143      	bne.n	8004fea <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 8004f62:	f7ff fc23 	bl	80047ac <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	681a      	ldr	r2, [r3, #0]
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f72:	434b      	muls	r3, r1
 8004f74:	18d2      	adds	r2, r2, r3
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f90:	1e59      	subs	r1, r3, #1
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f96:	434b      	muls	r3, r1
 8004f98:	18d2      	adds	r2, r2, r3
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	2244      	movs	r2, #68	@ 0x44
 8004fa2:	21ff      	movs	r1, #255	@ 0xff
 8004fa4:	5499      	strb	r1, [r3, r2]
            pxQueue->cTxLock = queueUNLOCKED;
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	2245      	movs	r2, #69	@ 0x45
 8004faa:	21ff      	movs	r1, #255	@ 0xff
 8004fac:	5499      	strb	r1, [r3, r2]

            if( xNewQueue == pdFALSE )
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d10d      	bne.n	8004fd0 <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	691b      	ldr	r3, [r3, #16]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d013      	beq.n	8004fe4 <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	3310      	adds	r3, #16
 8004fc0:	0018      	movs	r0, r3
 8004fc2:	f000 fecb 	bl	8005d5c <xTaskRemoveFromEventList>
 8004fc6:	1e03      	subs	r3, r0, #0
 8004fc8:	d00c      	beq.n	8004fe4 <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8004fca:	f7ff fbdf 	bl	800478c <vPortYield>
 8004fce:	e009      	b.n	8004fe4 <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	3310      	adds	r3, #16
 8004fd4:	0018      	movs	r0, r3
 8004fd6:	f7ff ff09 	bl	8004dec <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	3324      	adds	r3, #36	@ 0x24
 8004fde:	0018      	movs	r0, r3
 8004fe0:	f7ff ff04 	bl	8004dec <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8004fe4:	f7ff fbf4 	bl	80047d0 <vPortExitCritical>
 8004fe8:	e001      	b.n	8004fee <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8004fea:	2300      	movs	r3, #0
 8004fec:	60fb      	str	r3, [r7, #12]

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );

    return xReturn;
 8004fee:	68fb      	ldr	r3, [r7, #12]
}
 8004ff0:	0018      	movs	r0, r3
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	b004      	add	sp, #16
 8004ff6:	bdb0      	pop	{r4, r5, r7, pc}

08004ff8 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8004ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ffa:	b08b      	sub	sp, #44	@ 0x2c
 8004ffc:	af02      	add	r7, sp, #8
 8004ffe:	60f8      	str	r0, [r7, #12]
 8005000:	60b9      	str	r1, [r7, #8]
 8005002:	1dfb      	adds	r3, r7, #7
 8005004:	701a      	strb	r2, [r3, #0]
        Queue_t * pxNewQueue = NULL;
 8005006:	2300      	movs	r3, #0
 8005008:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d046      	beq.n	800509e <xQueueGenericCreate+0xa6>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8005010:	2000      	movs	r0, #0
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	0c19      	lsrs	r1, r3, #16
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	1c1e      	adds	r6, r3, #0
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	0c1b      	lsrs	r3, r3, #16
 800501e:	68fa      	ldr	r2, [r7, #12]
 8005020:	1c15      	adds	r5, r2, #0
 8005022:	b28a      	uxth	r2, r1
 8005024:	2a00      	cmp	r2, #0
 8005026:	d105      	bne.n	8005034 <xQueueGenericCreate+0x3c>
 8005028:	b29a      	uxth	r2, r3
 800502a:	2a00      	cmp	r2, #0
 800502c:	d013      	beq.n	8005056 <xQueueGenericCreate+0x5e>
 800502e:	1c19      	adds	r1, r3, #0
 8005030:	1c34      	adds	r4, r6, #0
 8005032:	e003      	b.n	800503c <xQueueGenericCreate+0x44>
 8005034:	b29b      	uxth	r3, r3
 8005036:	2b00      	cmp	r3, #0
 8005038:	d10c      	bne.n	8005054 <xQueueGenericCreate+0x5c>
 800503a:	1c2c      	adds	r4, r5, #0
 800503c:	b2b3      	uxth	r3, r6
 800503e:	b2aa      	uxth	r2, r5
 8005040:	435a      	muls	r2, r3
 8005042:	b2a3      	uxth	r3, r4
 8005044:	b289      	uxth	r1, r1
 8005046:	434b      	muls	r3, r1
 8005048:	0c12      	lsrs	r2, r2, #16
 800504a:	189b      	adds	r3, r3, r2
 800504c:	141b      	asrs	r3, r3, #16
 800504e:	b29b      	uxth	r3, r3
 8005050:	2b00      	cmp	r3, #0
 8005052:	d000      	beq.n	8005056 <xQueueGenericCreate+0x5e>
 8005054:	2001      	movs	r0, #1
 8005056:	1e03      	subs	r3, r0, #0
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8005058:	d121      	bne.n	800509e <xQueueGenericCreate+0xa6>
            /* Check for addition overflow. */
            ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	68ba      	ldr	r2, [r7, #8]
 800505e:	4353      	muls	r3, r2
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8005060:	3349      	adds	r3, #73	@ 0x49
 8005062:	d81c      	bhi.n	800509e <xQueueGenericCreate+0xa6>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	68ba      	ldr	r2, [r7, #8]
 8005068:	4353      	muls	r3, r2
 800506a:	61bb      	str	r3, [r7, #24]

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800506c:	69bb      	ldr	r3, [r7, #24]
 800506e:	3348      	adds	r3, #72	@ 0x48
 8005070:	0018      	movs	r0, r3
 8005072:	f7ff fd1f 	bl	8004ab4 <pvPortMalloc>
 8005076:	0003      	movs	r3, r0
 8005078:	61fb      	str	r3, [r7, #28]

            if( pxNewQueue != NULL )
 800507a:	69fb      	ldr	r3, [r7, #28]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d00e      	beq.n	800509e <xQueueGenericCreate+0xa6>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005080:	69fb      	ldr	r3, [r7, #28]
 8005082:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t );
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	3348      	adds	r3, #72	@ 0x48
 8005088:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800508a:	1dfb      	adds	r3, r7, #7
 800508c:	781c      	ldrb	r4, [r3, #0]
 800508e:	697a      	ldr	r2, [r7, #20]
 8005090:	68b9      	ldr	r1, [r7, #8]
 8005092:	68f8      	ldr	r0, [r7, #12]
 8005094:	69fb      	ldr	r3, [r7, #28]
 8005096:	9300      	str	r3, [sp, #0]
 8005098:	0023      	movs	r3, r4
 800509a:	f000 f805 	bl	80050a8 <prvInitialiseNewQueue>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );

        return pxNewQueue;
 800509e:	69fb      	ldr	r3, [r7, #28]
    }
 80050a0:	0018      	movs	r0, r3
 80050a2:	46bd      	mov	sp, r7
 80050a4:	b009      	add	sp, #36	@ 0x24
 80050a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080050a8 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b084      	sub	sp, #16
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	60f8      	str	r0, [r7, #12]
 80050b0:	60b9      	str	r1, [r7, #8]
 80050b2:	607a      	str	r2, [r7, #4]
 80050b4:	001a      	movs	r2, r3
 80050b6:	1cfb      	adds	r3, r7, #3
 80050b8:	701a      	strb	r2, [r3, #0]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d103      	bne.n	80050c8 <prvInitialiseNewQueue+0x20>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80050c0:	69bb      	ldr	r3, [r7, #24]
 80050c2:	69ba      	ldr	r2, [r7, #24]
 80050c4:	601a      	str	r2, [r3, #0]
 80050c6:	e002      	b.n	80050ce <prvInitialiseNewQueue+0x26>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80050c8:	69bb      	ldr	r3, [r7, #24]
 80050ca:	687a      	ldr	r2, [r7, #4]
 80050cc:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80050ce:	69bb      	ldr	r3, [r7, #24]
 80050d0:	68fa      	ldr	r2, [r7, #12]
 80050d2:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80050d4:	69bb      	ldr	r3, [r7, #24]
 80050d6:	68ba      	ldr	r2, [r7, #8]
 80050d8:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80050da:	69bb      	ldr	r3, [r7, #24]
 80050dc:	2101      	movs	r1, #1
 80050de:	0018      	movs	r0, r3
 80050e0:	f7ff ff0b 	bl	8004efa <xQueueGenericReset>
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80050e4:	46c0      	nop			@ (mov r8, r8)
 80050e6:	46bd      	mov	sp, r7
 80050e8:	b004      	add	sp, #16
 80050ea:	bd80      	pop	{r7, pc}

080050ec <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b08a      	sub	sp, #40	@ 0x28
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	60f8      	str	r0, [r7, #12]
 80050f4:	60b9      	str	r1, [r7, #8]
 80050f6:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80050f8:	2300      	movs	r3, #0
 80050fa:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	623b      	str	r3, [r7, #32]
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8005100:	f7ff fb54 	bl	80047ac <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005104:	6a3b      	ldr	r3, [r7, #32]
 8005106:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005108:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800510a:	69fb      	ldr	r3, [r7, #28]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d01a      	beq.n	8005146 <xQueueReceive+0x5a>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005110:	68ba      	ldr	r2, [r7, #8]
 8005112:	6a3b      	ldr	r3, [r7, #32]
 8005114:	0011      	movs	r1, r2
 8005116:	0018      	movs	r0, r3
 8005118:	f000 f87c 	bl	8005214 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 800511c:	69fb      	ldr	r3, [r7, #28]
 800511e:	1e5a      	subs	r2, r3, #1
 8005120:	6a3b      	ldr	r3, [r7, #32]
 8005122:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005124:	6a3b      	ldr	r3, [r7, #32]
 8005126:	691b      	ldr	r3, [r3, #16]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d008      	beq.n	800513e <xQueueReceive+0x52>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800512c:	6a3b      	ldr	r3, [r7, #32]
 800512e:	3310      	adds	r3, #16
 8005130:	0018      	movs	r0, r3
 8005132:	f000 fe13 	bl	8005d5c <xTaskRemoveFromEventList>
 8005136:	1e03      	subs	r3, r0, #0
 8005138:	d001      	beq.n	800513e <xQueueReceive+0x52>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800513a:	f7ff fb27 	bl	800478c <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800513e:	f7ff fb47 	bl	80047d0 <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );

                return pdPASS;
 8005142:	2301      	movs	r3, #1
 8005144:	e062      	b.n	800520c <xQueueReceive+0x120>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d103      	bne.n	8005154 <xQueueReceive+0x68>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800514c:	f7ff fb40 	bl	80047d0 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
 8005150:	2300      	movs	r3, #0
 8005152:	e05b      	b.n	800520c <xQueueReceive+0x120>
                }
                else if( xEntryTimeSet == pdFALSE )
 8005154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005156:	2b00      	cmp	r3, #0
 8005158:	d106      	bne.n	8005168 <xQueueReceive+0x7c>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800515a:	2314      	movs	r3, #20
 800515c:	18fb      	adds	r3, r7, r3
 800515e:	0018      	movs	r0, r3
 8005160:	f000 fec4 	bl	8005eec <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8005164:	2301      	movs	r3, #1
 8005166:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8005168:	f7ff fb32 	bl	80047d0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800516c:	f000 fb1c 	bl	80057a8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8005170:	f7ff fb1c 	bl	80047ac <vPortEnterCritical>
 8005174:	6a3b      	ldr	r3, [r7, #32]
 8005176:	2244      	movs	r2, #68	@ 0x44
 8005178:	5c9b      	ldrb	r3, [r3, r2]
 800517a:	b25b      	sxtb	r3, r3
 800517c:	3301      	adds	r3, #1
 800517e:	d103      	bne.n	8005188 <xQueueReceive+0x9c>
 8005180:	6a3b      	ldr	r3, [r7, #32]
 8005182:	2244      	movs	r2, #68	@ 0x44
 8005184:	2100      	movs	r1, #0
 8005186:	5499      	strb	r1, [r3, r2]
 8005188:	6a3b      	ldr	r3, [r7, #32]
 800518a:	2245      	movs	r2, #69	@ 0x45
 800518c:	5c9b      	ldrb	r3, [r3, r2]
 800518e:	b25b      	sxtb	r3, r3
 8005190:	3301      	adds	r3, #1
 8005192:	d103      	bne.n	800519c <xQueueReceive+0xb0>
 8005194:	6a3b      	ldr	r3, [r7, #32]
 8005196:	2245      	movs	r2, #69	@ 0x45
 8005198:	2100      	movs	r1, #0
 800519a:	5499      	strb	r1, [r3, r2]
 800519c:	f7ff fb18 	bl	80047d0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80051a0:	1d3a      	adds	r2, r7, #4
 80051a2:	2314      	movs	r3, #20
 80051a4:	18fb      	adds	r3, r7, r3
 80051a6:	0011      	movs	r1, r2
 80051a8:	0018      	movs	r0, r3
 80051aa:	f000 feb3 	bl	8005f14 <xTaskCheckForTimeOut>
 80051ae:	1e03      	subs	r3, r0, #0
 80051b0:	d11e      	bne.n	80051f0 <xQueueReceive+0x104>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80051b2:	6a3b      	ldr	r3, [r7, #32]
 80051b4:	0018      	movs	r0, r3
 80051b6:	f000 f8b1 	bl	800531c <prvIsQueueEmpty>
 80051ba:	1e03      	subs	r3, r0, #0
 80051bc:	d011      	beq.n	80051e2 <xQueueReceive+0xf6>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80051be:	6a3b      	ldr	r3, [r7, #32]
 80051c0:	3324      	adds	r3, #36	@ 0x24
 80051c2:	687a      	ldr	r2, [r7, #4]
 80051c4:	0011      	movs	r1, r2
 80051c6:	0018      	movs	r0, r3
 80051c8:	f000 fd74 	bl	8005cb4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80051cc:	6a3b      	ldr	r3, [r7, #32]
 80051ce:	0018      	movs	r0, r3
 80051d0:	f000 f846 	bl	8005260 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80051d4:	f000 faf4 	bl	80057c0 <xTaskResumeAll>
 80051d8:	1e03      	subs	r3, r0, #0
 80051da:	d191      	bne.n	8005100 <xQueueReceive+0x14>
                {
                    taskYIELD_WITHIN_API();
 80051dc:	f7ff fad6 	bl	800478c <vPortYield>
 80051e0:	e78e      	b.n	8005100 <xQueueReceive+0x14>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80051e2:	6a3b      	ldr	r3, [r7, #32]
 80051e4:	0018      	movs	r0, r3
 80051e6:	f000 f83b 	bl	8005260 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80051ea:	f000 fae9 	bl	80057c0 <xTaskResumeAll>
 80051ee:	e787      	b.n	8005100 <xQueueReceive+0x14>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80051f0:	6a3b      	ldr	r3, [r7, #32]
 80051f2:	0018      	movs	r0, r3
 80051f4:	f000 f834 	bl	8005260 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80051f8:	f000 fae2 	bl	80057c0 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80051fc:	6a3b      	ldr	r3, [r7, #32]
 80051fe:	0018      	movs	r0, r3
 8005200:	f000 f88c 	bl	800531c <prvIsQueueEmpty>
 8005204:	1e03      	subs	r3, r0, #0
 8005206:	d100      	bne.n	800520a <xQueueReceive+0x11e>
 8005208:	e77a      	b.n	8005100 <xQueueReceive+0x14>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
 800520a:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 800520c:	0018      	movs	r0, r3
 800520e:	46bd      	mov	sp, r7
 8005210:	b00a      	add	sp, #40	@ 0x28
 8005212:	bd80      	pop	{r7, pc}

08005214 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b082      	sub	sp, #8
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
 800521c:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005222:	2b00      	cmp	r3, #0
 8005224:	d018      	beq.n	8005258 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	68da      	ldr	r2, [r3, #12]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800522e:	18d2      	adds	r2, r2, r3
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	68da      	ldr	r2, [r3, #12]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	429a      	cmp	r2, r3
 800523e:	d303      	bcc.n	8005248 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	68d9      	ldr	r1, [r3, #12]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	0018      	movs	r0, r3
 8005254:	f001 faba 	bl	80067cc <memcpy>
    }
}
 8005258:	46c0      	nop			@ (mov r8, r8)
 800525a:	46bd      	mov	sp, r7
 800525c:	b002      	add	sp, #8
 800525e:	bd80      	pop	{r7, pc}

08005260 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b084      	sub	sp, #16
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8005268:	f7ff faa0 	bl	80047ac <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800526c:	230f      	movs	r3, #15
 800526e:	18fb      	adds	r3, r7, r3
 8005270:	687a      	ldr	r2, [r7, #4]
 8005272:	2145      	movs	r1, #69	@ 0x45
 8005274:	5c52      	ldrb	r2, [r2, r1]
 8005276:	701a      	strb	r2, [r3, #0]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8005278:	e013      	b.n	80052a2 <prvUnlockQueue+0x42>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800527e:	2b00      	cmp	r3, #0
 8005280:	d016      	beq.n	80052b0 <prvUnlockQueue+0x50>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	3324      	adds	r3, #36	@ 0x24
 8005286:	0018      	movs	r0, r3
 8005288:	f000 fd68 	bl	8005d5c <xTaskRemoveFromEventList>
 800528c:	1e03      	subs	r3, r0, #0
 800528e:	d001      	beq.n	8005294 <prvUnlockQueue+0x34>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8005290:	f000 fe9a 	bl	8005fc8 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8005294:	210f      	movs	r1, #15
 8005296:	187b      	adds	r3, r7, r1
 8005298:	781b      	ldrb	r3, [r3, #0]
 800529a:	3b01      	subs	r3, #1
 800529c:	b2da      	uxtb	r2, r3
 800529e:	187b      	adds	r3, r7, r1
 80052a0:	701a      	strb	r2, [r3, #0]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80052a2:	230f      	movs	r3, #15
 80052a4:	18fb      	adds	r3, r7, r3
 80052a6:	781b      	ldrb	r3, [r3, #0]
 80052a8:	b25b      	sxtb	r3, r3
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	dce5      	bgt.n	800527a <prvUnlockQueue+0x1a>
 80052ae:	e000      	b.n	80052b2 <prvUnlockQueue+0x52>
                    break;
 80052b0:	46c0      	nop			@ (mov r8, r8)
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2245      	movs	r2, #69	@ 0x45
 80052b6:	21ff      	movs	r1, #255	@ 0xff
 80052b8:	5499      	strb	r1, [r3, r2]
    }
    taskEXIT_CRITICAL();
 80052ba:	f7ff fa89 	bl	80047d0 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80052be:	f7ff fa75 	bl	80047ac <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80052c2:	230e      	movs	r3, #14
 80052c4:	18fb      	adds	r3, r7, r3
 80052c6:	687a      	ldr	r2, [r7, #4]
 80052c8:	2144      	movs	r1, #68	@ 0x44
 80052ca:	5c52      	ldrb	r2, [r2, r1]
 80052cc:	701a      	strb	r2, [r3, #0]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80052ce:	e013      	b.n	80052f8 <prvUnlockQueue+0x98>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	691b      	ldr	r3, [r3, #16]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d016      	beq.n	8005306 <prvUnlockQueue+0xa6>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	3310      	adds	r3, #16
 80052dc:	0018      	movs	r0, r3
 80052de:	f000 fd3d 	bl	8005d5c <xTaskRemoveFromEventList>
 80052e2:	1e03      	subs	r3, r0, #0
 80052e4:	d001      	beq.n	80052ea <prvUnlockQueue+0x8a>
                {
                    vTaskMissedYield();
 80052e6:	f000 fe6f 	bl	8005fc8 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80052ea:	210e      	movs	r1, #14
 80052ec:	187b      	adds	r3, r7, r1
 80052ee:	781b      	ldrb	r3, [r3, #0]
 80052f0:	3b01      	subs	r3, #1
 80052f2:	b2da      	uxtb	r2, r3
 80052f4:	187b      	adds	r3, r7, r1
 80052f6:	701a      	strb	r2, [r3, #0]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80052f8:	230e      	movs	r3, #14
 80052fa:	18fb      	adds	r3, r7, r3
 80052fc:	781b      	ldrb	r3, [r3, #0]
 80052fe:	b25b      	sxtb	r3, r3
 8005300:	2b00      	cmp	r3, #0
 8005302:	dce5      	bgt.n	80052d0 <prvUnlockQueue+0x70>
 8005304:	e000      	b.n	8005308 <prvUnlockQueue+0xa8>
            }
            else
            {
                break;
 8005306:	46c0      	nop			@ (mov r8, r8)
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2244      	movs	r2, #68	@ 0x44
 800530c:	21ff      	movs	r1, #255	@ 0xff
 800530e:	5499      	strb	r1, [r3, r2]
    }
    taskEXIT_CRITICAL();
 8005310:	f7ff fa5e 	bl	80047d0 <vPortExitCritical>
}
 8005314:	46c0      	nop			@ (mov r8, r8)
 8005316:	46bd      	mov	sp, r7
 8005318:	b004      	add	sp, #16
 800531a:	bd80      	pop	{r7, pc}

0800531c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b084      	sub	sp, #16
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8005324:	f7ff fa42 	bl	80047ac <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800532c:	2b00      	cmp	r3, #0
 800532e:	d102      	bne.n	8005336 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8005330:	2301      	movs	r3, #1
 8005332:	60fb      	str	r3, [r7, #12]
 8005334:	e001      	b.n	800533a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8005336:	2300      	movs	r3, #0
 8005338:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800533a:	f7ff fa49 	bl	80047d0 <vPortExitCritical>

    return xReturn;
 800533e:	68fb      	ldr	r3, [r7, #12]
}
 8005340:	0018      	movs	r0, r3
 8005342:	46bd      	mov	sp, r7
 8005344:	b004      	add	sp, #16
 8005346:	bd80      	pop	{r7, pc}

08005348 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8005348:	b580      	push	{r7, lr}
 800534a:	b086      	sub	sp, #24
 800534c:	af00      	add	r7, sp, #0
 800534e:	60f8      	str	r0, [r7, #12]
 8005350:	60b9      	str	r1, [r7, #8]
 8005352:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8005358:	f7ff fa28 	bl	80047ac <vPortEnterCritical>
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	2244      	movs	r2, #68	@ 0x44
 8005360:	5c9b      	ldrb	r3, [r3, r2]
 8005362:	b25b      	sxtb	r3, r3
 8005364:	3301      	adds	r3, #1
 8005366:	d103      	bne.n	8005370 <vQueueWaitForMessageRestricted+0x28>
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	2244      	movs	r2, #68	@ 0x44
 800536c:	2100      	movs	r1, #0
 800536e:	5499      	strb	r1, [r3, r2]
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	2245      	movs	r2, #69	@ 0x45
 8005374:	5c9b      	ldrb	r3, [r3, r2]
 8005376:	b25b      	sxtb	r3, r3
 8005378:	3301      	adds	r3, #1
 800537a:	d103      	bne.n	8005384 <vQueueWaitForMessageRestricted+0x3c>
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	2245      	movs	r2, #69	@ 0x45
 8005380:	2100      	movs	r1, #0
 8005382:	5499      	strb	r1, [r3, r2]
 8005384:	f7ff fa24 	bl	80047d0 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800538c:	2b00      	cmp	r3, #0
 800538e:	d106      	bne.n	800539e <vQueueWaitForMessageRestricted+0x56>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	3324      	adds	r3, #36	@ 0x24
 8005394:	687a      	ldr	r2, [r7, #4]
 8005396:	68b9      	ldr	r1, [r7, #8]
 8005398:	0018      	movs	r0, r3
 800539a:	f000 fca5 	bl	8005ce8 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	0018      	movs	r0, r3
 80053a2:	f7ff ff5d 	bl	8005260 <prvUnlockQueue>

        traceRETURN_vQueueWaitForMessageRestricted();
    }
 80053a6:	46c0      	nop			@ (mov r8, r8)
 80053a8:	46bd      	mov	sp, r7
 80053aa:	b006      	add	sp, #24
 80053ac:	bd80      	pop	{r7, pc}

080053ae <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 80053ae:	b590      	push	{r4, r7, lr}
 80053b0:	b08b      	sub	sp, #44	@ 0x2c
 80053b2:	af04      	add	r7, sp, #16
 80053b4:	60f8      	str	r0, [r7, #12]
 80053b6:	60b9      	str	r1, [r7, #8]
 80053b8:	607a      	str	r2, [r7, #4]
 80053ba:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	0018      	movs	r0, r3
 80053c2:	f7ff fb77 	bl	8004ab4 <pvPortMalloc>
 80053c6:	0003      	movs	r3, r0
 80053c8:	613b      	str	r3, [r7, #16]

            if( pxStack != NULL )
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d016      	beq.n	80053fe <prvCreateTask+0x50>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 80053d0:	2054      	movs	r0, #84	@ 0x54
 80053d2:	f7ff fb6f 	bl	8004ab4 <pvPortMalloc>
 80053d6:	0003      	movs	r3, r0
 80053d8:	617b      	str	r3, [r7, #20]

                if( pxNewTCB != NULL )
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d009      	beq.n	80053f4 <prvCreateTask+0x46>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	2254      	movs	r2, #84	@ 0x54
 80053e4:	2100      	movs	r1, #0
 80053e6:	0018      	movs	r0, r3
 80053e8:	f001 f98c 	bl	8006704 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	693a      	ldr	r2, [r7, #16]
 80053f0:	631a      	str	r2, [r3, #48]	@ 0x30
 80053f2:	e006      	b.n	8005402 <prvCreateTask+0x54>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	0018      	movs	r0, r3
 80053f8:	f7ff fc0e 	bl	8004c18 <vPortFree>
 80053fc:	e001      	b.n	8005402 <prvCreateTask+0x54>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80053fe:	2300      	movs	r3, #0
 8005400:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d00e      	beq.n	8005426 <prvCreateTask+0x78>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005408:	683c      	ldr	r4, [r7, #0]
 800540a:	687a      	ldr	r2, [r7, #4]
 800540c:	68b9      	ldr	r1, [r7, #8]
 800540e:	68f8      	ldr	r0, [r7, #12]
 8005410:	2300      	movs	r3, #0
 8005412:	9303      	str	r3, [sp, #12]
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	9302      	str	r3, [sp, #8]
 8005418:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800541a:	9301      	str	r3, [sp, #4]
 800541c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800541e:	9300      	str	r3, [sp, #0]
 8005420:	0023      	movs	r3, r4
 8005422:	f000 f82b 	bl	800547c <prvInitialiseNewTask>
        }

        return pxNewTCB;
 8005426:	697b      	ldr	r3, [r7, #20]
    }
 8005428:	0018      	movs	r0, r3
 800542a:	46bd      	mov	sp, r7
 800542c:	b007      	add	sp, #28
 800542e:	bd90      	pop	{r4, r7, pc}

08005430 <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8005430:	b590      	push	{r4, r7, lr}
 8005432:	b089      	sub	sp, #36	@ 0x24
 8005434:	af02      	add	r7, sp, #8
 8005436:	60f8      	str	r0, [r7, #12]
 8005438:	60b9      	str	r1, [r7, #8]
 800543a:	607a      	str	r2, [r7, #4]
 800543c:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 800543e:	683c      	ldr	r4, [r7, #0]
 8005440:	687a      	ldr	r2, [r7, #4]
 8005442:	68b9      	ldr	r1, [r7, #8]
 8005444:	68f8      	ldr	r0, [r7, #12]
 8005446:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005448:	9301      	str	r3, [sp, #4]
 800544a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800544c:	9300      	str	r3, [sp, #0]
 800544e:	0023      	movs	r3, r4
 8005450:	f7ff ffad 	bl	80053ae <prvCreateTask>
 8005454:	0003      	movs	r3, r0
 8005456:	613b      	str	r3, [r7, #16]

        if( pxNewTCB != NULL )
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d006      	beq.n	800546c <xTaskCreate+0x3c>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	0018      	movs	r0, r3
 8005462:	f000 f87f 	bl	8005564 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8005466:	2301      	movs	r3, #1
 8005468:	617b      	str	r3, [r7, #20]
 800546a:	e002      	b.n	8005472 <xTaskCreate+0x42>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800546c:	2301      	movs	r3, #1
 800546e:	425b      	negs	r3, r3
 8005470:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );

        return xReturn;
 8005472:	697b      	ldr	r3, [r7, #20]
    }
 8005474:	0018      	movs	r0, r3
 8005476:	46bd      	mov	sp, r7
 8005478:	b007      	add	sp, #28
 800547a:	bd90      	pop	{r4, r7, pc}

0800547c <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b086      	sub	sp, #24
 8005480:	af00      	add	r7, sp, #0
 8005482:	60f8      	str	r0, [r7, #12]
 8005484:	60b9      	str	r1, [r7, #8]
 8005486:	607a      	str	r2, [r7, #4]
 8005488:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 800548a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800548c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	009b      	lsls	r3, r3, #2
 8005492:	001a      	movs	r2, r3
 8005494:	21a5      	movs	r1, #165	@ 0xa5
 8005496:	f001 f935 	bl	8006704 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 800549a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800549c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	492f      	ldr	r1, [pc, #188]	@ (8005560 <prvInitialiseNewTask+0xe4>)
 80054a2:	468c      	mov	ip, r1
 80054a4:	4463      	add	r3, ip
 80054a6:	009b      	lsls	r3, r3, #2
 80054a8:	18d3      	adds	r3, r2, r3
 80054aa:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	2207      	movs	r2, #7
 80054b0:	4393      	bics	r3, r2
 80054b2:	613b      	str	r3, [r7, #16]
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d01f      	beq.n	80054fa <prvInitialiseNewTask+0x7e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80054ba:	2300      	movs	r3, #0
 80054bc:	617b      	str	r3, [r7, #20]
 80054be:	e013      	b.n	80054e8 <prvInitialiseNewTask+0x6c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80054c0:	68ba      	ldr	r2, [r7, #8]
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	18d3      	adds	r3, r2, r3
 80054c6:	7818      	ldrb	r0, [r3, #0]
 80054c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80054ca:	2134      	movs	r1, #52	@ 0x34
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	18d3      	adds	r3, r2, r3
 80054d0:	185b      	adds	r3, r3, r1
 80054d2:	1c02      	adds	r2, r0, #0
 80054d4:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80054d6:	68ba      	ldr	r2, [r7, #8]
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	18d3      	adds	r3, r2, r3
 80054dc:	781b      	ldrb	r3, [r3, #0]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d006      	beq.n	80054f0 <prvInitialiseNewTask+0x74>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	3301      	adds	r3, #1
 80054e6:	617b      	str	r3, [r7, #20]
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	2b0f      	cmp	r3, #15
 80054ec:	d9e8      	bls.n	80054c0 <prvInitialiseNewTask+0x44>
 80054ee:	e000      	b.n	80054f2 <prvInitialiseNewTask+0x76>
            {
                break;
 80054f0:	46c0      	nop			@ (mov r8, r8)
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 80054f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054f4:	2243      	movs	r2, #67	@ 0x43
 80054f6:	2100      	movs	r1, #0
 80054f8:	5499      	strb	r1, [r3, r2]
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80054fa:	6a3b      	ldr	r3, [r7, #32]
 80054fc:	2b03      	cmp	r3, #3
 80054fe:	d901      	bls.n	8005504 <prvInitialiseNewTask+0x88>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005500:	2303      	movs	r3, #3
 8005502:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8005504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005506:	6a3a      	ldr	r2, [r7, #32]
 8005508:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 800550a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800550c:	6a3a      	ldr	r2, [r7, #32]
 800550e:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005510:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005512:	3304      	adds	r3, #4
 8005514:	0018      	movs	r0, r3
 8005516:	f7ff fc87 	bl	8004e28 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800551a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800551c:	3318      	adds	r3, #24
 800551e:	0018      	movs	r0, r3
 8005520:	f7ff fc82 	bl	8004e28 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005524:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005526:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005528:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 800552a:	6a3b      	ldr	r3, [r7, #32]
 800552c:	2204      	movs	r2, #4
 800552e:	1ad2      	subs	r2, r2, r3
 8005530:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005532:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005534:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005536:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005538:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800553a:	683a      	ldr	r2, [r7, #0]
 800553c:	68f9      	ldr	r1, [r7, #12]
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	0018      	movs	r0, r3
 8005542:	f7ff f98b 	bl	800485c <pxPortInitialiseStack>
 8005546:	0002      	movs	r2, r0
 8005548:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800554a:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 800554c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800554e:	2b00      	cmp	r3, #0
 8005550:	d002      	beq.n	8005558 <prvInitialiseNewTask+0xdc>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005554:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005556:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005558:	46c0      	nop			@ (mov r8, r8)
 800555a:	46bd      	mov	sp, r7
 800555c:	b006      	add	sp, #24
 800555e:	bd80      	pop	{r7, pc}
 8005560:	3fffffff 	.word	0x3fffffff

08005564 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 8005564:	b580      	push	{r7, lr}
 8005566:	b084      	sub	sp, #16
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 800556c:	f7ff f91e 	bl	80047ac <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 8005570:	4b3c      	ldr	r3, [pc, #240]	@ (8005664 <prvAddNewTaskToReadyList+0x100>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	1c5a      	adds	r2, r3, #1
 8005576:	4b3b      	ldr	r3, [pc, #236]	@ (8005664 <prvAddNewTaskToReadyList+0x100>)
 8005578:	601a      	str	r2, [r3, #0]

            if( pxCurrentTCB == NULL )
 800557a:	4b3b      	ldr	r3, [pc, #236]	@ (8005668 <prvAddNewTaskToReadyList+0x104>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d109      	bne.n	8005596 <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 8005582:	4b39      	ldr	r3, [pc, #228]	@ (8005668 <prvAddNewTaskToReadyList+0x104>)
 8005584:	687a      	ldr	r2, [r7, #4]
 8005586:	601a      	str	r2, [r3, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005588:	4b36      	ldr	r3, [pc, #216]	@ (8005664 <prvAddNewTaskToReadyList+0x100>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	2b01      	cmp	r3, #1
 800558e:	d110      	bne.n	80055b2 <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 8005590:	f000 fd34 	bl	8005ffc <prvInitialiseTaskLists>
 8005594:	e00d      	b.n	80055b2 <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 8005596:	4b35      	ldr	r3, [pc, #212]	@ (800566c <prvAddNewTaskToReadyList+0x108>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d109      	bne.n	80055b2 <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800559e:	4b32      	ldr	r3, [pc, #200]	@ (8005668 <prvAddNewTaskToReadyList+0x104>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d802      	bhi.n	80055b2 <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 80055ac:	4b2e      	ldr	r3, [pc, #184]	@ (8005668 <prvAddNewTaskToReadyList+0x104>)
 80055ae:	687a      	ldr	r2, [r7, #4]
 80055b0:	601a      	str	r2, [r3, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 80055b2:	4b2f      	ldr	r3, [pc, #188]	@ (8005670 <prvAddNewTaskToReadyList+0x10c>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	1c5a      	adds	r2, r3, #1
 80055b8:	4b2d      	ldr	r3, [pc, #180]	@ (8005670 <prvAddNewTaskToReadyList+0x10c>)
 80055ba:	601a      	str	r2, [r3, #0]
                pxNewTCB->uxTCBNumber = uxTaskNumber;
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );

            prvAddTaskToReadyList( pxNewTCB );
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055c0:	4b2c      	ldr	r3, [pc, #176]	@ (8005674 <prvAddNewTaskToReadyList+0x110>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	429a      	cmp	r2, r3
 80055c6:	d903      	bls.n	80055d0 <prvAddNewTaskToReadyList+0x6c>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055cc:	4b29      	ldr	r3, [pc, #164]	@ (8005674 <prvAddNewTaskToReadyList+0x110>)
 80055ce:	601a      	str	r2, [r3, #0]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055d4:	4928      	ldr	r1, [pc, #160]	@ (8005678 <prvAddNewTaskToReadyList+0x114>)
 80055d6:	0013      	movs	r3, r2
 80055d8:	009b      	lsls	r3, r3, #2
 80055da:	189b      	adds	r3, r3, r2
 80055dc:	009b      	lsls	r3, r3, #2
 80055de:	18cb      	adds	r3, r1, r3
 80055e0:	3304      	adds	r3, #4
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	60fb      	str	r3, [r7, #12]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	68fa      	ldr	r2, [r7, #12]
 80055ea:	609a      	str	r2, [r3, #8]
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	689a      	ldr	r2, [r3, #8]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	60da      	str	r2, [r3, #12]
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	687a      	ldr	r2, [r7, #4]
 80055fa:	3204      	adds	r2, #4
 80055fc:	605a      	str	r2, [r3, #4]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	1d1a      	adds	r2, r3, #4
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	609a      	str	r2, [r3, #8]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800560a:	0013      	movs	r3, r2
 800560c:	009b      	lsls	r3, r3, #2
 800560e:	189b      	adds	r3, r3, r2
 8005610:	009b      	lsls	r3, r3, #2
 8005612:	4a19      	ldr	r2, [pc, #100]	@ (8005678 <prvAddNewTaskToReadyList+0x114>)
 8005614:	189a      	adds	r2, r3, r2
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	615a      	str	r2, [r3, #20]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800561e:	4916      	ldr	r1, [pc, #88]	@ (8005678 <prvAddNewTaskToReadyList+0x114>)
 8005620:	0013      	movs	r3, r2
 8005622:	009b      	lsls	r3, r3, #2
 8005624:	189b      	adds	r3, r3, r2
 8005626:	009b      	lsls	r3, r3, #2
 8005628:	5859      	ldr	r1, [r3, r1]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800562e:	1c48      	adds	r0, r1, #1
 8005630:	4911      	ldr	r1, [pc, #68]	@ (8005678 <prvAddNewTaskToReadyList+0x114>)
 8005632:	0013      	movs	r3, r2
 8005634:	009b      	lsls	r3, r3, #2
 8005636:	189b      	adds	r3, r3, r2
 8005638:	009b      	lsls	r3, r3, #2
 800563a:	5058      	str	r0, [r3, r1]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 800563c:	f7ff f8c8 	bl	80047d0 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8005640:	4b0a      	ldr	r3, [pc, #40]	@ (800566c <prvAddNewTaskToReadyList+0x108>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d008      	beq.n	800565a <prvAddNewTaskToReadyList+0xf6>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 8005648:	4b07      	ldr	r3, [pc, #28]	@ (8005668 <prvAddNewTaskToReadyList+0x104>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005652:	429a      	cmp	r2, r3
 8005654:	d201      	bcs.n	800565a <prvAddNewTaskToReadyList+0xf6>
 8005656:	f7ff f899 	bl	800478c <vPortYield>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800565a:	46c0      	nop			@ (mov r8, r8)
 800565c:	46bd      	mov	sp, r7
 800565e:	b004      	add	sp, #16
 8005660:	bd80      	pop	{r7, pc}
 8005662:	46c0      	nop			@ (mov r8, r8)
 8005664:	20000994 	.word	0x20000994
 8005668:	200008d0 	.word	0x200008d0
 800566c:	200009a0 	.word	0x200009a0
 8005670:	200009b0 	.word	0x200009b0
 8005674:	2000099c 	.word	0x2000099c
 8005678:	200008d4 	.word	0x200008d4

0800567c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 800567c:	b580      	push	{r7, lr}
 800567e:	b084      	sub	sp, #16
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8005684:	2300      	movs	r3, #0
 8005686:	60fb      	str	r3, [r7, #12]

        traceENTER_vTaskDelay( xTicksToDelay );

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d00a      	beq.n	80056a4 <vTaskDelay+0x28>
        {
            vTaskSuspendAll();
 800568e:	f000 f88b 	bl	80057a8 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2100      	movs	r1, #0
 8005696:	0018      	movs	r0, r3
 8005698:	f000 fd4e 	bl	8006138 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800569c:	f000 f890 	bl	80057c0 <xTaskResumeAll>
 80056a0:	0003      	movs	r3, r0
 80056a2:	60fb      	str	r3, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d101      	bne.n	80056ae <vTaskDelay+0x32>
        {
            taskYIELD_WITHIN_API();
 80056aa:	f7ff f86f 	bl	800478c <vPortYield>
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskDelay();
    }
 80056ae:	46c0      	nop			@ (mov r8, r8)
 80056b0:	46bd      	mov	sp, r7
 80056b2:	b004      	add	sp, #16
 80056b4:	bd80      	pop	{r7, pc}
	...

080056b8 <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b08a      	sub	sp, #40	@ 0x28
 80056bc:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 80056be:	2301      	movs	r3, #1
 80056c0:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 80056c2:	2300      	movs	r3, #0
 80056c4:	613b      	str	r3, [r7, #16]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 80056c6:	2300      	movs	r3, #0
 80056c8:	617b      	str	r3, [r7, #20]
 80056ca:	e011      	b.n	80056f0 <prvCreateIdleTasks+0x38>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 80056cc:	4a1d      	ldr	r2, [pc, #116]	@ (8005744 <prvCreateIdleTasks+0x8c>)
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	18d3      	adds	r3, r2, r3
 80056d2:	7819      	ldrb	r1, [r3, #0]
 80056d4:	003a      	movs	r2, r7
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	18d3      	adds	r3, r2, r3
 80056da:	1c0a      	adds	r2, r1, #0
 80056dc:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 80056de:	003a      	movs	r2, r7
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	18d3      	adds	r3, r2, r3
 80056e4:	781b      	ldrb	r3, [r3, #0]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d006      	beq.n	80056f8 <prvCreateIdleTasks+0x40>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	3301      	adds	r3, #1
 80056ee:	617b      	str	r3, [r7, #20]
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	2b0f      	cmp	r3, #15
 80056f4:	ddea      	ble.n	80056cc <prvCreateIdleTasks+0x14>
 80056f6:	e000      	b.n	80056fa <prvCreateIdleTasks+0x42>
        {
            break;
 80056f8:	46c0      	nop			@ (mov r8, r8)
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 80056fa:	2300      	movs	r3, #0
 80056fc:	61bb      	str	r3, [r7, #24]
 80056fe:	e016      	b.n	800572e <prvCreateIdleTasks+0x76>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 8005700:	4b11      	ldr	r3, [pc, #68]	@ (8005748 <prvCreateIdleTasks+0x90>)
 8005702:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 8005704:	69bb      	ldr	r3, [r7, #24]
 8005706:	009a      	lsls	r2, r3, #2
 8005708:	4b10      	ldr	r3, [pc, #64]	@ (800574c <prvCreateIdleTasks+0x94>)
 800570a:	18d3      	adds	r3, r2, r3
 800570c:	0039      	movs	r1, r7
 800570e:	6938      	ldr	r0, [r7, #16]
 8005710:	9301      	str	r3, [sp, #4]
 8005712:	2300      	movs	r3, #0
 8005714:	9300      	str	r3, [sp, #0]
 8005716:	2300      	movs	r3, #0
 8005718:	2220      	movs	r2, #32
 800571a:	f7ff fe89 	bl	8005430 <xTaskCreate>
 800571e:	0003      	movs	r3, r0
 8005720:	61fb      	str	r3, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 8005722:	69fb      	ldr	r3, [r7, #28]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d006      	beq.n	8005736 <prvCreateIdleTasks+0x7e>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8005728:	69bb      	ldr	r3, [r7, #24]
 800572a:	3301      	adds	r3, #1
 800572c:	61bb      	str	r3, [r7, #24]
 800572e:	69bb      	ldr	r3, [r7, #24]
 8005730:	2b00      	cmp	r3, #0
 8005732:	dde5      	ble.n	8005700 <prvCreateIdleTasks+0x48>
 8005734:	e000      	b.n	8005738 <prvCreateIdleTasks+0x80>
        {
            break;
 8005736:	46c0      	nop			@ (mov r8, r8)
            }
            #endif
        }
    }

    return xReturn;
 8005738:	69fb      	ldr	r3, [r7, #28]
}
 800573a:	0018      	movs	r0, r3
 800573c:	46bd      	mov	sp, r7
 800573e:	b008      	add	sp, #32
 8005740:	bd80      	pop	{r7, pc}
 8005742:	46c0      	nop			@ (mov r8, r8)
 8005744:	08006834 	.word	0x08006834
 8005748:	08005fdd 	.word	0x08005fdd
 800574c:	200009b8 	.word	0x200009b8

08005750 <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b082      	sub	sp, #8
 8005754:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 8005756:	f7ff ffaf 	bl	80056b8 <prvCreateIdleTasks>
 800575a:	0003      	movs	r3, r0
 800575c:	607b      	str	r3, [r7, #4]

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2b01      	cmp	r3, #1
 8005762:	d103      	bne.n	800576c <vTaskStartScheduler+0x1c>
        {
            xReturn = xTimerCreateTimerTask();
 8005764:	f000 fd5e 	bl	8006224 <xTimerCreateTimerTask>
 8005768:	0003      	movs	r3, r0
 800576a:	607b      	str	r3, [r7, #4]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2b01      	cmp	r3, #1
 8005770:	d10c      	bne.n	800578c <vTaskStartScheduler+0x3c>
        /* Interrupts are turned off here, to ensure a tick does not occur
         * before or during the call to xPortStartScheduler().  The stacks of
         * the created tasks contain a status word with interrupts switched on
         * so interrupts will automatically get re-enabled when the first task
         * starts to run. */
        portDISABLE_INTERRUPTS();
 8005772:	b672      	cpsid	i
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8005774:	4b08      	ldr	r3, [pc, #32]	@ (8005798 <vTaskStartScheduler+0x48>)
 8005776:	2201      	movs	r2, #1
 8005778:	4252      	negs	r2, r2
 800577a:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800577c:	4b07      	ldr	r3, [pc, #28]	@ (800579c <vTaskStartScheduler+0x4c>)
 800577e:	2201      	movs	r2, #1
 8005780:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005782:	4b07      	ldr	r3, [pc, #28]	@ (80057a0 <vTaskStartScheduler+0x50>)
 8005784:	2200      	movs	r2, #0
 8005786:	601a      	str	r2, [r3, #0]
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 8005788:	f7ff f8f6 	bl	8004978 <xPortStartScheduler>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800578c:	4b05      	ldr	r3, [pc, #20]	@ (80057a4 <vTaskStartScheduler+0x54>)
 800578e:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
}
 8005790:	46c0      	nop			@ (mov r8, r8)
 8005792:	46bd      	mov	sp, r7
 8005794:	b002      	add	sp, #8
 8005796:	bd80      	pop	{r7, pc}
 8005798:	200009b4 	.word	0x200009b4
 800579c:	200009a0 	.word	0x200009a0
 80057a0:	20000998 	.word	0x20000998
 80057a4:	080068f8 	.word	0x080068f8

080057a8 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 80057ac:	4b03      	ldr	r3, [pc, #12]	@ (80057bc <vTaskSuspendAll+0x14>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	1c5a      	adds	r2, r3, #1
 80057b2:	4b02      	ldr	r3, [pc, #8]	@ (80057bc <vTaskSuspendAll+0x14>)
 80057b4:	601a      	str	r2, [r3, #0]
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
}
 80057b6:	46c0      	nop			@ (mov r8, r8)
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}
 80057bc:	200009bc 	.word	0x200009bc

080057c0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b088      	sub	sp, #32
 80057c4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80057c6:	2300      	movs	r3, #0
 80057c8:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80057ca:	2300      	movs	r3, #0
 80057cc:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 80057ce:	f7fe ffed 	bl	80047ac <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 80057d2:	2300      	movs	r3, #0
 80057d4:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 80057d6:	4b69      	ldr	r3, [pc, #420]	@ (800597c <xTaskResumeAll+0x1bc>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	1e5a      	subs	r2, r3, #1
 80057dc:	4b67      	ldr	r3, [pc, #412]	@ (800597c <xTaskResumeAll+0x1bc>)
 80057de:	601a      	str	r2, [r3, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80057e0:	4b66      	ldr	r3, [pc, #408]	@ (800597c <xTaskResumeAll+0x1bc>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d000      	beq.n	80057ea <xTaskResumeAll+0x2a>
 80057e8:	e0c1      	b.n	800596e <xTaskResumeAll+0x1ae>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80057ea:	4b65      	ldr	r3, [pc, #404]	@ (8005980 <xTaskResumeAll+0x1c0>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d100      	bne.n	80057f4 <xTaskResumeAll+0x34>
 80057f2:	e0bc      	b.n	800596e <xTaskResumeAll+0x1ae>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80057f4:	e08d      	b.n	8005912 <xTaskResumeAll+0x152>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80057f6:	4b63      	ldr	r3, [pc, #396]	@ (8005984 <xTaskResumeAll+0x1c4>)
 80057f8:	68db      	ldr	r3, [r3, #12]
 80057fa:	68db      	ldr	r3, [r3, #12]
 80057fc:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80057fe:	69fb      	ldr	r3, [r7, #28]
 8005800:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005802:	60fb      	str	r3, [r7, #12]
 8005804:	69fb      	ldr	r3, [r7, #28]
 8005806:	69db      	ldr	r3, [r3, #28]
 8005808:	69fa      	ldr	r2, [r7, #28]
 800580a:	6a12      	ldr	r2, [r2, #32]
 800580c:	609a      	str	r2, [r3, #8]
 800580e:	69fb      	ldr	r3, [r7, #28]
 8005810:	6a1b      	ldr	r3, [r3, #32]
 8005812:	69fa      	ldr	r2, [r7, #28]
 8005814:	69d2      	ldr	r2, [r2, #28]
 8005816:	605a      	str	r2, [r3, #4]
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	685a      	ldr	r2, [r3, #4]
 800581c:	69fb      	ldr	r3, [r7, #28]
 800581e:	3318      	adds	r3, #24
 8005820:	429a      	cmp	r2, r3
 8005822:	d103      	bne.n	800582c <xTaskResumeAll+0x6c>
 8005824:	69fb      	ldr	r3, [r7, #28]
 8005826:	6a1a      	ldr	r2, [r3, #32]
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	605a      	str	r2, [r3, #4]
 800582c:	69fb      	ldr	r3, [r7, #28]
 800582e:	2200      	movs	r2, #0
 8005830:	629a      	str	r2, [r3, #40]	@ 0x28
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	1e5a      	subs	r2, r3, #1
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800583c:	69fb      	ldr	r3, [r7, #28]
 800583e:	695b      	ldr	r3, [r3, #20]
 8005840:	60bb      	str	r3, [r7, #8]
 8005842:	69fb      	ldr	r3, [r7, #28]
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	69fa      	ldr	r2, [r7, #28]
 8005848:	68d2      	ldr	r2, [r2, #12]
 800584a:	609a      	str	r2, [r3, #8]
 800584c:	69fb      	ldr	r3, [r7, #28]
 800584e:	68db      	ldr	r3, [r3, #12]
 8005850:	69fa      	ldr	r2, [r7, #28]
 8005852:	6892      	ldr	r2, [r2, #8]
 8005854:	605a      	str	r2, [r3, #4]
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	685a      	ldr	r2, [r3, #4]
 800585a:	69fb      	ldr	r3, [r7, #28]
 800585c:	3304      	adds	r3, #4
 800585e:	429a      	cmp	r2, r3
 8005860:	d103      	bne.n	800586a <xTaskResumeAll+0xaa>
 8005862:	69fb      	ldr	r3, [r7, #28]
 8005864:	68da      	ldr	r2, [r3, #12]
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	605a      	str	r2, [r3, #4]
 800586a:	69fb      	ldr	r3, [r7, #28]
 800586c:	2200      	movs	r2, #0
 800586e:	615a      	str	r2, [r3, #20]
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	1e5a      	subs	r2, r3, #1
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 800587a:	69fb      	ldr	r3, [r7, #28]
 800587c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800587e:	4b42      	ldr	r3, [pc, #264]	@ (8005988 <xTaskResumeAll+0x1c8>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	429a      	cmp	r2, r3
 8005884:	d903      	bls.n	800588e <xTaskResumeAll+0xce>
 8005886:	69fb      	ldr	r3, [r7, #28]
 8005888:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800588a:	4b3f      	ldr	r3, [pc, #252]	@ (8005988 <xTaskResumeAll+0x1c8>)
 800588c:	601a      	str	r2, [r3, #0]
 800588e:	69fb      	ldr	r3, [r7, #28]
 8005890:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005892:	493e      	ldr	r1, [pc, #248]	@ (800598c <xTaskResumeAll+0x1cc>)
 8005894:	0013      	movs	r3, r2
 8005896:	009b      	lsls	r3, r3, #2
 8005898:	189b      	adds	r3, r3, r2
 800589a:	009b      	lsls	r3, r3, #2
 800589c:	18cb      	adds	r3, r1, r3
 800589e:	3304      	adds	r3, #4
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	607b      	str	r3, [r7, #4]
 80058a4:	69fb      	ldr	r3, [r7, #28]
 80058a6:	687a      	ldr	r2, [r7, #4]
 80058a8:	609a      	str	r2, [r3, #8]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	689a      	ldr	r2, [r3, #8]
 80058ae:	69fb      	ldr	r3, [r7, #28]
 80058b0:	60da      	str	r2, [r3, #12]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	689b      	ldr	r3, [r3, #8]
 80058b6:	69fa      	ldr	r2, [r7, #28]
 80058b8:	3204      	adds	r2, #4
 80058ba:	605a      	str	r2, [r3, #4]
 80058bc:	69fb      	ldr	r3, [r7, #28]
 80058be:	1d1a      	adds	r2, r3, #4
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	609a      	str	r2, [r3, #8]
 80058c4:	69fb      	ldr	r3, [r7, #28]
 80058c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058c8:	0013      	movs	r3, r2
 80058ca:	009b      	lsls	r3, r3, #2
 80058cc:	189b      	adds	r3, r3, r2
 80058ce:	009b      	lsls	r3, r3, #2
 80058d0:	4a2e      	ldr	r2, [pc, #184]	@ (800598c <xTaskResumeAll+0x1cc>)
 80058d2:	189a      	adds	r2, r3, r2
 80058d4:	69fb      	ldr	r3, [r7, #28]
 80058d6:	615a      	str	r2, [r3, #20]
 80058d8:	69fb      	ldr	r3, [r7, #28]
 80058da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058dc:	492b      	ldr	r1, [pc, #172]	@ (800598c <xTaskResumeAll+0x1cc>)
 80058de:	0013      	movs	r3, r2
 80058e0:	009b      	lsls	r3, r3, #2
 80058e2:	189b      	adds	r3, r3, r2
 80058e4:	009b      	lsls	r3, r3, #2
 80058e6:	5859      	ldr	r1, [r3, r1]
 80058e8:	69fb      	ldr	r3, [r7, #28]
 80058ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058ec:	1c48      	adds	r0, r1, #1
 80058ee:	4927      	ldr	r1, [pc, #156]	@ (800598c <xTaskResumeAll+0x1cc>)
 80058f0:	0013      	movs	r3, r2
 80058f2:	009b      	lsls	r3, r3, #2
 80058f4:	189b      	adds	r3, r3, r2
 80058f6:	009b      	lsls	r3, r3, #2
 80058f8:	5058      	str	r0, [r3, r1]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80058fa:	69fb      	ldr	r3, [r7, #28]
 80058fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058fe:	4b24      	ldr	r3, [pc, #144]	@ (8005990 <xTaskResumeAll+0x1d0>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005904:	429a      	cmp	r2, r3
 8005906:	d904      	bls.n	8005912 <xTaskResumeAll+0x152>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 8005908:	4b22      	ldr	r3, [pc, #136]	@ (8005994 <xTaskResumeAll+0x1d4>)
 800590a:	693a      	ldr	r2, [r7, #16]
 800590c:	0092      	lsls	r2, r2, #2
 800590e:	2101      	movs	r1, #1
 8005910:	50d1      	str	r1, [r2, r3]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005912:	4b1c      	ldr	r3, [pc, #112]	@ (8005984 <xTaskResumeAll+0x1c4>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d000      	beq.n	800591c <xTaskResumeAll+0x15c>
 800591a:	e76c      	b.n	80057f6 <xTaskResumeAll+0x36>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 800591c:	69fb      	ldr	r3, [r7, #28]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d001      	beq.n	8005926 <xTaskResumeAll+0x166>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 8005922:	f000 fbef 	bl	8006104 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005926:	4b1c      	ldr	r3, [pc, #112]	@ (8005998 <xTaskResumeAll+0x1d8>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d011      	beq.n	8005956 <xTaskResumeAll+0x196>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 8005932:	f000 f841 	bl	80059b8 <xTaskIncrementTick>
 8005936:	1e03      	subs	r3, r0, #0
 8005938:	d004      	beq.n	8005944 <xTaskResumeAll+0x184>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 800593a:	4b16      	ldr	r3, [pc, #88]	@ (8005994 <xTaskResumeAll+0x1d4>)
 800593c:	693a      	ldr	r2, [r7, #16]
 800593e:	0092      	lsls	r2, r2, #2
 8005940:	2101      	movs	r1, #1
 8005942:	50d1      	str	r1, [r2, r3]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	3b01      	subs	r3, #1
 8005948:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d1f0      	bne.n	8005932 <xTaskResumeAll+0x172>

                            xPendedTicks = 0;
 8005950:	4b11      	ldr	r3, [pc, #68]	@ (8005998 <xTaskResumeAll+0x1d8>)
 8005952:	2200      	movs	r2, #0
 8005954:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 8005956:	4b0f      	ldr	r3, [pc, #60]	@ (8005994 <xTaskResumeAll+0x1d4>)
 8005958:	693a      	ldr	r2, [r7, #16]
 800595a:	0092      	lsls	r2, r2, #2
 800595c:	58d3      	ldr	r3, [r2, r3]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d005      	beq.n	800596e <xTaskResumeAll+0x1ae>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8005962:	2301      	movs	r3, #1
 8005964:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 8005966:	4b0a      	ldr	r3, [pc, #40]	@ (8005990 <xTaskResumeAll+0x1d0>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f7fe ff0f 	bl	800478c <vPortYield>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800596e:	f7fe ff2f 	bl	80047d0 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );

    return xAlreadyYielded;
 8005972:	69bb      	ldr	r3, [r7, #24]
}
 8005974:	0018      	movs	r0, r3
 8005976:	46bd      	mov	sp, r7
 8005978:	b008      	add	sp, #32
 800597a:	bd80      	pop	{r7, pc}
 800597c:	200009bc 	.word	0x200009bc
 8005980:	20000994 	.word	0x20000994
 8005984:	20000954 	.word	0x20000954
 8005988:	2000099c 	.word	0x2000099c
 800598c:	200008d4 	.word	0x200008d4
 8005990:	200008d0 	.word	0x200008d0
 8005994:	200009a8 	.word	0x200009a8
 8005998:	200009a4 	.word	0x200009a4

0800599c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b082      	sub	sp, #8
 80059a0:	af00      	add	r7, sp, #0
    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80059a2:	4b04      	ldr	r3, [pc, #16]	@ (80059b4 <xTaskGetTickCount+0x18>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    traceRETURN_xTaskGetTickCount( xTicks );

    return xTicks;
 80059a8:	687b      	ldr	r3, [r7, #4]
}
 80059aa:	0018      	movs	r0, r3
 80059ac:	46bd      	mov	sp, r7
 80059ae:	b002      	add	sp, #8
 80059b0:	bd80      	pop	{r7, pc}
 80059b2:	46c0      	nop			@ (mov r8, r8)
 80059b4:	20000998 	.word	0x20000998

080059b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b088      	sub	sp, #32
 80059bc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80059be:	2300      	movs	r3, #0
 80059c0:	61fb      	str	r3, [r7, #28]

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80059c2:	4b75      	ldr	r3, [pc, #468]	@ (8005b98 <xTaskIncrementTick+0x1e0>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d000      	beq.n	80059cc <xTaskIncrementTick+0x14>
 80059ca:	e0db      	b.n	8005b84 <xTaskIncrementTick+0x1cc>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80059cc:	4b73      	ldr	r3, [pc, #460]	@ (8005b9c <xTaskIncrementTick+0x1e4>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	3301      	adds	r3, #1
 80059d2:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80059d4:	4b71      	ldr	r3, [pc, #452]	@ (8005b9c <xTaskIncrementTick+0x1e4>)
 80059d6:	69ba      	ldr	r2, [r7, #24]
 80059d8:	601a      	str	r2, [r3, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 80059da:	69bb      	ldr	r3, [r7, #24]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d110      	bne.n	8005a02 <xTaskIncrementTick+0x4a>
        {
            taskSWITCH_DELAYED_LISTS();
 80059e0:	4b6f      	ldr	r3, [pc, #444]	@ (8005ba0 <xTaskIncrementTick+0x1e8>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	617b      	str	r3, [r7, #20]
 80059e6:	4b6f      	ldr	r3, [pc, #444]	@ (8005ba4 <xTaskIncrementTick+0x1ec>)
 80059e8:	681a      	ldr	r2, [r3, #0]
 80059ea:	4b6d      	ldr	r3, [pc, #436]	@ (8005ba0 <xTaskIncrementTick+0x1e8>)
 80059ec:	601a      	str	r2, [r3, #0]
 80059ee:	4b6d      	ldr	r3, [pc, #436]	@ (8005ba4 <xTaskIncrementTick+0x1ec>)
 80059f0:	697a      	ldr	r2, [r7, #20]
 80059f2:	601a      	str	r2, [r3, #0]
 80059f4:	4b6c      	ldr	r3, [pc, #432]	@ (8005ba8 <xTaskIncrementTick+0x1f0>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	1c5a      	adds	r2, r3, #1
 80059fa:	4b6b      	ldr	r3, [pc, #428]	@ (8005ba8 <xTaskIncrementTick+0x1f0>)
 80059fc:	601a      	str	r2, [r3, #0]
 80059fe:	f000 fb81 	bl	8006104 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8005a02:	4b6a      	ldr	r3, [pc, #424]	@ (8005bac <xTaskIncrementTick+0x1f4>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	69ba      	ldr	r2, [r7, #24]
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	d200      	bcs.n	8005a0e <xTaskIncrementTick+0x56>
 8005a0c:	e0a6      	b.n	8005b5c <xTaskIncrementTick+0x1a4>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a0e:	4b64      	ldr	r3, [pc, #400]	@ (8005ba0 <xTaskIncrementTick+0x1e8>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d104      	bne.n	8005a22 <xTaskIncrementTick+0x6a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 8005a18:	4b64      	ldr	r3, [pc, #400]	@ (8005bac <xTaskIncrementTick+0x1f4>)
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	4252      	negs	r2, r2
 8005a1e:	601a      	str	r2, [r3, #0]
                    break;
 8005a20:	e09c      	b.n	8005b5c <xTaskIncrementTick+0x1a4>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005a22:	4b5f      	ldr	r3, [pc, #380]	@ (8005ba0 <xTaskIncrementTick+0x1e8>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	68db      	ldr	r3, [r3, #12]
 8005a28:	68db      	ldr	r3, [r3, #12]
 8005a2a:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 8005a32:	69ba      	ldr	r2, [r7, #24]
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	429a      	cmp	r2, r3
 8005a38:	d203      	bcs.n	8005a42 <xTaskIncrementTick+0x8a>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8005a3a:	4b5c      	ldr	r3, [pc, #368]	@ (8005bac <xTaskIncrementTick+0x1f4>)
 8005a3c:	68fa      	ldr	r2, [r7, #12]
 8005a3e:	601a      	str	r2, [r3, #0]
                        break;
 8005a40:	e08c      	b.n	8005b5c <xTaskIncrementTick+0x1a4>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	695b      	ldr	r3, [r3, #20]
 8005a46:	60bb      	str	r3, [r7, #8]
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	689b      	ldr	r3, [r3, #8]
 8005a4c:	693a      	ldr	r2, [r7, #16]
 8005a4e:	68d2      	ldr	r2, [r2, #12]
 8005a50:	609a      	str	r2, [r3, #8]
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	68db      	ldr	r3, [r3, #12]
 8005a56:	693a      	ldr	r2, [r7, #16]
 8005a58:	6892      	ldr	r2, [r2, #8]
 8005a5a:	605a      	str	r2, [r3, #4]
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	685a      	ldr	r2, [r3, #4]
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	3304      	adds	r3, #4
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d103      	bne.n	8005a70 <xTaskIncrementTick+0xb8>
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	68da      	ldr	r2, [r3, #12]
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	605a      	str	r2, [r3, #4]
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	2200      	movs	r2, #0
 8005a74:	615a      	str	r2, [r3, #20]
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	1e5a      	subs	r2, r3, #1
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d01e      	beq.n	8005ac6 <xTaskIncrementTick+0x10e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a8c:	607b      	str	r3, [r7, #4]
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	69db      	ldr	r3, [r3, #28]
 8005a92:	693a      	ldr	r2, [r7, #16]
 8005a94:	6a12      	ldr	r2, [r2, #32]
 8005a96:	609a      	str	r2, [r3, #8]
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	6a1b      	ldr	r3, [r3, #32]
 8005a9c:	693a      	ldr	r2, [r7, #16]
 8005a9e:	69d2      	ldr	r2, [r2, #28]
 8005aa0:	605a      	str	r2, [r3, #4]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	685a      	ldr	r2, [r3, #4]
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	3318      	adds	r3, #24
 8005aaa:	429a      	cmp	r2, r3
 8005aac:	d103      	bne.n	8005ab6 <xTaskIncrementTick+0xfe>
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	6a1a      	ldr	r2, [r3, #32]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	605a      	str	r2, [r3, #4]
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	629a      	str	r2, [r3, #40]	@ 0x28
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	1e5a      	subs	r2, r3, #1
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005aca:	4b39      	ldr	r3, [pc, #228]	@ (8005bb0 <xTaskIncrementTick+0x1f8>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	429a      	cmp	r2, r3
 8005ad0:	d903      	bls.n	8005ada <xTaskIncrementTick+0x122>
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ad6:	4b36      	ldr	r3, [pc, #216]	@ (8005bb0 <xTaskIncrementTick+0x1f8>)
 8005ad8:	601a      	str	r2, [r3, #0]
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ade:	4935      	ldr	r1, [pc, #212]	@ (8005bb4 <xTaskIncrementTick+0x1fc>)
 8005ae0:	0013      	movs	r3, r2
 8005ae2:	009b      	lsls	r3, r3, #2
 8005ae4:	189b      	adds	r3, r3, r2
 8005ae6:	009b      	lsls	r3, r3, #2
 8005ae8:	18cb      	adds	r3, r1, r3
 8005aea:	3304      	adds	r3, #4
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	603b      	str	r3, [r7, #0]
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	683a      	ldr	r2, [r7, #0]
 8005af4:	609a      	str	r2, [r3, #8]
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	689a      	ldr	r2, [r3, #8]
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	60da      	str	r2, [r3, #12]
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	689b      	ldr	r3, [r3, #8]
 8005b02:	693a      	ldr	r2, [r7, #16]
 8005b04:	3204      	adds	r2, #4
 8005b06:	605a      	str	r2, [r3, #4]
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	1d1a      	adds	r2, r3, #4
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	609a      	str	r2, [r3, #8]
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b14:	0013      	movs	r3, r2
 8005b16:	009b      	lsls	r3, r3, #2
 8005b18:	189b      	adds	r3, r3, r2
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	4a25      	ldr	r2, [pc, #148]	@ (8005bb4 <xTaskIncrementTick+0x1fc>)
 8005b1e:	189a      	adds	r2, r3, r2
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	615a      	str	r2, [r3, #20]
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b28:	4922      	ldr	r1, [pc, #136]	@ (8005bb4 <xTaskIncrementTick+0x1fc>)
 8005b2a:	0013      	movs	r3, r2
 8005b2c:	009b      	lsls	r3, r3, #2
 8005b2e:	189b      	adds	r3, r3, r2
 8005b30:	009b      	lsls	r3, r3, #2
 8005b32:	5859      	ldr	r1, [r3, r1]
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b38:	1c48      	adds	r0, r1, #1
 8005b3a:	491e      	ldr	r1, [pc, #120]	@ (8005bb4 <xTaskIncrementTick+0x1fc>)
 8005b3c:	0013      	movs	r3, r2
 8005b3e:	009b      	lsls	r3, r3, #2
 8005b40:	189b      	adds	r3, r3, r2
 8005b42:	009b      	lsls	r3, r3, #2
 8005b44:	5058      	str	r0, [r3, r1]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b4a:	4b1b      	ldr	r3, [pc, #108]	@ (8005bb8 <xTaskIncrementTick+0x200>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d800      	bhi.n	8005b56 <xTaskIncrementTick+0x19e>
 8005b54:	e75b      	b.n	8005a0e <xTaskIncrementTick+0x56>
                            {
                                xSwitchRequired = pdTRUE;
 8005b56:	2301      	movs	r3, #1
 8005b58:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b5a:	e758      	b.n	8005a0e <xTaskIncrementTick+0x56>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 8005b5c:	4b16      	ldr	r3, [pc, #88]	@ (8005bb8 <xTaskIncrementTick+0x200>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b62:	4914      	ldr	r1, [pc, #80]	@ (8005bb4 <xTaskIncrementTick+0x1fc>)
 8005b64:	0013      	movs	r3, r2
 8005b66:	009b      	lsls	r3, r3, #2
 8005b68:	189b      	adds	r3, r3, r2
 8005b6a:	009b      	lsls	r3, r3, #2
 8005b6c:	585b      	ldr	r3, [r3, r1]
 8005b6e:	2b01      	cmp	r3, #1
 8005b70:	d901      	bls.n	8005b76 <xTaskIncrementTick+0x1be>
                {
                    xSwitchRequired = pdTRUE;
 8005b72:	2301      	movs	r3, #1
 8005b74:	61fb      	str	r3, [r7, #28]
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 8005b76:	4b11      	ldr	r3, [pc, #68]	@ (8005bbc <xTaskIncrementTick+0x204>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d007      	beq.n	8005b8e <xTaskIncrementTick+0x1d6>
                {
                    xSwitchRequired = pdTRUE;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	61fb      	str	r3, [r7, #28]
 8005b82:	e004      	b.n	8005b8e <xTaskIncrementTick+0x1d6>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 8005b84:	4b0e      	ldr	r3, [pc, #56]	@ (8005bc0 <xTaskIncrementTick+0x208>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	1c5a      	adds	r2, r3, #1
 8005b8a:	4b0d      	ldr	r3, [pc, #52]	@ (8005bc0 <xTaskIncrementTick+0x208>)
 8005b8c:	601a      	str	r2, [r3, #0]
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );

    return xSwitchRequired;
 8005b8e:	69fb      	ldr	r3, [r7, #28]
}
 8005b90:	0018      	movs	r0, r3
 8005b92:	46bd      	mov	sp, r7
 8005b94:	b008      	add	sp, #32
 8005b96:	bd80      	pop	{r7, pc}
 8005b98:	200009bc 	.word	0x200009bc
 8005b9c:	20000998 	.word	0x20000998
 8005ba0:	2000094c 	.word	0x2000094c
 8005ba4:	20000950 	.word	0x20000950
 8005ba8:	200009ac 	.word	0x200009ac
 8005bac:	200009b4 	.word	0x200009b4
 8005bb0:	2000099c 	.word	0x2000099c
 8005bb4:	200008d4 	.word	0x200008d4
 8005bb8:	200008d0 	.word	0x200008d0
 8005bbc:	200009a8 	.word	0x200009a8
 8005bc0:	200009a4 	.word	0x200009a4

08005bc4 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b086      	sub	sp, #24
 8005bc8:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 8005bca:	4b34      	ldr	r3, [pc, #208]	@ (8005c9c <vTaskSwitchContext+0xd8>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d003      	beq.n	8005bda <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 8005bd2:	4b33      	ldr	r3, [pc, #204]	@ (8005ca0 <vTaskSwitchContext+0xdc>)
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 8005bd8:	e05b      	b.n	8005c92 <vTaskSwitchContext+0xce>
            xYieldPendings[ 0 ] = pdFALSE;
 8005bda:	4b31      	ldr	r3, [pc, #196]	@ (8005ca0 <vTaskSwitchContext+0xdc>)
 8005bdc:	2200      	movs	r2, #0
 8005bde:	601a      	str	r2, [r3, #0]
            taskCHECK_FOR_STACK_OVERFLOW();
 8005be0:	4b30      	ldr	r3, [pc, #192]	@ (8005ca4 <vTaskSwitchContext+0xe0>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005be6:	613b      	str	r3, [r7, #16]
 8005be8:	4b2f      	ldr	r3, [pc, #188]	@ (8005ca8 <vTaskSwitchContext+0xe4>)
 8005bea:	60fb      	str	r3, [r7, #12]
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	68fa      	ldr	r2, [r7, #12]
 8005bf2:	429a      	cmp	r2, r3
 8005bf4:	d111      	bne.n	8005c1a <vTaskSwitchContext+0x56>
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	3304      	adds	r3, #4
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	68fa      	ldr	r2, [r7, #12]
 8005bfe:	429a      	cmp	r2, r3
 8005c00:	d10b      	bne.n	8005c1a <vTaskSwitchContext+0x56>
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	3308      	adds	r3, #8
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	68fa      	ldr	r2, [r7, #12]
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	d105      	bne.n	8005c1a <vTaskSwitchContext+0x56>
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	330c      	adds	r3, #12
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	68fa      	ldr	r2, [r7, #12]
 8005c16:	429a      	cmp	r2, r3
 8005c18:	d00a      	beq.n	8005c30 <vTaskSwitchContext+0x6c>
 8005c1a:	4b22      	ldr	r3, [pc, #136]	@ (8005ca4 <vTaskSwitchContext+0xe0>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	3334      	adds	r3, #52	@ 0x34
 8005c20:	60bb      	str	r3, [r7, #8]
 8005c22:	4b20      	ldr	r3, [pc, #128]	@ (8005ca4 <vTaskSwitchContext+0xe0>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	68ba      	ldr	r2, [r7, #8]
 8005c28:	0011      	movs	r1, r2
 8005c2a:	0018      	movs	r0, r3
 8005c2c:	f7fd f9c1 	bl	8002fb2 <vApplicationStackOverflowHook>
            taskSELECT_HIGHEST_PRIORITY_TASK();
 8005c30:	4b1e      	ldr	r3, [pc, #120]	@ (8005cac <vTaskSwitchContext+0xe8>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	617b      	str	r3, [r7, #20]
 8005c36:	e002      	b.n	8005c3e <vTaskSwitchContext+0x7a>
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	3b01      	subs	r3, #1
 8005c3c:	617b      	str	r3, [r7, #20]
 8005c3e:	491c      	ldr	r1, [pc, #112]	@ (8005cb0 <vTaskSwitchContext+0xec>)
 8005c40:	697a      	ldr	r2, [r7, #20]
 8005c42:	0013      	movs	r3, r2
 8005c44:	009b      	lsls	r3, r3, #2
 8005c46:	189b      	adds	r3, r3, r2
 8005c48:	009b      	lsls	r3, r3, #2
 8005c4a:	585b      	ldr	r3, [r3, r1]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d0f3      	beq.n	8005c38 <vTaskSwitchContext+0x74>
 8005c50:	697a      	ldr	r2, [r7, #20]
 8005c52:	0013      	movs	r3, r2
 8005c54:	009b      	lsls	r3, r3, #2
 8005c56:	189b      	adds	r3, r3, r2
 8005c58:	009b      	lsls	r3, r3, #2
 8005c5a:	4a15      	ldr	r2, [pc, #84]	@ (8005cb0 <vTaskSwitchContext+0xec>)
 8005c5c:	189b      	adds	r3, r3, r2
 8005c5e:	607b      	str	r3, [r7, #4]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	685a      	ldr	r2, [r3, #4]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	605a      	str	r2, [r3, #4]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	685a      	ldr	r2, [r3, #4]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	3308      	adds	r3, #8
 8005c72:	429a      	cmp	r2, r3
 8005c74:	d103      	bne.n	8005c7e <vTaskSwitchContext+0xba>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	68da      	ldr	r2, [r3, #12]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	605a      	str	r2, [r3, #4]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	68da      	ldr	r2, [r3, #12]
 8005c84:	4b07      	ldr	r3, [pc, #28]	@ (8005ca4 <vTaskSwitchContext+0xe0>)
 8005c86:	601a      	str	r2, [r3, #0]
 8005c88:	4b08      	ldr	r3, [pc, #32]	@ (8005cac <vTaskSwitchContext+0xe8>)
 8005c8a:	697a      	ldr	r2, [r7, #20]
 8005c8c:	601a      	str	r2, [r3, #0]
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 8005c8e:	4b05      	ldr	r3, [pc, #20]	@ (8005ca4 <vTaskSwitchContext+0xe0>)
 8005c90:	681b      	ldr	r3, [r3, #0]
    }
 8005c92:	46c0      	nop			@ (mov r8, r8)
 8005c94:	46bd      	mov	sp, r7
 8005c96:	b006      	add	sp, #24
 8005c98:	bd80      	pop	{r7, pc}
 8005c9a:	46c0      	nop			@ (mov r8, r8)
 8005c9c:	200009bc 	.word	0x200009bc
 8005ca0:	200009a8 	.word	0x200009a8
 8005ca4:	200008d0 	.word	0x200008d0
 8005ca8:	a5a5a5a5 	.word	0xa5a5a5a5
 8005cac:	2000099c 	.word	0x2000099c
 8005cb0:	200008d4 	.word	0x200008d4

08005cb4 <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b082      	sub	sp, #8
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
 8005cbc:	6039      	str	r1, [r7, #0]
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005cbe:	4b09      	ldr	r3, [pc, #36]	@ (8005ce4 <vTaskPlaceOnEventList+0x30>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	3318      	adds	r3, #24
 8005cc4:	001a      	movs	r2, r3
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	0011      	movs	r1, r2
 8005cca:	0018      	movs	r0, r3
 8005ccc:	f7ff f8b7 	bl	8004e3e <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	2101      	movs	r1, #1
 8005cd4:	0018      	movs	r0, r3
 8005cd6:	f000 fa2f 	bl	8006138 <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
}
 8005cda:	46c0      	nop			@ (mov r8, r8)
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	b002      	add	sp, #8
 8005ce0:	bd80      	pop	{r7, pc}
 8005ce2:	46c0      	nop			@ (mov r8, r8)
 8005ce4:	200008d0 	.word	0x200008d0

08005ce8 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b086      	sub	sp, #24
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	60f8      	str	r0, [r7, #12]
 8005cf0:	60b9      	str	r1, [r7, #8]
 8005cf2:	607a      	str	r2, [r7, #4]

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	617b      	str	r3, [r7, #20]
 8005cfa:	4b17      	ldr	r3, [pc, #92]	@ (8005d58 <vTaskPlaceOnEventListRestricted+0x70>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	697a      	ldr	r2, [r7, #20]
 8005d00:	61da      	str	r2, [r3, #28]
 8005d02:	4b15      	ldr	r3, [pc, #84]	@ (8005d58 <vTaskPlaceOnEventListRestricted+0x70>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	697a      	ldr	r2, [r7, #20]
 8005d08:	6892      	ldr	r2, [r2, #8]
 8005d0a:	621a      	str	r2, [r3, #32]
 8005d0c:	4b12      	ldr	r3, [pc, #72]	@ (8005d58 <vTaskPlaceOnEventListRestricted+0x70>)
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	3218      	adds	r2, #24
 8005d16:	605a      	str	r2, [r3, #4]
 8005d18:	4b0f      	ldr	r3, [pc, #60]	@ (8005d58 <vTaskPlaceOnEventListRestricted+0x70>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	3318      	adds	r3, #24
 8005d1e:	001a      	movs	r2, r3
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	609a      	str	r2, [r3, #8]
 8005d24:	4b0c      	ldr	r3, [pc, #48]	@ (8005d58 <vTaskPlaceOnEventListRestricted+0x70>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	68fa      	ldr	r2, [r7, #12]
 8005d2a:	629a      	str	r2, [r3, #40]	@ 0x28
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	1c5a      	adds	r2, r3, #1
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d002      	beq.n	8005d42 <vTaskPlaceOnEventListRestricted+0x5a>
        {
            xTicksToWait = portMAX_DELAY;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	425b      	negs	r3, r3
 8005d40:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005d42:	687a      	ldr	r2, [r7, #4]
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	0011      	movs	r1, r2
 8005d48:	0018      	movs	r0, r3
 8005d4a:	f000 f9f5 	bl	8006138 <prvAddCurrentTaskToDelayedList>

        traceRETURN_vTaskPlaceOnEventListRestricted();
    }
 8005d4e:	46c0      	nop			@ (mov r8, r8)
 8005d50:	46bd      	mov	sp, r7
 8005d52:	b006      	add	sp, #24
 8005d54:	bd80      	pop	{r7, pc}
 8005d56:	46c0      	nop			@ (mov r8, r8)
 8005d58:	200008d0 	.word	0x200008d0

08005d5c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b088      	sub	sp, #32
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	68db      	ldr	r3, [r3, #12]
 8005d68:	68db      	ldr	r3, [r3, #12]
 8005d6a:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8005d6c:	69bb      	ldr	r3, [r7, #24]
 8005d6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d70:	617b      	str	r3, [r7, #20]
 8005d72:	69bb      	ldr	r3, [r7, #24]
 8005d74:	69db      	ldr	r3, [r3, #28]
 8005d76:	69ba      	ldr	r2, [r7, #24]
 8005d78:	6a12      	ldr	r2, [r2, #32]
 8005d7a:	609a      	str	r2, [r3, #8]
 8005d7c:	69bb      	ldr	r3, [r7, #24]
 8005d7e:	6a1b      	ldr	r3, [r3, #32]
 8005d80:	69ba      	ldr	r2, [r7, #24]
 8005d82:	69d2      	ldr	r2, [r2, #28]
 8005d84:	605a      	str	r2, [r3, #4]
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	685a      	ldr	r2, [r3, #4]
 8005d8a:	69bb      	ldr	r3, [r7, #24]
 8005d8c:	3318      	adds	r3, #24
 8005d8e:	429a      	cmp	r2, r3
 8005d90:	d103      	bne.n	8005d9a <xTaskRemoveFromEventList+0x3e>
 8005d92:	69bb      	ldr	r3, [r7, #24]
 8005d94:	6a1a      	ldr	r2, [r3, #32]
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	605a      	str	r2, [r3, #4]
 8005d9a:	69bb      	ldr	r3, [r7, #24]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	629a      	str	r2, [r3, #40]	@ 0x28
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	1e5a      	subs	r2, r3, #1
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8005daa:	4b4a      	ldr	r3, [pc, #296]	@ (8005ed4 <xTaskRemoveFromEventList+0x178>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d15f      	bne.n	8005e72 <xTaskRemoveFromEventList+0x116>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8005db2:	69bb      	ldr	r3, [r7, #24]
 8005db4:	695b      	ldr	r3, [r3, #20]
 8005db6:	60fb      	str	r3, [r7, #12]
 8005db8:	69bb      	ldr	r3, [r7, #24]
 8005dba:	689b      	ldr	r3, [r3, #8]
 8005dbc:	69ba      	ldr	r2, [r7, #24]
 8005dbe:	68d2      	ldr	r2, [r2, #12]
 8005dc0:	609a      	str	r2, [r3, #8]
 8005dc2:	69bb      	ldr	r3, [r7, #24]
 8005dc4:	68db      	ldr	r3, [r3, #12]
 8005dc6:	69ba      	ldr	r2, [r7, #24]
 8005dc8:	6892      	ldr	r2, [r2, #8]
 8005dca:	605a      	str	r2, [r3, #4]
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	685a      	ldr	r2, [r3, #4]
 8005dd0:	69bb      	ldr	r3, [r7, #24]
 8005dd2:	3304      	adds	r3, #4
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	d103      	bne.n	8005de0 <xTaskRemoveFromEventList+0x84>
 8005dd8:	69bb      	ldr	r3, [r7, #24]
 8005dda:	68da      	ldr	r2, [r3, #12]
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	605a      	str	r2, [r3, #4]
 8005de0:	69bb      	ldr	r3, [r7, #24]
 8005de2:	2200      	movs	r2, #0
 8005de4:	615a      	str	r2, [r3, #20]
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	1e5a      	subs	r2, r3, #1
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8005df0:	69bb      	ldr	r3, [r7, #24]
 8005df2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005df4:	4b38      	ldr	r3, [pc, #224]	@ (8005ed8 <xTaskRemoveFromEventList+0x17c>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d903      	bls.n	8005e04 <xTaskRemoveFromEventList+0xa8>
 8005dfc:	69bb      	ldr	r3, [r7, #24]
 8005dfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e00:	4b35      	ldr	r3, [pc, #212]	@ (8005ed8 <xTaskRemoveFromEventList+0x17c>)
 8005e02:	601a      	str	r2, [r3, #0]
 8005e04:	69bb      	ldr	r3, [r7, #24]
 8005e06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e08:	4934      	ldr	r1, [pc, #208]	@ (8005edc <xTaskRemoveFromEventList+0x180>)
 8005e0a:	0013      	movs	r3, r2
 8005e0c:	009b      	lsls	r3, r3, #2
 8005e0e:	189b      	adds	r3, r3, r2
 8005e10:	009b      	lsls	r3, r3, #2
 8005e12:	18cb      	adds	r3, r1, r3
 8005e14:	3304      	adds	r3, #4
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	60bb      	str	r3, [r7, #8]
 8005e1a:	69bb      	ldr	r3, [r7, #24]
 8005e1c:	68ba      	ldr	r2, [r7, #8]
 8005e1e:	609a      	str	r2, [r3, #8]
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	689a      	ldr	r2, [r3, #8]
 8005e24:	69bb      	ldr	r3, [r7, #24]
 8005e26:	60da      	str	r2, [r3, #12]
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	69ba      	ldr	r2, [r7, #24]
 8005e2e:	3204      	adds	r2, #4
 8005e30:	605a      	str	r2, [r3, #4]
 8005e32:	69bb      	ldr	r3, [r7, #24]
 8005e34:	1d1a      	adds	r2, r3, #4
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	609a      	str	r2, [r3, #8]
 8005e3a:	69bb      	ldr	r3, [r7, #24]
 8005e3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e3e:	0013      	movs	r3, r2
 8005e40:	009b      	lsls	r3, r3, #2
 8005e42:	189b      	adds	r3, r3, r2
 8005e44:	009b      	lsls	r3, r3, #2
 8005e46:	4a25      	ldr	r2, [pc, #148]	@ (8005edc <xTaskRemoveFromEventList+0x180>)
 8005e48:	189a      	adds	r2, r3, r2
 8005e4a:	69bb      	ldr	r3, [r7, #24]
 8005e4c:	615a      	str	r2, [r3, #20]
 8005e4e:	69bb      	ldr	r3, [r7, #24]
 8005e50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e52:	4922      	ldr	r1, [pc, #136]	@ (8005edc <xTaskRemoveFromEventList+0x180>)
 8005e54:	0013      	movs	r3, r2
 8005e56:	009b      	lsls	r3, r3, #2
 8005e58:	189b      	adds	r3, r3, r2
 8005e5a:	009b      	lsls	r3, r3, #2
 8005e5c:	5859      	ldr	r1, [r3, r1]
 8005e5e:	69bb      	ldr	r3, [r7, #24]
 8005e60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e62:	1c48      	adds	r0, r1, #1
 8005e64:	491d      	ldr	r1, [pc, #116]	@ (8005edc <xTaskRemoveFromEventList+0x180>)
 8005e66:	0013      	movs	r3, r2
 8005e68:	009b      	lsls	r3, r3, #2
 8005e6a:	189b      	adds	r3, r3, r2
 8005e6c:	009b      	lsls	r3, r3, #2
 8005e6e:	5058      	str	r0, [r3, r1]
 8005e70:	e01b      	b.n	8005eaa <xTaskRemoveFromEventList+0x14e>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005e72:	4b1b      	ldr	r3, [pc, #108]	@ (8005ee0 <xTaskRemoveFromEventList+0x184>)
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	613b      	str	r3, [r7, #16]
 8005e78:	69bb      	ldr	r3, [r7, #24]
 8005e7a:	693a      	ldr	r2, [r7, #16]
 8005e7c:	61da      	str	r2, [r3, #28]
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	689a      	ldr	r2, [r3, #8]
 8005e82:	69bb      	ldr	r3, [r7, #24]
 8005e84:	621a      	str	r2, [r3, #32]
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	69ba      	ldr	r2, [r7, #24]
 8005e8c:	3218      	adds	r2, #24
 8005e8e:	605a      	str	r2, [r3, #4]
 8005e90:	69bb      	ldr	r3, [r7, #24]
 8005e92:	3318      	adds	r3, #24
 8005e94:	001a      	movs	r2, r3
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	609a      	str	r2, [r3, #8]
 8005e9a:	69bb      	ldr	r3, [r7, #24]
 8005e9c:	4a10      	ldr	r2, [pc, #64]	@ (8005ee0 <xTaskRemoveFromEventList+0x184>)
 8005e9e:	629a      	str	r2, [r3, #40]	@ 0x28
 8005ea0:	4b0f      	ldr	r3, [pc, #60]	@ (8005ee0 <xTaskRemoveFromEventList+0x184>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	1c5a      	adds	r2, r3, #1
 8005ea6:	4b0e      	ldr	r3, [pc, #56]	@ (8005ee0 <xTaskRemoveFromEventList+0x184>)
 8005ea8:	601a      	str	r2, [r3, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005eaa:	69bb      	ldr	r3, [r7, #24]
 8005eac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005eae:	4b0d      	ldr	r3, [pc, #52]	@ (8005ee4 <xTaskRemoveFromEventList+0x188>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	d905      	bls.n	8005ec4 <xTaskRemoveFromEventList+0x168>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 8005eb8:	2301      	movs	r3, #1
 8005eba:	61fb      	str	r3, [r7, #28]

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 8005ebc:	4b0a      	ldr	r3, [pc, #40]	@ (8005ee8 <xTaskRemoveFromEventList+0x18c>)
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	601a      	str	r2, [r3, #0]
 8005ec2:	e001      	b.n	8005ec8 <xTaskRemoveFromEventList+0x16c>
        }
        else
        {
            xReturn = pdFALSE;
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	61fb      	str	r3, [r7, #28]
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
    return xReturn;
 8005ec8:	69fb      	ldr	r3, [r7, #28]
}
 8005eca:	0018      	movs	r0, r3
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	b008      	add	sp, #32
 8005ed0:	bd80      	pop	{r7, pc}
 8005ed2:	46c0      	nop			@ (mov r8, r8)
 8005ed4:	200009bc 	.word	0x200009bc
 8005ed8:	2000099c 	.word	0x2000099c
 8005edc:	200008d4 	.word	0x200008d4
 8005ee0:	20000954 	.word	0x20000954
 8005ee4:	200008d0 	.word	0x200008d0
 8005ee8:	200009a8 	.word	0x200009a8

08005eec <vTaskInternalSetTimeOutState>:
    traceRETURN_vTaskSetTimeOutState();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b082      	sub	sp, #8
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005ef4:	4b05      	ldr	r3, [pc, #20]	@ (8005f0c <vTaskInternalSetTimeOutState+0x20>)
 8005ef6:	681a      	ldr	r2, [r3, #0]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8005efc:	4b04      	ldr	r3, [pc, #16]	@ (8005f10 <vTaskInternalSetTimeOutState+0x24>)
 8005efe:	681a      	ldr	r2, [r3, #0]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
}
 8005f04:	46c0      	nop			@ (mov r8, r8)
 8005f06:	46bd      	mov	sp, r7
 8005f08:	b002      	add	sp, #8
 8005f0a:	bd80      	pop	{r7, pc}
 8005f0c:	200009ac 	.word	0x200009ac
 8005f10:	20000998 	.word	0x20000998

08005f14 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b086      	sub	sp, #24
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
 8005f1c:	6039      	str	r1, [r7, #0]
    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
    configASSERT( pxTicksToWait );

    taskENTER_CRITICAL();
 8005f1e:	f7fe fc45 	bl	80047ac <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8005f22:	4b26      	ldr	r3, [pc, #152]	@ (8005fbc <xTaskCheckForTimeOut+0xa8>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	693a      	ldr	r2, [r7, #16]
 8005f2e:	1ad3      	subs	r3, r2, r3
 8005f30:	60fb      	str	r3, [r7, #12]

        #if ( INCLUDE_xTaskAbortDelay == 1 )
            if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
 8005f32:	4b23      	ldr	r3, [pc, #140]	@ (8005fc0 <xTaskCheckForTimeOut+0xac>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	2251      	movs	r2, #81	@ 0x51
 8005f38:	5c9b      	ldrb	r3, [r3, r2]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d007      	beq.n	8005f4e <xTaskCheckForTimeOut+0x3a>
            {
                /* The delay was aborted, which is not the same as a time out,
                 * but has the same result. */
                pxCurrentTCB->ucDelayAborted = ( uint8_t ) pdFALSE;
 8005f3e:	4b20      	ldr	r3, [pc, #128]	@ (8005fc0 <xTaskCheckForTimeOut+0xac>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	2251      	movs	r2, #81	@ 0x51
 8005f44:	2100      	movs	r1, #0
 8005f46:	5499      	strb	r1, [r3, r2]
                xReturn = pdTRUE;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	617b      	str	r3, [r7, #20]
 8005f4c:	e02e      	b.n	8005fac <xTaskCheckForTimeOut+0x98>
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	3301      	adds	r3, #1
 8005f54:	d102      	bne.n	8005f5c <xTaskCheckForTimeOut+0x48>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8005f56:	2300      	movs	r3, #0
 8005f58:	617b      	str	r3, [r7, #20]
 8005f5a:	e027      	b.n	8005fac <xTaskCheckForTimeOut+0x98>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681a      	ldr	r2, [r3, #0]
 8005f60:	4b18      	ldr	r3, [pc, #96]	@ (8005fc4 <xTaskCheckForTimeOut+0xb0>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	429a      	cmp	r2, r3
 8005f66:	d00a      	beq.n	8005f7e <xTaskCheckForTimeOut+0x6a>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	693a      	ldr	r2, [r7, #16]
 8005f6e:	429a      	cmp	r2, r3
 8005f70:	d305      	bcc.n	8005f7e <xTaskCheckForTimeOut+0x6a>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8005f72:	2301      	movs	r3, #1
 8005f74:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	601a      	str	r2, [r3, #0]
 8005f7c:	e016      	b.n	8005fac <xTaskCheckForTimeOut+0x98>
        }
        else if( xElapsedTime < *pxTicksToWait )
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	68fa      	ldr	r2, [r7, #12]
 8005f84:	429a      	cmp	r2, r3
 8005f86:	d20c      	bcs.n	8005fa2 <xTaskCheckForTimeOut+0x8e>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	681a      	ldr	r2, [r3, #0]
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	1ad2      	subs	r2, r2, r3
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	0018      	movs	r0, r3
 8005f98:	f7ff ffa8 	bl	8005eec <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	617b      	str	r3, [r7, #20]
 8005fa0:	e004      	b.n	8005fac <xTaskCheckForTimeOut+0x98>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8005fa8:	2301      	movs	r3, #1
 8005faa:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 8005fac:	f7fe fc10 	bl	80047d0 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );

    return xReturn;
 8005fb0:	697b      	ldr	r3, [r7, #20]
}
 8005fb2:	0018      	movs	r0, r3
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	b006      	add	sp, #24
 8005fb8:	bd80      	pop	{r7, pc}
 8005fba:	46c0      	nop			@ (mov r8, r8)
 8005fbc:	20000998 	.word	0x20000998
 8005fc0:	200008d0 	.word	0x200008d0
 8005fc4:	200009ac 	.word	0x200009ac

08005fc8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 8005fcc:	4b02      	ldr	r3, [pc, #8]	@ (8005fd8 <vTaskMissedYield+0x10>)
 8005fce:	2201      	movs	r2, #1
 8005fd0:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
}
 8005fd2:	46c0      	nop			@ (mov r8, r8)
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}
 8005fd8:	200009a8 	.word	0x200009a8

08005fdc <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b082      	sub	sp, #8
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8005fe4:	f000 f84e 	bl	8006084 <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 8005fe8:	4b03      	ldr	r3, [pc, #12]	@ (8005ff8 <prvIdleTask+0x1c>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	2b01      	cmp	r3, #1
 8005fee:	d9f9      	bls.n	8005fe4 <prvIdleTask+0x8>
            {
                taskYIELD();
 8005ff0:	f7fe fbcc 	bl	800478c <vPortYield>
        prvCheckTasksWaitingTermination();
 8005ff4:	e7f6      	b.n	8005fe4 <prvIdleTask+0x8>
 8005ff6:	46c0      	nop			@ (mov r8, r8)
 8005ff8:	200008d4 	.word	0x200008d4

08005ffc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b082      	sub	sp, #8
 8006000:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006002:	2300      	movs	r3, #0
 8006004:	607b      	str	r3, [r7, #4]
 8006006:	e00c      	b.n	8006022 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	0013      	movs	r3, r2
 800600c:	009b      	lsls	r3, r3, #2
 800600e:	189b      	adds	r3, r3, r2
 8006010:	009b      	lsls	r3, r3, #2
 8006012:	4a14      	ldr	r2, [pc, #80]	@ (8006064 <prvInitialiseTaskLists+0x68>)
 8006014:	189b      	adds	r3, r3, r2
 8006016:	0018      	movs	r0, r3
 8006018:	f7fe fee8 	bl	8004dec <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	3301      	adds	r3, #1
 8006020:	607b      	str	r3, [r7, #4]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2b03      	cmp	r3, #3
 8006026:	d9ef      	bls.n	8006008 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8006028:	4b0f      	ldr	r3, [pc, #60]	@ (8006068 <prvInitialiseTaskLists+0x6c>)
 800602a:	0018      	movs	r0, r3
 800602c:	f7fe fede 	bl	8004dec <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8006030:	4b0e      	ldr	r3, [pc, #56]	@ (800606c <prvInitialiseTaskLists+0x70>)
 8006032:	0018      	movs	r0, r3
 8006034:	f7fe feda 	bl	8004dec <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8006038:	4b0d      	ldr	r3, [pc, #52]	@ (8006070 <prvInitialiseTaskLists+0x74>)
 800603a:	0018      	movs	r0, r3
 800603c:	f7fe fed6 	bl	8004dec <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8006040:	4b0c      	ldr	r3, [pc, #48]	@ (8006074 <prvInitialiseTaskLists+0x78>)
 8006042:	0018      	movs	r0, r3
 8006044:	f7fe fed2 	bl	8004dec <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8006048:	4b0b      	ldr	r3, [pc, #44]	@ (8006078 <prvInitialiseTaskLists+0x7c>)
 800604a:	0018      	movs	r0, r3
 800604c:	f7fe fece 	bl	8004dec <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8006050:	4b0a      	ldr	r3, [pc, #40]	@ (800607c <prvInitialiseTaskLists+0x80>)
 8006052:	4a05      	ldr	r2, [pc, #20]	@ (8006068 <prvInitialiseTaskLists+0x6c>)
 8006054:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006056:	4b0a      	ldr	r3, [pc, #40]	@ (8006080 <prvInitialiseTaskLists+0x84>)
 8006058:	4a04      	ldr	r2, [pc, #16]	@ (800606c <prvInitialiseTaskLists+0x70>)
 800605a:	601a      	str	r2, [r3, #0]
}
 800605c:	46c0      	nop			@ (mov r8, r8)
 800605e:	46bd      	mov	sp, r7
 8006060:	b002      	add	sp, #8
 8006062:	bd80      	pop	{r7, pc}
 8006064:	200008d4 	.word	0x200008d4
 8006068:	20000924 	.word	0x20000924
 800606c:	20000938 	.word	0x20000938
 8006070:	20000954 	.word	0x20000954
 8006074:	20000968 	.word	0x20000968
 8006078:	20000980 	.word	0x20000980
 800607c:	2000094c 	.word	0x2000094c
 8006080:	20000950 	.word	0x20000950

08006084 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b082      	sub	sp, #8
 8006088:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800608a:	e01a      	b.n	80060c2 <prvCheckTasksWaitingTermination+0x3e>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 800608c:	f7fe fb8e 	bl	80047ac <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006090:	4b10      	ldr	r3, [pc, #64]	@ (80060d4 <prvCheckTasksWaitingTermination+0x50>)
 8006092:	68db      	ldr	r3, [r3, #12]
 8006094:	68db      	ldr	r3, [r3, #12]
 8006096:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	3304      	adds	r3, #4
 800609c:	0018      	movs	r0, r3
 800609e:	f7fe ff04 	bl	8004eaa <uxListRemove>
                        --uxCurrentNumberOfTasks;
 80060a2:	4b0d      	ldr	r3, [pc, #52]	@ (80060d8 <prvCheckTasksWaitingTermination+0x54>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	1e5a      	subs	r2, r3, #1
 80060a8:	4b0b      	ldr	r3, [pc, #44]	@ (80060d8 <prvCheckTasksWaitingTermination+0x54>)
 80060aa:	601a      	str	r2, [r3, #0]
                        --uxDeletedTasksWaitingCleanUp;
 80060ac:	4b0b      	ldr	r3, [pc, #44]	@ (80060dc <prvCheckTasksWaitingTermination+0x58>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	1e5a      	subs	r2, r3, #1
 80060b2:	4b0a      	ldr	r3, [pc, #40]	@ (80060dc <prvCheckTasksWaitingTermination+0x58>)
 80060b4:	601a      	str	r2, [r3, #0]
                    }
                }
                taskEXIT_CRITICAL();
 80060b6:	f7fe fb8b 	bl	80047d0 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	0018      	movs	r0, r3
 80060be:	f000 f80f 	bl	80060e0 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80060c2:	4b06      	ldr	r3, [pc, #24]	@ (80060dc <prvCheckTasksWaitingTermination+0x58>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d1e0      	bne.n	800608c <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 80060ca:	46c0      	nop			@ (mov r8, r8)
 80060cc:	46c0      	nop			@ (mov r8, r8)
 80060ce:	46bd      	mov	sp, r7
 80060d0:	b002      	add	sp, #8
 80060d2:	bd80      	pop	{r7, pc}
 80060d4:	20000968 	.word	0x20000968
 80060d8:	20000994 	.word	0x20000994
 80060dc:	2000097c 	.word	0x2000097c

080060e0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b082      	sub	sp, #8
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060ec:	0018      	movs	r0, r3
 80060ee:	f7fe fd93 	bl	8004c18 <vPortFree>
            vPortFree( pxTCB );
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	0018      	movs	r0, r3
 80060f6:	f7fe fd8f 	bl	8004c18 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80060fa:	46c0      	nop			@ (mov r8, r8)
 80060fc:	46bd      	mov	sp, r7
 80060fe:	b002      	add	sp, #8
 8006100:	bd80      	pop	{r7, pc}
	...

08006104 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006104:	b580      	push	{r7, lr}
 8006106:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006108:	4b09      	ldr	r3, [pc, #36]	@ (8006130 <prvResetNextTaskUnblockTime+0x2c>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d104      	bne.n	800611c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8006112:	4b08      	ldr	r3, [pc, #32]	@ (8006134 <prvResetNextTaskUnblockTime+0x30>)
 8006114:	2201      	movs	r2, #1
 8006116:	4252      	negs	r2, r2
 8006118:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800611a:	e005      	b.n	8006128 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800611c:	4b04      	ldr	r3, [pc, #16]	@ (8006130 <prvResetNextTaskUnblockTime+0x2c>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	68db      	ldr	r3, [r3, #12]
 8006122:	681a      	ldr	r2, [r3, #0]
 8006124:	4b03      	ldr	r3, [pc, #12]	@ (8006134 <prvResetNextTaskUnblockTime+0x30>)
 8006126:	601a      	str	r2, [r3, #0]
}
 8006128:	46c0      	nop			@ (mov r8, r8)
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}
 800612e:	46c0      	nop			@ (mov r8, r8)
 8006130:	2000094c 	.word	0x2000094c
 8006134:	200009b4 	.word	0x200009b4

08006138 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b088      	sub	sp, #32
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
 8006140:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8006142:	4b32      	ldr	r3, [pc, #200]	@ (800620c <prvAddCurrentTaskToDelayedList+0xd4>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 8006148:	4b31      	ldr	r3, [pc, #196]	@ (8006210 <prvAddCurrentTaskToDelayedList+0xd8>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 800614e:	4b31      	ldr	r3, [pc, #196]	@ (8006214 <prvAddCurrentTaskToDelayedList+0xdc>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	617b      	str	r3, [r7, #20]
    #if ( INCLUDE_xTaskAbortDelay == 1 )
    {
        /* About to enter a delayed list, so ensure the ucDelayAborted flag is
         * reset to pdFALSE so it can be detected as having been set to pdTRUE
         * when the task leaves the Blocked state. */
        pxCurrentTCB->ucDelayAborted = ( uint8_t ) pdFALSE;
 8006154:	4b30      	ldr	r3, [pc, #192]	@ (8006218 <prvAddCurrentTaskToDelayedList+0xe0>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	2251      	movs	r2, #81	@ 0x51
 800615a:	2100      	movs	r1, #0
 800615c:	5499      	strb	r1, [r3, r2]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800615e:	4b2e      	ldr	r3, [pc, #184]	@ (8006218 <prvAddCurrentTaskToDelayedList+0xe0>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	3304      	adds	r3, #4
 8006164:	0018      	movs	r0, r3
 8006166:	f7fe fea0 	bl	8004eaa <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	3301      	adds	r3, #1
 800616e:	d124      	bne.n	80061ba <prvAddCurrentTaskToDelayedList+0x82>
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d021      	beq.n	80061ba <prvAddCurrentTaskToDelayedList+0x82>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006176:	4b29      	ldr	r3, [pc, #164]	@ (800621c <prvAddCurrentTaskToDelayedList+0xe4>)
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	613b      	str	r3, [r7, #16]
 800617c:	4b26      	ldr	r3, [pc, #152]	@ (8006218 <prvAddCurrentTaskToDelayedList+0xe0>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	693a      	ldr	r2, [r7, #16]
 8006182:	609a      	str	r2, [r3, #8]
 8006184:	4b24      	ldr	r3, [pc, #144]	@ (8006218 <prvAddCurrentTaskToDelayedList+0xe0>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	693a      	ldr	r2, [r7, #16]
 800618a:	6892      	ldr	r2, [r2, #8]
 800618c:	60da      	str	r2, [r3, #12]
 800618e:	4b22      	ldr	r3, [pc, #136]	@ (8006218 <prvAddCurrentTaskToDelayedList+0xe0>)
 8006190:	681a      	ldr	r2, [r3, #0]
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	689b      	ldr	r3, [r3, #8]
 8006196:	3204      	adds	r2, #4
 8006198:	605a      	str	r2, [r3, #4]
 800619a:	4b1f      	ldr	r3, [pc, #124]	@ (8006218 <prvAddCurrentTaskToDelayedList+0xe0>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	1d1a      	adds	r2, r3, #4
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	609a      	str	r2, [r3, #8]
 80061a4:	4b1c      	ldr	r3, [pc, #112]	@ (8006218 <prvAddCurrentTaskToDelayedList+0xe0>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a1c      	ldr	r2, [pc, #112]	@ (800621c <prvAddCurrentTaskToDelayedList+0xe4>)
 80061aa:	615a      	str	r2, [r3, #20]
 80061ac:	4b1b      	ldr	r3, [pc, #108]	@ (800621c <prvAddCurrentTaskToDelayedList+0xe4>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	1c5a      	adds	r2, r3, #1
 80061b2:	4b1a      	ldr	r3, [pc, #104]	@ (800621c <prvAddCurrentTaskToDelayedList+0xe4>)
 80061b4:	601a      	str	r2, [r3, #0]
 80061b6:	46c0      	nop			@ (mov r8, r8)

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80061b8:	e024      	b.n	8006204 <prvAddCurrentTaskToDelayedList+0xcc>
            xTimeToWake = xConstTickCount + xTicksToWait;
 80061ba:	69fa      	ldr	r2, [r7, #28]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	18d3      	adds	r3, r2, r3
 80061c0:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80061c2:	4b15      	ldr	r3, [pc, #84]	@ (8006218 <prvAddCurrentTaskToDelayedList+0xe0>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	68fa      	ldr	r2, [r7, #12]
 80061c8:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 80061ca:	68fa      	ldr	r2, [r7, #12]
 80061cc:	69fb      	ldr	r3, [r7, #28]
 80061ce:	429a      	cmp	r2, r3
 80061d0:	d208      	bcs.n	80061e4 <prvAddCurrentTaskToDelayedList+0xac>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 80061d2:	4b11      	ldr	r3, [pc, #68]	@ (8006218 <prvAddCurrentTaskToDelayedList+0xe0>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	1d1a      	adds	r2, r3, #4
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	0011      	movs	r1, r2
 80061dc:	0018      	movs	r0, r3
 80061de:	f7fe fe2e 	bl	8004e3e <vListInsert>
}
 80061e2:	e00f      	b.n	8006204 <prvAddCurrentTaskToDelayedList+0xcc>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 80061e4:	4b0c      	ldr	r3, [pc, #48]	@ (8006218 <prvAddCurrentTaskToDelayedList+0xe0>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	1d1a      	adds	r2, r3, #4
 80061ea:	69bb      	ldr	r3, [r7, #24]
 80061ec:	0011      	movs	r1, r2
 80061ee:	0018      	movs	r0, r3
 80061f0:	f7fe fe25 	bl	8004e3e <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 80061f4:	4b0a      	ldr	r3, [pc, #40]	@ (8006220 <prvAddCurrentTaskToDelayedList+0xe8>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	68fa      	ldr	r2, [r7, #12]
 80061fa:	429a      	cmp	r2, r3
 80061fc:	d202      	bcs.n	8006204 <prvAddCurrentTaskToDelayedList+0xcc>
                    xNextTaskUnblockTime = xTimeToWake;
 80061fe:	4b08      	ldr	r3, [pc, #32]	@ (8006220 <prvAddCurrentTaskToDelayedList+0xe8>)
 8006200:	68fa      	ldr	r2, [r7, #12]
 8006202:	601a      	str	r2, [r3, #0]
}
 8006204:	46c0      	nop			@ (mov r8, r8)
 8006206:	46bd      	mov	sp, r7
 8006208:	b008      	add	sp, #32
 800620a:	bd80      	pop	{r7, pc}
 800620c:	20000998 	.word	0x20000998
 8006210:	2000094c 	.word	0x2000094c
 8006214:	20000950 	.word	0x20000950
 8006218:	200008d0 	.word	0x200008d0
 800621c:	20000980 	.word	0x20000980
 8006220:	200009b4 	.word	0x200009b4

08006224 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8006224:	b580      	push	{r7, lr}
 8006226:	b084      	sub	sp, #16
 8006228:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800622a:	2300      	movs	r3, #0
 800622c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800622e:	f000 fa3b 	bl	80066a8 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8006232:	4b0a      	ldr	r3, [pc, #40]	@ (800625c <xTimerCreateTimerTask+0x38>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d00b      	beq.n	8006252 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
                #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 800623a:	4909      	ldr	r1, [pc, #36]	@ (8006260 <xTimerCreateTimerTask+0x3c>)
 800623c:	4809      	ldr	r0, [pc, #36]	@ (8006264 <xTimerCreateTimerTask+0x40>)
 800623e:	4b0a      	ldr	r3, [pc, #40]	@ (8006268 <xTimerCreateTimerTask+0x44>)
 8006240:	9301      	str	r3, [sp, #4]
 8006242:	2302      	movs	r3, #2
 8006244:	9300      	str	r3, [sp, #0]
 8006246:	2300      	movs	r3, #0
 8006248:	2240      	movs	r2, #64	@ 0x40
 800624a:	f7ff f8f1 	bl	8005430 <xTaskCreate>
 800624e:	0003      	movs	r3, r0
 8006250:	607b      	str	r3, [r7, #4]

        configASSERT( xReturn );

        traceRETURN_xTimerCreateTimerTask( xReturn );

        return xReturn;
 8006252:	687b      	ldr	r3, [r7, #4]
    }
 8006254:	0018      	movs	r0, r3
 8006256:	46bd      	mov	sp, r7
 8006258:	b002      	add	sp, #8
 800625a:	bd80      	pop	{r7, pc}
 800625c:	200009f0 	.word	0x200009f0
 8006260:	0800683c 	.word	0x0800683c
 8006264:	08006315 	.word	0x08006315
 8006268:	200009f4 	.word	0x200009f4

0800626c <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 800626c:	b580      	push	{r7, lr}
 800626e:	b084      	sub	sp, #16
 8006270:	af00      	add	r7, sp, #0
 8006272:	60f8      	str	r0, [r7, #12]
 8006274:	60b9      	str	r1, [r7, #8]
 8006276:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8006278:	e009      	b.n	800628e <prvReloadTimer+0x22>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	699b      	ldr	r3, [r3, #24]
 800627e:	68ba      	ldr	r2, [r7, #8]
 8006280:	18d3      	adds	r3, r2, r3
 8006282:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	6a1b      	ldr	r3, [r3, #32]
 8006288:	68fa      	ldr	r2, [r7, #12]
 800628a:	0010      	movs	r0, r2
 800628c:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	699a      	ldr	r2, [r3, #24]
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	18d1      	adds	r1, r2, r3
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	687a      	ldr	r2, [r7, #4]
 800629a:	68f8      	ldr	r0, [r7, #12]
 800629c:	f000 f8da 	bl	8006454 <prvInsertTimerInActiveList>
 80062a0:	1e03      	subs	r3, r0, #0
 80062a2:	d1ea      	bne.n	800627a <prvReloadTimer+0xe>
        }
    }
 80062a4:	46c0      	nop			@ (mov r8, r8)
 80062a6:	46c0      	nop			@ (mov r8, r8)
 80062a8:	46bd      	mov	sp, r7
 80062aa:	b004      	add	sp, #16
 80062ac:	bd80      	pop	{r7, pc}
	...

080062b0 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b084      	sub	sp, #16
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
 80062b8:	6039      	str	r1, [r7, #0]
        /* MISRA Ref 11.5.3 [Void pointer assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80062ba:	4b15      	ldr	r3, [pc, #84]	@ (8006310 <prvProcessExpiredTimer+0x60>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	68db      	ldr	r3, [r3, #12]
 80062c0:	68db      	ldr	r3, [r3, #12]
 80062c2:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	3304      	adds	r3, #4
 80062c8:	0018      	movs	r0, r3
 80062ca:	f7fe fdee 	bl	8004eaa <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2224      	movs	r2, #36	@ 0x24
 80062d2:	5c9b      	ldrb	r3, [r3, r2]
 80062d4:	001a      	movs	r2, r3
 80062d6:	2304      	movs	r3, #4
 80062d8:	4013      	ands	r3, r2
 80062da:	d006      	beq.n	80062ea <prvProcessExpiredTimer+0x3a>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 80062dc:	683a      	ldr	r2, [r7, #0]
 80062de:	6879      	ldr	r1, [r7, #4]
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	0018      	movs	r0, r3
 80062e4:	f7ff ffc2 	bl	800626c <prvReloadTimer>
 80062e8:	e008      	b.n	80062fc <prvProcessExpiredTimer+0x4c>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	2224      	movs	r2, #36	@ 0x24
 80062ee:	5c9b      	ldrb	r3, [r3, r2]
 80062f0:	2201      	movs	r2, #1
 80062f2:	4393      	bics	r3, r2
 80062f4:	b2d9      	uxtb	r1, r3
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	2224      	movs	r2, #36	@ 0x24
 80062fa:	5499      	strb	r1, [r3, r2]
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	6a1b      	ldr	r3, [r3, #32]
 8006300:	68fa      	ldr	r2, [r7, #12]
 8006302:	0010      	movs	r0, r2
 8006304:	4798      	blx	r3
    }
 8006306:	46c0      	nop			@ (mov r8, r8)
 8006308:	46bd      	mov	sp, r7
 800630a:	b004      	add	sp, #16
 800630c:	bd80      	pop	{r7, pc}
 800630e:	46c0      	nop			@ (mov r8, r8)
 8006310:	200009e8 	.word	0x200009e8

08006314 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8006314:	b580      	push	{r7, lr}
 8006316:	b084      	sub	sp, #16
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]

        for( ; configCONTROL_INFINITE_LOOP(); )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800631c:	2308      	movs	r3, #8
 800631e:	18fb      	adds	r3, r7, r3
 8006320:	0018      	movs	r0, r3
 8006322:	f000 f855 	bl	80063d0 <prvGetNextExpireTime>
 8006326:	0003      	movs	r3, r0
 8006328:	60fb      	str	r3, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800632a:	68ba      	ldr	r2, [r7, #8]
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	0011      	movs	r1, r2
 8006330:	0018      	movs	r0, r3
 8006332:	f000 f805 	bl	8006340 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8006336:	f000 f8cf 	bl	80064d8 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800633a:	46c0      	nop			@ (mov r8, r8)
 800633c:	e7ee      	b.n	800631c <prvTimerTask+0x8>
	...

08006340 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8006340:	b580      	push	{r7, lr}
 8006342:	b084      	sub	sp, #16
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800634a:	f7ff fa2d 	bl	80057a8 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800634e:	2308      	movs	r3, #8
 8006350:	18fb      	adds	r3, r7, r3
 8006352:	0018      	movs	r0, r3
 8006354:	f000 f85e 	bl	8006414 <prvSampleTimeNow>
 8006358:	0003      	movs	r3, r0
 800635a:	60fb      	str	r3, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d12b      	bne.n	80063ba <prvProcessTimerOrBlockTask+0x7a>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d10c      	bne.n	8006382 <prvProcessTimerOrBlockTask+0x42>
 8006368:	687a      	ldr	r2, [r7, #4]
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	429a      	cmp	r2, r3
 800636e:	d808      	bhi.n	8006382 <prvProcessTimerOrBlockTask+0x42>
                {
                    ( void ) xTaskResumeAll();
 8006370:	f7ff fa26 	bl	80057c0 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006374:	68fa      	ldr	r2, [r7, #12]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	0011      	movs	r1, r2
 800637a:	0018      	movs	r0, r3
 800637c:	f7ff ff98 	bl	80062b0 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8006380:	e01d      	b.n	80063be <prvProcessTimerOrBlockTask+0x7e>
                    if( xListWasEmpty != pdFALSE )
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d008      	beq.n	800639a <prvProcessTimerOrBlockTask+0x5a>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006388:	4b0f      	ldr	r3, [pc, #60]	@ (80063c8 <prvProcessTimerOrBlockTask+0x88>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d101      	bne.n	8006396 <prvProcessTimerOrBlockTask+0x56>
 8006392:	2301      	movs	r3, #1
 8006394:	e000      	b.n	8006398 <prvProcessTimerOrBlockTask+0x58>
 8006396:	2300      	movs	r3, #0
 8006398:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800639a:	4b0c      	ldr	r3, [pc, #48]	@ (80063cc <prvProcessTimerOrBlockTask+0x8c>)
 800639c:	6818      	ldr	r0, [r3, #0]
 800639e:	687a      	ldr	r2, [r7, #4]
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	1ad3      	subs	r3, r2, r3
 80063a4:	683a      	ldr	r2, [r7, #0]
 80063a6:	0019      	movs	r1, r3
 80063a8:	f7fe ffce 	bl	8005348 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80063ac:	f7ff fa08 	bl	80057c0 <xTaskResumeAll>
 80063b0:	1e03      	subs	r3, r0, #0
 80063b2:	d104      	bne.n	80063be <prvProcessTimerOrBlockTask+0x7e>
                        taskYIELD_WITHIN_API();
 80063b4:	f7fe f9ea 	bl	800478c <vPortYield>
    }
 80063b8:	e001      	b.n	80063be <prvProcessTimerOrBlockTask+0x7e>
                ( void ) xTaskResumeAll();
 80063ba:	f7ff fa01 	bl	80057c0 <xTaskResumeAll>
    }
 80063be:	46c0      	nop			@ (mov r8, r8)
 80063c0:	46bd      	mov	sp, r7
 80063c2:	b004      	add	sp, #16
 80063c4:	bd80      	pop	{r7, pc}
 80063c6:	46c0      	nop			@ (mov r8, r8)
 80063c8:	200009ec 	.word	0x200009ec
 80063cc:	200009f0 	.word	0x200009f0

080063d0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b084      	sub	sp, #16
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80063d8:	4b0d      	ldr	r3, [pc, #52]	@ (8006410 <prvGetNextExpireTime+0x40>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d101      	bne.n	80063e6 <prvGetNextExpireTime+0x16>
 80063e2:	2201      	movs	r2, #1
 80063e4:	e000      	b.n	80063e8 <prvGetNextExpireTime+0x18>
 80063e6:	2200      	movs	r2, #0
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d105      	bne.n	8006400 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80063f4:	4b06      	ldr	r3, [pc, #24]	@ (8006410 <prvGetNextExpireTime+0x40>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	68db      	ldr	r3, [r3, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	60fb      	str	r3, [r7, #12]
 80063fe:	e001      	b.n	8006404 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8006400:	2300      	movs	r3, #0
 8006402:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8006404:	68fb      	ldr	r3, [r7, #12]
    }
 8006406:	0018      	movs	r0, r3
 8006408:	46bd      	mov	sp, r7
 800640a:	b004      	add	sp, #16
 800640c:	bd80      	pop	{r7, pc}
 800640e:	46c0      	nop			@ (mov r8, r8)
 8006410:	200009e8 	.word	0x200009e8

08006414 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8006414:	b580      	push	{r7, lr}
 8006416:	b084      	sub	sp, #16
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U;

        xTimeNow = xTaskGetTickCount();
 800641c:	f7ff fabe 	bl	800599c <xTaskGetTickCount>
 8006420:	0003      	movs	r3, r0
 8006422:	60fb      	str	r3, [r7, #12]

        if( xTimeNow < xLastTime )
 8006424:	4b0a      	ldr	r3, [pc, #40]	@ (8006450 <prvSampleTimeNow+0x3c>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	68fa      	ldr	r2, [r7, #12]
 800642a:	429a      	cmp	r2, r3
 800642c:	d205      	bcs.n	800643a <prvSampleTimeNow+0x26>
        {
            prvSwitchTimerLists();
 800642e:	f000 f913 	bl	8006658 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2201      	movs	r2, #1
 8006436:	601a      	str	r2, [r3, #0]
 8006438:	e002      	b.n	8006440 <prvSampleTimeNow+0x2c>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2200      	movs	r2, #0
 800643e:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8006440:	4b03      	ldr	r3, [pc, #12]	@ (8006450 <prvSampleTimeNow+0x3c>)
 8006442:	68fa      	ldr	r2, [r7, #12]
 8006444:	601a      	str	r2, [r3, #0]

        return xTimeNow;
 8006446:	68fb      	ldr	r3, [r7, #12]
    }
 8006448:	0018      	movs	r0, r3
 800644a:	46bd      	mov	sp, r7
 800644c:	b004      	add	sp, #16
 800644e:	bd80      	pop	{r7, pc}
 8006450:	200009f8 	.word	0x200009f8

08006454 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8006454:	b580      	push	{r7, lr}
 8006456:	b086      	sub	sp, #24
 8006458:	af00      	add	r7, sp, #0
 800645a:	60f8      	str	r0, [r7, #12]
 800645c:	60b9      	str	r1, [r7, #8]
 800645e:	607a      	str	r2, [r7, #4]
 8006460:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8006462:	2300      	movs	r3, #0
 8006464:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	68ba      	ldr	r2, [r7, #8]
 800646a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	68fa      	ldr	r2, [r7, #12]
 8006470:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8006472:	68ba      	ldr	r2, [r7, #8]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	429a      	cmp	r2, r3
 8006478:	d812      	bhi.n	80064a0 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 800647a:	687a      	ldr	r2, [r7, #4]
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	1ad2      	subs	r2, r2, r3
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	699b      	ldr	r3, [r3, #24]
 8006484:	429a      	cmp	r2, r3
 8006486:	d302      	bcc.n	800648e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8006488:	2301      	movs	r3, #1
 800648a:	617b      	str	r3, [r7, #20]
 800648c:	e01b      	b.n	80064c6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800648e:	4b10      	ldr	r3, [pc, #64]	@ (80064d0 <prvInsertTimerInActiveList+0x7c>)
 8006490:	681a      	ldr	r2, [r3, #0]
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	3304      	adds	r3, #4
 8006496:	0019      	movs	r1, r3
 8006498:	0010      	movs	r0, r2
 800649a:	f7fe fcd0 	bl	8004e3e <vListInsert>
 800649e:	e012      	b.n	80064c6 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80064a0:	687a      	ldr	r2, [r7, #4]
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	429a      	cmp	r2, r3
 80064a6:	d206      	bcs.n	80064b6 <prvInsertTimerInActiveList+0x62>
 80064a8:	68ba      	ldr	r2, [r7, #8]
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	429a      	cmp	r2, r3
 80064ae:	d302      	bcc.n	80064b6 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80064b0:	2301      	movs	r3, #1
 80064b2:	617b      	str	r3, [r7, #20]
 80064b4:	e007      	b.n	80064c6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80064b6:	4b07      	ldr	r3, [pc, #28]	@ (80064d4 <prvInsertTimerInActiveList+0x80>)
 80064b8:	681a      	ldr	r2, [r3, #0]
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	3304      	adds	r3, #4
 80064be:	0019      	movs	r1, r3
 80064c0:	0010      	movs	r0, r2
 80064c2:	f7fe fcbc 	bl	8004e3e <vListInsert>
            }
        }

        return xProcessTimerNow;
 80064c6:	697b      	ldr	r3, [r7, #20]
    }
 80064c8:	0018      	movs	r0, r3
 80064ca:	46bd      	mov	sp, r7
 80064cc:	b006      	add	sp, #24
 80064ce:	bd80      	pop	{r7, pc}
 80064d0:	200009ec 	.word	0x200009ec
 80064d4:	200009e8 	.word	0x200009e8

080064d8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80064d8:	b580      	push	{r7, lr}
 80064da:	b088      	sub	sp, #32
 80064dc:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage = { 0 };
 80064de:	1d3b      	adds	r3, r7, #4
 80064e0:	0018      	movs	r0, r3
 80064e2:	2310      	movs	r3, #16
 80064e4:	001a      	movs	r2, r3
 80064e6:	2100      	movs	r1, #0
 80064e8:	f000 f90c 	bl	8006704 <memset>
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 80064ec:	e0a0      	b.n	8006630 <prvProcessReceivedCommands+0x158>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
            {
                /* Negative commands are pended function calls rather than timer
                 * commands. */
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80064ee:	1d3b      	adds	r3, r7, #4
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	da0a      	bge.n	800650c <prvProcessReceivedCommands+0x34>
                {
                    const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80064f6:	1d3b      	adds	r3, r7, #4
 80064f8:	3304      	adds	r3, #4
 80064fa:	61fb      	str	r3, [r7, #28]
                    /* The timer uses the xCallbackParameters member to request a
                     * callback be executed.  Check the callback is not NULL. */
                    configASSERT( pxCallback );

                    /* Call the function. */
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80064fc:	69fb      	ldr	r3, [r7, #28]
 80064fe:	681a      	ldr	r2, [r3, #0]
 8006500:	69fb      	ldr	r3, [r7, #28]
 8006502:	6858      	ldr	r0, [r3, #4]
 8006504:	69fb      	ldr	r3, [r7, #28]
 8006506:	689b      	ldr	r3, [r3, #8]
 8006508:	0019      	movs	r1, r3
 800650a:	4790      	blx	r2
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800650c:	1d3b      	adds	r3, r7, #4
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	2b00      	cmp	r3, #0
 8006512:	da00      	bge.n	8006516 <prvProcessReceivedCommands+0x3e>
 8006514:	e08c      	b.n	8006630 <prvProcessReceivedCommands+0x158>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006516:	1d3b      	adds	r3, r7, #4
 8006518:	689b      	ldr	r3, [r3, #8]
 800651a:	61bb      	str	r3, [r7, #24]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 800651c:	69bb      	ldr	r3, [r7, #24]
 800651e:	695b      	ldr	r3, [r3, #20]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d004      	beq.n	800652e <prvProcessReceivedCommands+0x56>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006524:	69bb      	ldr	r3, [r7, #24]
 8006526:	3304      	adds	r3, #4
 8006528:	0018      	movs	r0, r3
 800652a:	f7fe fcbe 	bl	8004eaa <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800652e:	003b      	movs	r3, r7
 8006530:	0018      	movs	r0, r3
 8006532:	f7ff ff6f 	bl	8006414 <prvSampleTimeNow>
 8006536:	0003      	movs	r3, r0
 8006538:	617b      	str	r3, [r7, #20]

                switch( xMessage.xMessageID )
 800653a:	1d3b      	adds	r3, r7, #4
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	2b09      	cmp	r3, #9
 8006540:	d900      	bls.n	8006544 <prvProcessReceivedCommands+0x6c>
 8006542:	e072      	b.n	800662a <prvProcessReceivedCommands+0x152>
 8006544:	009a      	lsls	r2, r3, #2
 8006546:	4b42      	ldr	r3, [pc, #264]	@ (8006650 <prvProcessReceivedCommands+0x178>)
 8006548:	18d3      	adds	r3, r2, r3
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	469f      	mov	pc, r3
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 800654e:	69bb      	ldr	r3, [r7, #24]
 8006550:	2224      	movs	r2, #36	@ 0x24
 8006552:	5c9b      	ldrb	r3, [r3, r2]
 8006554:	2201      	movs	r2, #1
 8006556:	4313      	orrs	r3, r2
 8006558:	b2d9      	uxtb	r1, r3
 800655a:	69bb      	ldr	r3, [r7, #24]
 800655c:	2224      	movs	r2, #36	@ 0x24
 800655e:	5499      	strb	r1, [r3, r2]

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006560:	1d3b      	adds	r3, r7, #4
 8006562:	685a      	ldr	r2, [r3, #4]
 8006564:	69bb      	ldr	r3, [r7, #24]
 8006566:	699b      	ldr	r3, [r3, #24]
 8006568:	18d1      	adds	r1, r2, r3
 800656a:	1d3b      	adds	r3, r7, #4
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	697a      	ldr	r2, [r7, #20]
 8006570:	69b8      	ldr	r0, [r7, #24]
 8006572:	f7ff ff6f 	bl	8006454 <prvInsertTimerInActiveList>
 8006576:	1e03      	subs	r3, r0, #0
 8006578:	d059      	beq.n	800662e <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 800657a:	69bb      	ldr	r3, [r7, #24]
 800657c:	2224      	movs	r2, #36	@ 0x24
 800657e:	5c9b      	ldrb	r3, [r3, r2]
 8006580:	001a      	movs	r2, r3
 8006582:	2304      	movs	r3, #4
 8006584:	4013      	ands	r3, r2
 8006586:	d00a      	beq.n	800659e <prvProcessReceivedCommands+0xc6>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8006588:	1d3b      	adds	r3, r7, #4
 800658a:	685a      	ldr	r2, [r3, #4]
 800658c:	69bb      	ldr	r3, [r7, #24]
 800658e:	699b      	ldr	r3, [r3, #24]
 8006590:	18d1      	adds	r1, r2, r3
 8006592:	697a      	ldr	r2, [r7, #20]
 8006594:	69bb      	ldr	r3, [r7, #24]
 8006596:	0018      	movs	r0, r3
 8006598:	f7ff fe68 	bl	800626c <prvReloadTimer>
 800659c:	e008      	b.n	80065b0 <prvProcessReceivedCommands+0xd8>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800659e:	69bb      	ldr	r3, [r7, #24]
 80065a0:	2224      	movs	r2, #36	@ 0x24
 80065a2:	5c9b      	ldrb	r3, [r3, r2]
 80065a4:	2201      	movs	r2, #1
 80065a6:	4393      	bics	r3, r2
 80065a8:	b2d9      	uxtb	r1, r3
 80065aa:	69bb      	ldr	r3, [r7, #24]
 80065ac:	2224      	movs	r2, #36	@ 0x24
 80065ae:	5499      	strb	r1, [r3, r2]
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80065b0:	69bb      	ldr	r3, [r7, #24]
 80065b2:	6a1b      	ldr	r3, [r3, #32]
 80065b4:	69ba      	ldr	r2, [r7, #24]
 80065b6:	0010      	movs	r0, r2
 80065b8:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 80065ba:	e038      	b.n	800662e <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80065bc:	69bb      	ldr	r3, [r7, #24]
 80065be:	2224      	movs	r2, #36	@ 0x24
 80065c0:	5c9b      	ldrb	r3, [r3, r2]
 80065c2:	2201      	movs	r2, #1
 80065c4:	4393      	bics	r3, r2
 80065c6:	b2d9      	uxtb	r1, r3
 80065c8:	69bb      	ldr	r3, [r7, #24]
 80065ca:	2224      	movs	r2, #36	@ 0x24
 80065cc:	5499      	strb	r1, [r3, r2]
                        break;
 80065ce:	e02f      	b.n	8006630 <prvProcessReceivedCommands+0x158>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 80065d0:	69bb      	ldr	r3, [r7, #24]
 80065d2:	2224      	movs	r2, #36	@ 0x24
 80065d4:	5c9b      	ldrb	r3, [r3, r2]
 80065d6:	2201      	movs	r2, #1
 80065d8:	4313      	orrs	r3, r2
 80065da:	b2d9      	uxtb	r1, r3
 80065dc:	69bb      	ldr	r3, [r7, #24]
 80065de:	2224      	movs	r2, #36	@ 0x24
 80065e0:	5499      	strb	r1, [r3, r2]
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80065e2:	1d3b      	adds	r3, r7, #4
 80065e4:	685a      	ldr	r2, [r3, #4]
 80065e6:	69bb      	ldr	r3, [r7, #24]
 80065e8:	619a      	str	r2, [r3, #24]
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80065ea:	69bb      	ldr	r3, [r7, #24]
 80065ec:	699a      	ldr	r2, [r3, #24]
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	18d1      	adds	r1, r2, r3
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	697a      	ldr	r2, [r7, #20]
 80065f6:	69b8      	ldr	r0, [r7, #24]
 80065f8:	f7ff ff2c 	bl	8006454 <prvInsertTimerInActiveList>
                        break;
 80065fc:	e018      	b.n	8006630 <prvProcessReceivedCommands+0x158>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80065fe:	69bb      	ldr	r3, [r7, #24]
 8006600:	2224      	movs	r2, #36	@ 0x24
 8006602:	5c9b      	ldrb	r3, [r3, r2]
 8006604:	001a      	movs	r2, r3
 8006606:	2302      	movs	r3, #2
 8006608:	4013      	ands	r3, r2
 800660a:	d104      	bne.n	8006616 <prvProcessReceivedCommands+0x13e>
                            {
                                vPortFree( pxTimer );
 800660c:	69bb      	ldr	r3, [r7, #24]
 800660e:	0018      	movs	r0, r3
 8006610:	f7fe fb02 	bl	8004c18 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8006614:	e00c      	b.n	8006630 <prvProcessReceivedCommands+0x158>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8006616:	69bb      	ldr	r3, [r7, #24]
 8006618:	2224      	movs	r2, #36	@ 0x24
 800661a:	5c9b      	ldrb	r3, [r3, r2]
 800661c:	2201      	movs	r2, #1
 800661e:	4393      	bics	r3, r2
 8006620:	b2d9      	uxtb	r1, r3
 8006622:	69bb      	ldr	r3, [r7, #24]
 8006624:	2224      	movs	r2, #36	@ 0x24
 8006626:	5499      	strb	r1, [r3, r2]
                        break;
 8006628:	e002      	b.n	8006630 <prvProcessReceivedCommands+0x158>

                    default:
                        /* Don't expect to get here. */
                        break;
 800662a:	46c0      	nop			@ (mov r8, r8)
 800662c:	e000      	b.n	8006630 <prvProcessReceivedCommands+0x158>
                        break;
 800662e:	46c0      	nop			@ (mov r8, r8)
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8006630:	4b08      	ldr	r3, [pc, #32]	@ (8006654 <prvProcessReceivedCommands+0x17c>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	1d39      	adds	r1, r7, #4
 8006636:	2200      	movs	r2, #0
 8006638:	0018      	movs	r0, r3
 800663a:	f7fe fd57 	bl	80050ec <xQueueReceive>
 800663e:	1e03      	subs	r3, r0, #0
 8006640:	d000      	beq.n	8006644 <prvProcessReceivedCommands+0x16c>
 8006642:	e754      	b.n	80064ee <prvProcessReceivedCommands+0x16>
                }
            }
        }
    }
 8006644:	46c0      	nop			@ (mov r8, r8)
 8006646:	46c0      	nop			@ (mov r8, r8)
 8006648:	46bd      	mov	sp, r7
 800664a:	b008      	add	sp, #32
 800664c:	bd80      	pop	{r7, pc}
 800664e:	46c0      	nop			@ (mov r8, r8)
 8006650:	080068fc 	.word	0x080068fc
 8006654:	200009f0 	.word	0x200009f0

08006658 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8006658:	b580      	push	{r7, lr}
 800665a:	b082      	sub	sp, #8
 800665c:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800665e:	e00b      	b.n	8006678 <prvSwitchTimerLists+0x20>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006660:	4b0f      	ldr	r3, [pc, #60]	@ (80066a0 <prvSwitchTimerLists+0x48>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	68db      	ldr	r3, [r3, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800666a:	2301      	movs	r3, #1
 800666c:	425a      	negs	r2, r3
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	0011      	movs	r1, r2
 8006672:	0018      	movs	r0, r3
 8006674:	f7ff fe1c 	bl	80062b0 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006678:	4b09      	ldr	r3, [pc, #36]	@ (80066a0 <prvSwitchTimerLists+0x48>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d1ee      	bne.n	8006660 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8006682:	4b07      	ldr	r3, [pc, #28]	@ (80066a0 <prvSwitchTimerLists+0x48>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8006688:	4b06      	ldr	r3, [pc, #24]	@ (80066a4 <prvSwitchTimerLists+0x4c>)
 800668a:	681a      	ldr	r2, [r3, #0]
 800668c:	4b04      	ldr	r3, [pc, #16]	@ (80066a0 <prvSwitchTimerLists+0x48>)
 800668e:	601a      	str	r2, [r3, #0]
        pxOverflowTimerList = pxTemp;
 8006690:	4b04      	ldr	r3, [pc, #16]	@ (80066a4 <prvSwitchTimerLists+0x4c>)
 8006692:	687a      	ldr	r2, [r7, #4]
 8006694:	601a      	str	r2, [r3, #0]
    }
 8006696:	46c0      	nop			@ (mov r8, r8)
 8006698:	46bd      	mov	sp, r7
 800669a:	b002      	add	sp, #8
 800669c:	bd80      	pop	{r7, pc}
 800669e:	46c0      	nop			@ (mov r8, r8)
 80066a0:	200009e8 	.word	0x200009e8
 80066a4:	200009ec 	.word	0x200009ec

080066a8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80066a8:	b580      	push	{r7, lr}
 80066aa:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80066ac:	f7fe f87e 	bl	80047ac <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80066b0:	4b0f      	ldr	r3, [pc, #60]	@ (80066f0 <prvCheckForValidListAndQueue+0x48>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d115      	bne.n	80066e4 <prvCheckForValidListAndQueue+0x3c>
            {
                vListInitialise( &xActiveTimerList1 );
 80066b8:	4b0e      	ldr	r3, [pc, #56]	@ (80066f4 <prvCheckForValidListAndQueue+0x4c>)
 80066ba:	0018      	movs	r0, r3
 80066bc:	f7fe fb96 	bl	8004dec <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80066c0:	4b0d      	ldr	r3, [pc, #52]	@ (80066f8 <prvCheckForValidListAndQueue+0x50>)
 80066c2:	0018      	movs	r0, r3
 80066c4:	f7fe fb92 	bl	8004dec <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80066c8:	4b0c      	ldr	r3, [pc, #48]	@ (80066fc <prvCheckForValidListAndQueue+0x54>)
 80066ca:	4a0a      	ldr	r2, [pc, #40]	@ (80066f4 <prvCheckForValidListAndQueue+0x4c>)
 80066cc:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80066ce:	4b0c      	ldr	r3, [pc, #48]	@ (8006700 <prvCheckForValidListAndQueue+0x58>)
 80066d0:	4a09      	ldr	r2, [pc, #36]	@ (80066f8 <prvCheckForValidListAndQueue+0x50>)
 80066d2:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ) );
 80066d4:	2200      	movs	r2, #0
 80066d6:	2110      	movs	r1, #16
 80066d8:	2005      	movs	r0, #5
 80066da:	f7fe fc8d 	bl	8004ff8 <xQueueGenericCreate>
 80066de:	0002      	movs	r2, r0
 80066e0:	4b03      	ldr	r3, [pc, #12]	@ (80066f0 <prvCheckForValidListAndQueue+0x48>)
 80066e2:	601a      	str	r2, [r3, #0]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80066e4:	f7fe f874 	bl	80047d0 <vPortExitCritical>
    }
 80066e8:	46c0      	nop			@ (mov r8, r8)
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}
 80066ee:	46c0      	nop			@ (mov r8, r8)
 80066f0:	200009f0 	.word	0x200009f0
 80066f4:	200009c0 	.word	0x200009c0
 80066f8:	200009d4 	.word	0x200009d4
 80066fc:	200009e8 	.word	0x200009e8
 8006700:	200009ec 	.word	0x200009ec

08006704 <memset>:
 8006704:	0003      	movs	r3, r0
 8006706:	1882      	adds	r2, r0, r2
 8006708:	4293      	cmp	r3, r2
 800670a:	d100      	bne.n	800670e <memset+0xa>
 800670c:	4770      	bx	lr
 800670e:	7019      	strb	r1, [r3, #0]
 8006710:	3301      	adds	r3, #1
 8006712:	e7f9      	b.n	8006708 <memset+0x4>

08006714 <strcat>:
 8006714:	0002      	movs	r2, r0
 8006716:	b510      	push	{r4, lr}
 8006718:	7813      	ldrb	r3, [r2, #0]
 800671a:	0014      	movs	r4, r2
 800671c:	3201      	adds	r2, #1
 800671e:	2b00      	cmp	r3, #0
 8006720:	d1fa      	bne.n	8006718 <strcat+0x4>
 8006722:	5cca      	ldrb	r2, [r1, r3]
 8006724:	54e2      	strb	r2, [r4, r3]
 8006726:	3301      	adds	r3, #1
 8006728:	2a00      	cmp	r2, #0
 800672a:	d1fa      	bne.n	8006722 <strcat+0xe>
 800672c:	bd10      	pop	{r4, pc}

0800672e <strchr>:
 800672e:	b2c9      	uxtb	r1, r1
 8006730:	7803      	ldrb	r3, [r0, #0]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d004      	beq.n	8006740 <strchr+0x12>
 8006736:	428b      	cmp	r3, r1
 8006738:	d100      	bne.n	800673c <strchr+0xe>
 800673a:	4770      	bx	lr
 800673c:	3001      	adds	r0, #1
 800673e:	e7f7      	b.n	8006730 <strchr+0x2>
 8006740:	424b      	negs	r3, r1
 8006742:	4159      	adcs	r1, r3
 8006744:	4249      	negs	r1, r1
 8006746:	4008      	ands	r0, r1
 8006748:	e7f7      	b.n	800673a <strchr+0xc>

0800674a <strncpy>:
 800674a:	0003      	movs	r3, r0
 800674c:	b530      	push	{r4, r5, lr}
 800674e:	001d      	movs	r5, r3
 8006750:	2a00      	cmp	r2, #0
 8006752:	d006      	beq.n	8006762 <strncpy+0x18>
 8006754:	780c      	ldrb	r4, [r1, #0]
 8006756:	3a01      	subs	r2, #1
 8006758:	3301      	adds	r3, #1
 800675a:	702c      	strb	r4, [r5, #0]
 800675c:	3101      	adds	r1, #1
 800675e:	2c00      	cmp	r4, #0
 8006760:	d1f5      	bne.n	800674e <strncpy+0x4>
 8006762:	2100      	movs	r1, #0
 8006764:	189a      	adds	r2, r3, r2
 8006766:	4293      	cmp	r3, r2
 8006768:	d100      	bne.n	800676c <strncpy+0x22>
 800676a:	bd30      	pop	{r4, r5, pc}
 800676c:	7019      	strb	r1, [r3, #0]
 800676e:	3301      	adds	r3, #1
 8006770:	e7f9      	b.n	8006766 <strncpy+0x1c>
	...

08006774 <__libc_init_array>:
 8006774:	b570      	push	{r4, r5, r6, lr}
 8006776:	2600      	movs	r6, #0
 8006778:	4c0c      	ldr	r4, [pc, #48]	@ (80067ac <__libc_init_array+0x38>)
 800677a:	4d0d      	ldr	r5, [pc, #52]	@ (80067b0 <__libc_init_array+0x3c>)
 800677c:	1b64      	subs	r4, r4, r5
 800677e:	10a4      	asrs	r4, r4, #2
 8006780:	42a6      	cmp	r6, r4
 8006782:	d109      	bne.n	8006798 <__libc_init_array+0x24>
 8006784:	2600      	movs	r6, #0
 8006786:	f000 f82b 	bl	80067e0 <_init>
 800678a:	4c0a      	ldr	r4, [pc, #40]	@ (80067b4 <__libc_init_array+0x40>)
 800678c:	4d0a      	ldr	r5, [pc, #40]	@ (80067b8 <__libc_init_array+0x44>)
 800678e:	1b64      	subs	r4, r4, r5
 8006790:	10a4      	asrs	r4, r4, #2
 8006792:	42a6      	cmp	r6, r4
 8006794:	d105      	bne.n	80067a2 <__libc_init_array+0x2e>
 8006796:	bd70      	pop	{r4, r5, r6, pc}
 8006798:	00b3      	lsls	r3, r6, #2
 800679a:	58eb      	ldr	r3, [r5, r3]
 800679c:	4798      	blx	r3
 800679e:	3601      	adds	r6, #1
 80067a0:	e7ee      	b.n	8006780 <__libc_init_array+0xc>
 80067a2:	00b3      	lsls	r3, r6, #2
 80067a4:	58eb      	ldr	r3, [r5, r3]
 80067a6:	4798      	blx	r3
 80067a8:	3601      	adds	r6, #1
 80067aa:	e7f2      	b.n	8006792 <__libc_init_array+0x1e>
 80067ac:	08006a28 	.word	0x08006a28
 80067b0:	08006a28 	.word	0x08006a28
 80067b4:	08006a2c 	.word	0x08006a2c
 80067b8:	08006a28 	.word	0x08006a28

080067bc <strcpy>:
 80067bc:	0003      	movs	r3, r0
 80067be:	780a      	ldrb	r2, [r1, #0]
 80067c0:	3101      	adds	r1, #1
 80067c2:	701a      	strb	r2, [r3, #0]
 80067c4:	3301      	adds	r3, #1
 80067c6:	2a00      	cmp	r2, #0
 80067c8:	d1f9      	bne.n	80067be <strcpy+0x2>
 80067ca:	4770      	bx	lr

080067cc <memcpy>:
 80067cc:	2300      	movs	r3, #0
 80067ce:	b510      	push	{r4, lr}
 80067d0:	429a      	cmp	r2, r3
 80067d2:	d100      	bne.n	80067d6 <memcpy+0xa>
 80067d4:	bd10      	pop	{r4, pc}
 80067d6:	5ccc      	ldrb	r4, [r1, r3]
 80067d8:	54c4      	strb	r4, [r0, r3]
 80067da:	3301      	adds	r3, #1
 80067dc:	e7f8      	b.n	80067d0 <memcpy+0x4>
	...

080067e0 <_init>:
 80067e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067e2:	46c0      	nop			@ (mov r8, r8)
 80067e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067e6:	bc08      	pop	{r3}
 80067e8:	469e      	mov	lr, r3
 80067ea:	4770      	bx	lr

080067ec <_fini>:
 80067ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067ee:	46c0      	nop			@ (mov r8, r8)
 80067f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067f2:	bc08      	pop	{r3}
 80067f4:	469e      	mov	lr, r3
 80067f6:	4770      	bx	lr
